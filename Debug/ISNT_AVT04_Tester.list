
ISNT_AVT04_Tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b07c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011f78  0800b22c  0800b22c  0001b22c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d1a4  0801d1a4  00030360  2**0
                  CONTENTS
  4 .ARM          00000008  0801d1a4  0801d1a4  0002d1a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d1ac  0801d1ac  00030360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d1ac  0801d1ac  0002d1ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d1b0  0801d1b0  0002d1b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000360  20000000  0801d1b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030360  2**0
                  CONTENTS
 10 .bss          00006b34  20000360  20000360  00030360  2**2
                  ALLOC
 11 ._user_heap_stack 00000804  20006e94  20006e94  00030360  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030360  2**0
                  CONTENTS, READONLY
 13 .debug_info   00033446  00000000  00000000  00030390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000058c6  00000000  00000000  000637d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b18  00000000  00000000  000690a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001940  00000000  00000000  0006abb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c171  00000000  00000000  0006c4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002149e  00000000  00000000  00098669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00102f7c  00000000  00000000  000b9b07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c1  00000000  00000000  001bca83  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000723c  00000000  00000000  001bcb44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00003f67  00000000  00000000  001c3d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000360 	.word	0x20000360
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b214 	.word	0x0800b214

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000364 	.word	0x20000364
 80001ec:	0800b214 	.word	0x0800b214

080001f0 <arm_bitreversal_32>:
 80001f0:	1c4b      	adds	r3, r1, #1
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	bf98      	it	ls
 80001f6:	4770      	bxls	lr
 80001f8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001fc:	1c91      	adds	r1, r2, #2
 80001fe:	089b      	lsrs	r3, r3, #2

08000200 <arm_bitreversal_32_0>:
 8000200:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000204:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000208:	880a      	ldrh	r2, [r1, #0]
 800020a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800020e:	4480      	add	r8, r0
 8000210:	4481      	add	r9, r0
 8000212:	4402      	add	r2, r0
 8000214:	4484      	add	ip, r0
 8000216:	f8d9 7000 	ldr.w	r7, [r9]
 800021a:	f8d8 6000 	ldr.w	r6, [r8]
 800021e:	6815      	ldr	r5, [r2, #0]
 8000220:	f8dc 4000 	ldr.w	r4, [ip]
 8000224:	f8c9 6000 	str.w	r6, [r9]
 8000228:	f8c8 7000 	str.w	r7, [r8]
 800022c:	f8cc 5000 	str.w	r5, [ip]
 8000230:	6014      	str	r4, [r2, #0]
 8000232:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000236:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800023a:	6855      	ldr	r5, [r2, #4]
 800023c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000240:	f8c9 6004 	str.w	r6, [r9, #4]
 8000244:	f8c8 7004 	str.w	r7, [r8, #4]
 8000248:	f8cc 5004 	str.w	r5, [ip, #4]
 800024c:	6054      	str	r4, [r2, #4]
 800024e:	3108      	adds	r1, #8
 8000250:	3b01      	subs	r3, #1
 8000252:	d1d5      	bne.n	8000200 <arm_bitreversal_32_0>
 8000254:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000258:	4770      	bx	lr

0800025a <arm_bitreversal_16>:
 800025a:	1c4b      	adds	r3, r1, #1
 800025c:	2b01      	cmp	r3, #1
 800025e:	bf98      	it	ls
 8000260:	4770      	bxls	lr
 8000262:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000266:	1c91      	adds	r1, r2, #2
 8000268:	089b      	lsrs	r3, r3, #2

0800026a <arm_bitreversal_16_0>:
 800026a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800026e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000272:	880a      	ldrh	r2, [r1, #0]
 8000274:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000278:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800027c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000280:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000284:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000288:	f8d9 7000 	ldr.w	r7, [r9]
 800028c:	f8d8 6000 	ldr.w	r6, [r8]
 8000290:	6815      	ldr	r5, [r2, #0]
 8000292:	f8dc 4000 	ldr.w	r4, [ip]
 8000296:	f8c9 6000 	str.w	r6, [r9]
 800029a:	f8c8 7000 	str.w	r7, [r8]
 800029e:	f8cc 5000 	str.w	r5, [ip]
 80002a2:	6014      	str	r4, [r2, #0]
 80002a4:	3108      	adds	r1, #8
 80002a6:	3b01      	subs	r3, #1
 80002a8:	d1df      	bne.n	800026a <arm_bitreversal_16_0>
 80002aa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <audio_fft>:
	arm_cfft_radix4_instance_f32 cffti;



	bool  audio_fft (void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
		 arm_status  status;
	memset (fft_pResult.fft_DAmp ,0,  sizeof (fft_pResult.fft_DAmp));
 80005ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005b2:	2100      	movs	r1, #0
 80005b4:	485b      	ldr	r0, [pc, #364]	; (8000724 <audio_fft+0x17c>)
 80005b6:	f00a fd47 	bl	800b048 <memset>
	fft_pResult.fft_Real_Idxm1 =0;
 80005ba:	4b5b      	ldr	r3, [pc, #364]	; (8000728 <audio_fft+0x180>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
	fft_pResult.fft_Real_Nm1 =0;
 80005c0:	4b59      	ldr	r3, [pc, #356]	; (8000728 <audio_fft+0x180>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	801a      	strh	r2, [r3, #0]

	fft_pResult.fft_Real_Idxm2 =0;
 80005c6:	4b58      	ldr	r3, [pc, #352]	; (8000728 <audio_fft+0x180>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	60da      	str	r2, [r3, #12]
	fft_pResult.fft_Real_Nm2 =0;
 80005cc:	4b56      	ldr	r3, [pc, #344]	; (8000728 <audio_fft+0x180>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	805a      	strh	r2, [r3, #2]

	fft_pResult.fft_Real_Idxm3 =0;
 80005d2:	4b55      	ldr	r3, [pc, #340]	; (8000728 <audio_fft+0x180>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	611a      	str	r2, [r3, #16]
	fft_pResult.fft_Real_Nm3 =0;
 80005d8:	4b53      	ldr	r3, [pc, #332]	; (8000728 <audio_fft+0x180>)
 80005da:	2200      	movs	r2, #0
 80005dc:	809a      	strh	r2, [r3, #4]
	fft_pResult.estimate = 0;
 80005de:	4b52      	ldr	r3, [pc, #328]	; (8000728 <audio_fft+0x180>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
   status = arm_rfft_init_q15(&S, FFT_SIZE, 0, 1);//функция инициализации необходима для БФП
 80005e6:	2301      	movs	r3, #1
 80005e8:	2200      	movs	r2, #0
 80005ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ee:	484f      	ldr	r0, [pc, #316]	; (800072c <audio_fft+0x184>)
 80005f0:	f00a f834 	bl	800a65c <arm_rfft_init_q15>
 80005f4:	4603      	mov	r3, r0
 80005f6:	70fb      	strb	r3, [r7, #3]

 if(status == ARM_MATH_SUCCESS)
 80005f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d11e      	bne.n	800063e <audio_fft+0x96>
  {
    arm_rfft_q15(&S, fft_Sbuff, fft_Dbuff);   //выполнение БФП
 8000600:	4a4b      	ldr	r2, [pc, #300]	; (8000730 <audio_fft+0x188>)
 8000602:	494c      	ldr	r1, [pc, #304]	; (8000734 <audio_fft+0x18c>)
 8000604:	4849      	ldr	r0, [pc, #292]	; (800072c <audio_fft+0x184>)
 8000606:	f009 ffcd 	bl	800a5a4 <arm_rfft_q15>

   for(int idx = 0; idx < FFT_SIZE ; idx++)
 800060a:	2300      	movs	r3, #0
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	e00c      	b.n	800062a <audio_fft+0x82>
   {
	   fft_Dbuff[idx] =  fft_Dbuff[idx] << 8;
 8000610:	4a47      	ldr	r2, [pc, #284]	; (8000730 <audio_fft+0x188>)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000618:	021b      	lsls	r3, r3, #8
 800061a:	b219      	sxth	r1, r3
 800061c:	4a44      	ldr	r2, [pc, #272]	; (8000730 <audio_fft+0x188>)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(int idx = 0; idx < FFT_SIZE ; idx++)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	3301      	adds	r3, #1
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000630:	dbee      	blt.n	8000610 <audio_fft+0x68>
   }
    arm_cmplx_mag_q15(fft_Dbuff, fft_pResult.fft_DAmp, FFT_SIZE);//вычисляем амплитуды гармоник
 8000632:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000636:	493b      	ldr	r1, [pc, #236]	; (8000724 <audio_fft+0x17c>)
 8000638:	483d      	ldr	r0, [pc, #244]	; (8000730 <audio_fft+0x188>)
 800063a:	f00a f88d 	bl	800a758 <arm_cmplx_mag_q15>
  //  arm_cmplx_mag_squared_f32( fft_Dbuff, fft_Sbuff, FFT_SIZE);
  }


   arm_max_q15(  &fft_pResult.fft_DAmp[1],  (uint32_t) (FFT_SIZE /2) ,   &fft_pResult.fft_Real_Nm1,
 800063e:	4b3e      	ldr	r3, [pc, #248]	; (8000738 <audio_fft+0x190>)
 8000640:	4a39      	ldr	r2, [pc, #228]	; (8000728 <audio_fft+0x180>)
 8000642:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000646:	483d      	ldr	r0, [pc, #244]	; (800073c <audio_fft+0x194>)
 8000648:	f009 fef8 	bl	800a43c <arm_max_q15>
		         &fft_pResult.fft_Real_Idxm1);

   fft_pResult.fft_Real_Pos1 = fft_pResult.fft_Real_Idxm1 + fft_Freq_offset;
 800064c:	4b36      	ldr	r3, [pc, #216]	; (8000728 <audio_fft+0x180>)
 800064e:	689b      	ldr	r3, [r3, #8]
 8000650:	3303      	adds	r3, #3
 8000652:	4a35      	ldr	r2, [pc, #212]	; (8000728 <audio_fft+0x180>)
 8000654:	6153      	str	r3, [r2, #20]


      arm_max_q15(  &fft_pResult.fft_DAmp[ fft_pResult.fft_Real_Pos1],   (FFT_SIZE - fft_pResult.fft_Real_Pos1),
 8000656:	4b34      	ldr	r3, [pc, #208]	; (8000728 <audio_fft+0x180>)
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	330c      	adds	r3, #12
 800065c:	005b      	lsls	r3, r3, #1
 800065e:	4a32      	ldr	r2, [pc, #200]	; (8000728 <audio_fft+0x180>)
 8000660:	4413      	add	r3, r2
 8000662:	1d18      	adds	r0, r3, #4
 8000664:	4b30      	ldr	r3, [pc, #192]	; (8000728 <audio_fft+0x180>)
 8000666:	695b      	ldr	r3, [r3, #20]
 8000668:	f5c3 7100 	rsb	r1, r3, #512	; 0x200
 800066c:	4b34      	ldr	r3, [pc, #208]	; (8000740 <audio_fft+0x198>)
 800066e:	4a35      	ldr	r2, [pc, #212]	; (8000744 <audio_fft+0x19c>)
 8000670:	f009 fee4 	bl	800a43c <arm_max_q15>
    		     &fft_pResult.fft_Real_Nm2,
   		         &fft_pResult.fft_Real_Idxm2);

      if(fft_pResult.fft_Real_Idxm1 > fft_Freq_offset)
 8000674:	4b2c      	ldr	r3, [pc, #176]	; (8000728 <audio_fft+0x180>)
 8000676:	689b      	ldr	r3, [r3, #8]
 8000678:	2b03      	cmp	r3, #3
 800067a:	d907      	bls.n	800068c <audio_fft+0xe4>
      arm_max_q15(  &fft_pResult.fft_DAmp[1],  ( fft_pResult.fft_Real_Idxm1 - fft_Freq_offset),
 800067c:	4b2a      	ldr	r3, [pc, #168]	; (8000728 <audio_fft+0x180>)
 800067e:	689b      	ldr	r3, [r3, #8]
 8000680:	1ed9      	subs	r1, r3, #3
 8000682:	4b31      	ldr	r3, [pc, #196]	; (8000748 <audio_fft+0x1a0>)
 8000684:	4a31      	ldr	r2, [pc, #196]	; (800074c <audio_fft+0x1a4>)
 8000686:	482d      	ldr	r0, [pc, #180]	; (800073c <audio_fft+0x194>)
 8000688:	f009 fed8 	bl	800a43c <arm_max_q15>
         		     &fft_pResult.fft_Real_Nm3,
        		         &fft_pResult.fft_Real_Idxm3);

      fft_pResult.f1 =  (uint32_t)fft_Freq_step * fft_pResult.fft_Real_Idxm1 ;      // 46 mks for 23.944   41.764
 800068c:	4b26      	ldr	r3, [pc, #152]	; (8000728 <audio_fft+0x180>)
 800068e:	689a      	ldr	r2, [r3, #8]
 8000690:	4613      	mov	r3, r2
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	4413      	add	r3, r2
 8000696:	00db      	lsls	r3, r3, #3
 8000698:	4413      	add	r3, r2
 800069a:	4a23      	ldr	r2, [pc, #140]	; (8000728 <audio_fft+0x180>)
 800069c:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c


    		if (fft_pResult.fft_Real_Nm1 > (7 * fft_pResult.fft_Real_Nm2 /6)
 80006a0:	4b21      	ldr	r3, [pc, #132]	; (8000728 <audio_fft+0x180>)
 80006a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006a6:	4619      	mov	r1, r3
 80006a8:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <audio_fft+0x180>)
 80006aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80006ae:	461a      	mov	r2, r3
 80006b0:	4613      	mov	r3, r2
 80006b2:	00db      	lsls	r3, r3, #3
 80006b4:	1a9b      	subs	r3, r3, r2
 80006b6:	4a26      	ldr	r2, [pc, #152]	; (8000750 <audio_fft+0x1a8>)
 80006b8:	fb82 0203 	smull	r0, r2, r2, r3
 80006bc:	17db      	asrs	r3, r3, #31
 80006be:	1ad3      	subs	r3, r2, r3
 80006c0:	4299      	cmp	r1, r3
 80006c2:	dd29      	ble.n	8000718 <audio_fft+0x170>
    				&& fft_pResult.fft_Real_Nm1 > (7 * fft_pResult.fft_Real_Nm3 /6)
 80006c4:	4b18      	ldr	r3, [pc, #96]	; (8000728 <audio_fft+0x180>)
 80006c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006ca:	4619      	mov	r1, r3
 80006cc:	4b16      	ldr	r3, [pc, #88]	; (8000728 <audio_fft+0x180>)
 80006ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80006d2:	461a      	mov	r2, r3
 80006d4:	4613      	mov	r3, r2
 80006d6:	00db      	lsls	r3, r3, #3
 80006d8:	1a9b      	subs	r3, r3, r2
 80006da:	4a1d      	ldr	r2, [pc, #116]	; (8000750 <audio_fft+0x1a8>)
 80006dc:	fb82 0203 	smull	r0, r2, r2, r3
 80006e0:	17db      	asrs	r3, r3, #31
 80006e2:	1ad3      	subs	r3, r2, r3
 80006e4:	4299      	cmp	r1, r3
 80006e6:	dd17      	ble.n	8000718 <audio_fft+0x170>
    	            &&(fft_pResult.fft_Real_Nm1  > fft_Real_Amp_min)
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <audio_fft+0x180>)
 80006ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006ee:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80006f2:	4293      	cmp	r3, r2
 80006f4:	dd10      	ble.n	8000718 <audio_fft+0x170>
    	         	&& (fft_pResult.f1 > fft_pResult_f1_min)
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <audio_fft+0x180>)
 80006f8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 80006fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000700:	d90a      	bls.n	8000718 <audio_fft+0x170>
    		         &&(fft_pResult.f1 < fft_pResult_f1_max))
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <audio_fft+0x180>)
 8000704:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8000708:	f240 424b 	movw	r2, #1099	; 0x44b
 800070c:	4293      	cmp	r3, r2
 800070e:	d803      	bhi.n	8000718 <audio_fft+0x170>

    	 fft_pResult.estimate = 1;
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <audio_fft+0x180>)
 8000712:	2201      	movs	r2, #1
 8000714:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424


   return true;
 8000718:	2301      	movs	r3, #1
}
 800071a:	4618      	mov	r0, r3
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20005dc0 	.word	0x20005dc0
 8000728:	20005da4 	.word	0x20005da4
 800072c:	20005d68 	.word	0x20005d68
 8000730:	20000b7c 	.word	0x20000b7c
 8000734:	2000037c 	.word	0x2000037c
 8000738:	20005dac 	.word	0x20005dac
 800073c:	20005dc2 	.word	0x20005dc2
 8000740:	20005db0 	.word	0x20005db0
 8000744:	20005da6 	.word	0x20005da6
 8000748:	20005db4 	.word	0x20005db4
 800074c:	20005da8 	.word	0x20005da8
 8000750:	2aaaaaab 	.word	0x2aaaaaab

08000754 <InOutADC_Data_Fast>:



uint32_t   InOutADC_Data_Fast(ADC_HandleTypeDef *hadc, uint32_t num)
      {
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
	 //  ADC_ChannelConfTypeDef sConfig;
	//  84/2 = 42 Mhz  3 +12 = 15 sampling 35,714 mks  512- 18,25 ms  54,7
	 xSemaphoreTake(cons.gate_audio, portMAX_DELAY);
 800075e:	4b20      	ldr	r3, [pc, #128]	; (80007e0 <InOutADC_Data_Fast+0x8c>)
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	f04f 31ff 	mov.w	r1, #4294967295
 8000766:	4618      	mov	r0, r3
 8000768:	f007 fc2a 	bl	8007fc0 <xQueueSemaphoreTake>



	 HAL_ADC_Start(hadc);
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f003 f987 	bl	8003a80 <HAL_ADC_Start>
	      for(int i= 0; i < FFT_SIZE; i++)
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	e019      	b.n	80007ac <InOutADC_Data_Fast+0x58>
	      {

    	  HAL_ADC_PollForConversion(hadc, 100);
 8000778:	2164      	movs	r1, #100	; 0x64
 800077a:	6878      	ldr	r0, [r7, #4]
 800077c:	f003 fa85 	bl	8003c8a <HAL_ADC_PollForConversion>

          ADC_chan.aInputs[num] = HAL_ADC_GetValue(hadc);
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f003 fb0d 	bl	8003da0 <HAL_ADC_GetValue>
 8000786:	4602      	mov	r2, r0
 8000788:	4916      	ldr	r1, [pc, #88]	; (80007e4 <InOutADC_Data_Fast+0x90>)
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	3302      	adds	r3, #2
 800078e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    	  fft_Sbuff[i]=  (q15_t)ADC_chan.aInputs[num];// HAL_ADC_GetValue(hadc);//ADC_chan.aInputs[num];
 8000792:	4a14      	ldr	r2, [pc, #80]	; (80007e4 <InOutADC_Data_Fast+0x90>)
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	3302      	adds	r3, #2
 8000798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800079c:	b219      	sxth	r1, r3
 800079e:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <InOutADC_Data_Fast+0x94>)
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	      for(int i= 0; i < FFT_SIZE; i++)
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	3301      	adds	r3, #1
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80007b2:	dbe1      	blt.n	8000778 <InOutADC_Data_Fast+0x24>

	      }
	      HAL_ADC_Stop(hadc);
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f003 fa35 	bl	8003c24 <HAL_ADC_Stop>
	      audio_fft ();
 80007ba:	f7ff fef5 	bl	80005a8 <audio_fft>
     		  xSemaphoreGive(cons.gate_audio);
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <InOutADC_Data_Fast+0x8c>)
 80007c0:	6858      	ldr	r0, [r3, #4]
 80007c2:	2300      	movs	r3, #0
 80007c4:	2200      	movs	r2, #0
 80007c6:	2100      	movs	r1, #0
 80007c8:	f007 f980 	bl	8007acc <xQueueGenericSend>
      		return ADC_chan.aInputs[num];
 80007cc:	4a05      	ldr	r2, [pc, #20]	; (80007e4 <InOutADC_Data_Fast+0x90>)
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	3302      	adds	r3, #2
 80007d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

      }
 80007d6:	4618      	mov	r0, r3
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20006510 	.word	0x20006510
 80007e4:	20006454 	.word	0x20006454
 80007e8:	2000037c 	.word	0x2000037c

080007ec <Can_Task>:





void Can_Task(void const * argument) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b088      	sub	sp, #32
 80007f0:	af02      	add	r7, sp, #8
 80007f2:	6078      	str	r0, [r7, #4]
	request.succes = true;
 80007f4:	4bb4      	ldr	r3, [pc, #720]	; (8000ac8 <Can_Task+0x2dc>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    bool res;
     //  uint8_t buf[10];
      uint32_t timer_network_scan =  0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
      uint32_t audio_routine_scan =  0;
 8000800:	2300      	movs	r3, #0
 8000802:	613b      	str	r3, [r7, #16]

	  HAL_CAN_Start(&hcan1);
 8000804:	48b1      	ldr	r0, [pc, #708]	; (8000acc <Can_Task+0x2e0>)
 8000806:	f003 fee3 	bl	80045d0 <HAL_CAN_Start>
	  Can_state.state = 0x0;
 800080a:	4bb1      	ldr	r3, [pc, #708]	; (8000ad0 <Can_Task+0x2e4>)
 800080c:	2200      	movs	r2, #0
 800080e:	721a      	strb	r2, [r3, #8]
   // #ifdef V_2BW
     Can_state.version = ISNT_M_plus;
 8000810:	4baf      	ldr	r3, [pc, #700]	; (8000ad0 <Can_Task+0x2e4>)
 8000812:	2200      	movs	r2, #0
 8000814:	701a      	strb	r2, [r3, #0]
    // #endif

       memset(&Can_state.SRN[0] , 0 , sizeof(Can_state.SRN));
 8000816:	2210      	movs	r2, #16
 8000818:	2100      	movs	r1, #0
 800081a:	48ae      	ldr	r0, [pc, #696]	; (8000ad4 <Can_Task+0x2e8>)
 800081c:	f00a fc14 	bl	800b048 <memset>

       Can_state.io_test =1;
 8000820:	4bab      	ldr	r3, [pc, #684]	; (8000ad0 <Can_Task+0x2e4>)
 8000822:	2201      	movs	r2, #1
 8000824:	715a      	strb	r2, [r3, #5]

       memset(&Can_state.txbuf[0] , 0 , sizeof(Can_state.txbuf));
 8000826:	2264      	movs	r2, #100	; 0x64
 8000828:	2100      	movs	r1, #0
 800082a:	48ab      	ldr	r0, [pc, #684]	; (8000ad8 <Can_Task+0x2ec>)
 800082c:	f00a fc0c 	bl	800b048 <memset>
       memset(&Config , 0 , sizeof(Config));
 8000830:	2258      	movs	r2, #88	; 0x58
 8000832:	2100      	movs	r1, #0
 8000834:	48a9      	ldr	r0, [pc, #676]	; (8000adc <Can_Task+0x2f0>)
 8000836:	f00a fc07 	bl	800b048 <memset>

      Init_Pins();
 800083a:	f002 fb63 	bl	8002f04 <Init_Pins>

      cons.gate = xSemaphoreCreateRecursiveMutex();
 800083e:	2004      	movs	r0, #4
 8000840:	f007 f92b 	bl	8007a9a <xQueueCreateMutex>
 8000844:	4603      	mov	r3, r0
 8000846:	4aa6      	ldr	r2, [pc, #664]	; (8000ae0 <Can_Task+0x2f4>)
 8000848:	6013      	str	r3, [r2, #0]

	for (;;) {



		Power_Monitor();
 800084a:	f001 fa2b 	bl	8001ca4 <Power_Monitor>


    if(Can_state.start_test_cmd22  && Can_state.power_is_on)
 800084e:	4ba0      	ldr	r3, [pc, #640]	; (8000ad0 <Can_Task+0x2e4>)
 8000850:	78db      	ldrb	r3, [r3, #3]
 8000852:	2b00      	cmp	r3, #0
 8000854:	f000 8244 	beq.w	8000ce0 <Can_Task+0x4f4>
 8000858:	4b9d      	ldr	r3, [pc, #628]	; (8000ad0 <Can_Task+0x2e4>)
 800085a:	785b      	ldrb	r3, [r3, #1]
 800085c:	2b00      	cmp	r3, #0
 800085e:	f000 823f 	beq.w	8000ce0 <Can_Task+0x4f4>
   //xSemaphoreTake(cons.start_test_cmd22, portMAX_DELAY);
		{


	switch (Can_state.state)
 8000862:	4b9b      	ldr	r3, [pc, #620]	; (8000ad0 <Can_Task+0x2e4>)
 8000864:	7a1b      	ldrb	r3, [r3, #8]
 8000866:	2b12      	cmp	r3, #18
 8000868:	f200 8247 	bhi.w	8000cfa <Can_Task+0x50e>
 800086c:	a201      	add	r2, pc, #4	; (adr r2, 8000874 <Can_Task+0x88>)
 800086e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000872:	bf00      	nop
 8000874:	080008c1 	.word	0x080008c1
 8000878:	0800097f 	.word	0x0800097f
 800087c:	080009a5 	.word	0x080009a5
 8000880:	080009cb 	.word	0x080009cb
 8000884:	080009f1 	.word	0x080009f1
 8000888:	08000cfb 	.word	0x08000cfb
 800088c:	08000a17 	.word	0x08000a17
 8000890:	08000a25 	.word	0x08000a25
 8000894:	08000a33 	.word	0x08000a33
 8000898:	08000a41 	.word	0x08000a41
 800089c:	08000a59 	.word	0x08000a59
 80008a0:	08000a7f 	.word	0x08000a7f
 80008a4:	08000a93 	.word	0x08000a93
 80008a8:	08000aa1 	.word	0x08000aa1
 80008ac:	08000af5 	.word	0x08000af5
 80008b0:	08000b5f 	.word	0x08000b5f
 80008b4:	08000b77 	.word	0x08000b77
 80008b8:	08000bb5 	.word	0x08000bb5
 80008bc:	08000ca1 	.word	0x08000ca1
		   
		break;*/
		
	case Start_Test:

		   memset(&fft_pResult, 0, sizeof(fft_pResult));
 80008c0:	f44f 6287 	mov.w	r2, #1080	; 0x438
 80008c4:	2100      	movs	r1, #0
 80008c6:	4887      	ldr	r0, [pc, #540]	; (8000ae4 <Can_Task+0x2f8>)
 80008c8:	f00a fbbe 	bl	800b048 <memset>
	      	fft_pResult.mute_adc_off = InOutADC_Data(&hadc2, 2);
 80008cc:	2102      	movs	r1, #2
 80008ce:	4886      	ldr	r0, [pc, #536]	; (8000ae8 <Can_Task+0x2fc>)
 80008d0:	f001 fd5a 	bl	8002388 <InOutADC_Data>
 80008d4:	4603      	mov	r3, r0
 80008d6:	4a83      	ldr	r2, [pc, #524]	; (8000ae4 <Can_Task+0x2f8>)
 80008d8:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
				if (Can_state.version == ISNT_M_min ||Can_state.version == ISNT_24) {
 80008dc:	4b7c      	ldr	r3, [pc, #496]	; (8000ad0 <Can_Task+0x2e4>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d003      	beq.n	80008ec <Can_Task+0x100>
 80008e4:	4b7a      	ldr	r3, [pc, #488]	; (8000ad0 <Can_Task+0x2e4>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b03      	cmp	r3, #3
 80008ea:	d110      	bne.n	800090e <Can_Task+0x122>
					if (fft_pResult.mute_adc_off > MUTE_Mmin_OFF_MIN
 80008ec:	4b7d      	ldr	r3, [pc, #500]	; (8000ae4 <Can_Task+0x2f8>)
 80008ee:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80008f2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d909      	bls.n	800090e <Can_Task+0x122>
							&& fft_pResult.mute_adc_off < MUTE_Mmin_OFF_MAX) {
 80008fa:	4b7a      	ldr	r3, [pc, #488]	; (8000ae4 <Can_Task+0x2f8>)
 80008fc:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8000900:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000904:	d203      	bcs.n	800090e <Can_Task+0x122>
						fft_pResult.mute_type_ok = 1;
 8000906:	4b77      	ldr	r3, [pc, #476]	; (8000ae4 <Can_Task+0x2f8>)
 8000908:	2201      	movs	r2, #1
 800090a:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
					}
				}
				if (Can_state.version == ISNT_M_plus || Can_state.version == AVT04) {
 800090e:	4b70      	ldr	r3, [pc, #448]	; (8000ad0 <Can_Task+0x2e4>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d003      	beq.n	800091e <Can_Task+0x132>
 8000916:	4b6e      	ldr	r3, [pc, #440]	; (8000ad0 <Can_Task+0x2e4>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b02      	cmp	r3, #2
 800091c:	d109      	bne.n	8000932 <Can_Task+0x146>
					if (/*fft_pResult.mute_adc_off > MUTE_Mplus_OFF_MIN
							&& */fft_pResult.mute_adc_off < MUTE_Mplus_OFF_MAX) {
 800091e:	4b71      	ldr	r3, [pc, #452]	; (8000ae4 <Can_Task+0x2f8>)
 8000920:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
					if (/*fft_pResult.mute_adc_off > MUTE_Mplus_OFF_MIN
 8000924:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000928:	d203      	bcs.n	8000932 <Can_Task+0x146>
						fft_pResult.mute_type_ok = 1;
 800092a:	4b6e      	ldr	r3, [pc, #440]	; (8000ae4 <Can_Task+0x2f8>)
 800092c:	2201      	movs	r2, #1
 800092e:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
					}
				}


     Can_state.Config = Get_SN(&Can_state);
 8000932:	4867      	ldr	r0, [pc, #412]	; (8000ad0 <Can_Task+0x2e4>)
 8000934:	f000 fb88 	bl	8001048 <Get_SN>
 8000938:	4603      	mov	r3, r0
 800093a:	461a      	mov	r2, r3
 800093c:	4b64      	ldr	r3, [pc, #400]	; (8000ad0 <Can_Task+0x2e4>)
 800093e:	761a      	strb	r2, [r3, #24]


	if(Autorization_test(Can_state.Config))
 8000940:	4b63      	ldr	r3, [pc, #396]	; (8000ad0 <Can_Task+0x2e4>)
 8000942:	7e1b      	ldrb	r3, [r3, #24]
 8000944:	4618      	mov	r0, r3
 8000946:	f000 fbb9 	bl	80010bc <Autorization_test>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	f000 81c9 	beq.w	8000ce4 <Can_Task+0x4f8>
	{

		CAN_UDS_Diagnostic_IO_test(1, 2, 1);
 8000952:	2201      	movs	r2, #1
 8000954:	2102      	movs	r1, #2
 8000956:	2001      	movs	r0, #1
 8000958:	f000 ff3a 	bl	80017d0 <CAN_UDS_Diagnostic_IO_test>

		if(HW_test()){
 800095c:	f001 f970 	bl	8001c40 <HW_test>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	f000 81be 	beq.w	8000ce4 <Can_Task+0x4f8>
	            ConsoleWrite (&cmd_sw_start[0],   sizeof(cmd_sw_start) );
 8000968:	210e      	movs	r1, #14
 800096a:	4860      	ldr	r0, [pc, #384]	; (8000aec <Can_Task+0x300>)
 800096c:	f000 f9da 	bl	8000d24 <ConsoleWrite>
	         	Can_state.state +=1;
 8000970:	4b57      	ldr	r3, [pc, #348]	; (8000ad0 <Can_Task+0x2e4>)
 8000972:	7a1b      	ldrb	r3, [r3, #8]
 8000974:	3301      	adds	r3, #1
 8000976:	b2da      	uxtb	r2, r3
 8000978:	4b55      	ldr	r3, [pc, #340]	; (8000ad0 <Can_Task+0x2e4>)
 800097a:	721a      	strb	r2, [r3, #8]

		}
	}


			     break;
 800097c:	e1b2      	b.n	8000ce4 <Can_Task+0x4f8>
		case Get_Who_Am_I_Accelerometer:




		  if(CAN_UDS_Diagnostic_Req_Send(&message, OBD2_CMD_READ , P99_group , Get_Who_Am_I_Accelerometer,  3))
 800097e:	2303      	movs	r3, #3
 8000980:	9300      	str	r3, [sp, #0]
 8000982:	2301      	movs	r3, #1
 8000984:	2299      	movs	r2, #153	; 0x99
 8000986:	2122      	movs	r1, #34	; 0x22
 8000988:	4859      	ldr	r0, [pc, #356]	; (8000af0 <Can_Task+0x304>)
 800098a:	f000 fa21 	bl	8000dd0 <CAN_UDS_Diagnostic_Req_Send>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	f000 81a9 	beq.w	8000ce8 <Can_Task+0x4fc>
    				Can_state.state +=1;
 8000996:	4b4e      	ldr	r3, [pc, #312]	; (8000ad0 <Can_Task+0x2e4>)
 8000998:	7a1b      	ldrb	r3, [r3, #8]
 800099a:	3301      	adds	r3, #1
 800099c:	b2da      	uxtb	r2, r3
 800099e:	4b4c      	ldr	r3, [pc, #304]	; (8000ad0 <Can_Task+0x2e4>)
 80009a0:	721a      	strb	r2, [r3, #8]
	     break;
 80009a2:	e1a1      	b.n	8000ce8 <Can_Task+0x4fc>

	     case Get_Who_Am_I_AudioCodec:
	    	 if(CAN_UDS_Diagnostic_Req_Send(&message, OBD2_CMD_READ , P99_group, Get_Who_Am_I_AudioCodec,  3))
 80009a4:	2303      	movs	r3, #3
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	2302      	movs	r3, #2
 80009aa:	2299      	movs	r2, #153	; 0x99
 80009ac:	2122      	movs	r1, #34	; 0x22
 80009ae:	4850      	ldr	r0, [pc, #320]	; (8000af0 <Can_Task+0x304>)
 80009b0:	f000 fa0e 	bl	8000dd0 <CAN_UDS_Diagnostic_Req_Send>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	f000 8198 	beq.w	8000cec <Can_Task+0x500>
	    	 				Can_state.state +=1;
 80009bc:	4b44      	ldr	r3, [pc, #272]	; (8000ad0 <Can_Task+0x2e4>)
 80009be:	7a1b      	ldrb	r3, [r3, #8]
 80009c0:	3301      	adds	r3, #1
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	4b42      	ldr	r3, [pc, #264]	; (8000ad0 <Can_Task+0x2e4>)
 80009c6:	721a      	strb	r2, [r3, #8]
		break;
 80009c8:	e190      	b.n	8000cec <Can_Task+0x500>

	     case Get_SIM_ICCID:
	    	 if(CAN_UDS_Diagnostic_Req_Send(&message, OBD2_CMD_READ , 0xFD , Get_SIM_ICCID,  3))
 80009ca:	2303      	movs	r3, #3
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	2303      	movs	r3, #3
 80009d0:	22fd      	movs	r2, #253	; 0xfd
 80009d2:	2122      	movs	r1, #34	; 0x22
 80009d4:	4846      	ldr	r0, [pc, #280]	; (8000af0 <Can_Task+0x304>)
 80009d6:	f000 f9fb 	bl	8000dd0 <CAN_UDS_Diagnostic_Req_Send>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	f000 8187 	beq.w	8000cf0 <Can_Task+0x504>
	    		   	Can_state.state +=1;
 80009e2:	4b3b      	ldr	r3, [pc, #236]	; (8000ad0 <Can_Task+0x2e4>)
 80009e4:	7a1b      	ldrb	r3, [r3, #8]
 80009e6:	3301      	adds	r3, #1
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	4b39      	ldr	r3, [pc, #228]	; (8000ad0 <Can_Task+0x2e4>)
 80009ec:	721a      	strb	r2, [r3, #8]
	    	 break;
 80009ee:	e17f      	b.n	8000cf0 <Can_Task+0x504>

	     case Get_SIM_IMSI:
	   	   if(CAN_UDS_Diagnostic_Req_Send(&message, OBD2_CMD_READ , P99_group , Get_SIM_IMSI,  3))   //0x4
 80009f0:	2303      	movs	r3, #3
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	2304      	movs	r3, #4
 80009f6:	2299      	movs	r2, #153	; 0x99
 80009f8:	2122      	movs	r1, #34	; 0x22
 80009fa:	483d      	ldr	r0, [pc, #244]	; (8000af0 <Can_Task+0x304>)
 80009fc:	f000 f9e8 	bl	8000dd0 <CAN_UDS_Diagnostic_Req_Send>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	f000 8176 	beq.w	8000cf4 <Can_Task+0x508>
	   	    		 Can_state.state += 2;
 8000a08:	4b31      	ldr	r3, [pc, #196]	; (8000ad0 <Can_Task+0x2e4>)
 8000a0a:	7a1b      	ldrb	r3, [r3, #8]
 8000a0c:	3302      	adds	r3, #2
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	4b2f      	ldr	r3, [pc, #188]	; (8000ad0 <Can_Task+0x2e4>)
 8000a12:	721a      	strb	r2, [r3, #8]
	   	    	 break;
 8000a14:	e16e      	b.n	8000cf4 <Can_Task+0x508>



	     case  	Get_Microphone_ADC:
	   //   if(CAN_UDS_Diagnostic_Req_Send(&message, OBD2_CMD_READ , P99_group , Get_Microphone_ADC,  3))    //0x6
	     	    	 	Can_state.state +=1;
 8000a16:	4b2e      	ldr	r3, [pc, #184]	; (8000ad0 <Can_Task+0x2e4>)
 8000a18:	7a1b      	ldrb	r3, [r3, #8]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	4b2c      	ldr	r3, [pc, #176]	; (8000ad0 <Can_Task+0x2e4>)
 8000a20:	721a      	strb	r2, [r3, #8]
	     	    		   	    	 break;
 8000a22:	e16a      	b.n	8000cfa <Can_Task+0x50e>

	     case  	Get_KL30_ADC:

	   	   	Can_state.state +=1;
 8000a24:	4b2a      	ldr	r3, [pc, #168]	; (8000ad0 <Can_Task+0x2e4>)
 8000a26:	7a1b      	ldrb	r3, [r3, #8]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	4b28      	ldr	r3, [pc, #160]	; (8000ad0 <Can_Task+0x2e4>)
 8000a2e:	721a      	strb	r2, [r3, #8]
	   	 	 break;
 8000a30:	e163      	b.n	8000cfa <Can_Task+0x50e>
	     case  	Get_BATTERY_ADC :
	     	   //	    if(CAN_UDS_Diagnostic_Req_Send(&message, OBD2_CMD_READ , P99_group , Get_BATTERY_ADC,  3))  // 0x8
	     	 Can_state.state +=1;
 8000a32:	4b27      	ldr	r3, [pc, #156]	; (8000ad0 <Can_Task+0x2e4>)
 8000a34:	7a1b      	ldrb	r3, [r3, #8]
 8000a36:	3301      	adds	r3, #1
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	4b25      	ldr	r3, [pc, #148]	; (8000ad0 <Can_Task+0x2e4>)
 8000a3c:	721a      	strb	r2, [r3, #8]

	     	   	   break;
 8000a3e:	e15c      	b.n	8000cfa <Can_Task+0x50e>


	     case  	Get_Set_digital_IO_state :


	    	 Config.error_state = Can_state.err;
 8000a40:	4b23      	ldr	r3, [pc, #140]	; (8000ad0 <Can_Task+0x2e4>)
 8000a42:	69db      	ldr	r3, [r3, #28]
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	4b25      	ldr	r3, [pc, #148]	; (8000adc <Can_Task+0x2f0>)
 8000a48:	849a      	strh	r2, [r3, #36]	; 0x24

	    	 Can_state.state +=1;
 8000a4a:	4b21      	ldr	r3, [pc, #132]	; (8000ad0 <Can_Task+0x2e4>)
 8000a4c:	7a1b      	ldrb	r3, [r3, #8]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	b2da      	uxtb	r2, r3
 8000a52:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <Can_Task+0x2e4>)
 8000a54:	721a      	strb	r2, [r3, #8]
	    	    	     break;
 8000a56:	e150      	b.n	8000cfa <Can_Task+0x50e>

	     case  	Get_GSM_IMEI :

	   	    	 if(CAN_UDS_Diagnostic_Req_Send(&message, OBD2_CMD_READ , GSM04_group , 0x11,  3)){  // multi
 8000a58:	2303      	movs	r3, #3
 8000a5a:	9300      	str	r3, [sp, #0]
 8000a5c:	2311      	movs	r3, #17
 8000a5e:	2204      	movs	r2, #4
 8000a60:	2122      	movs	r1, #34	; 0x22
 8000a62:	4823      	ldr	r0, [pc, #140]	; (8000af0 <Can_Task+0x304>)
 8000a64:	f000 f9b4 	bl	8000dd0 <CAN_UDS_Diagnostic_Req_Send>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f000 8144 	beq.w	8000cf8 <Can_Task+0x50c>
	   	    	   	Can_state.state +=1;
 8000a70:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <Can_Task+0x2e4>)
 8000a72:	7a1b      	ldrb	r3, [r3, #8]
 8000a74:	3301      	adds	r3, #1
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <Can_Task+0x2e4>)
 8000a7a:	721a      	strb	r2, [r3, #8]
	   	    	 }
	   	    	    	    break;
 8000a7c:	e13c      	b.n	8000cf8 <Can_Task+0x50c>

	        case Get_serial_number:

            AVT_cmd_Send(AVT_HW_Cmd);
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f001 f9b2 	bl	8001de8 <AVT_cmd_Send>

	    	  Can_state.state += 1;
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <Can_Task+0x2e4>)
 8000a86:	7a1b      	ldrb	r3, [r3, #8]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <Can_Task+0x2e4>)
 8000a8e:	721a      	strb	r2, [r3, #8]

	    				break;
 8000a90:	e133      	b.n	8000cfa <Can_Task+0x50e>

	      case Get_Microphone_Record:


	          	  Can_state.state +=1;
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <Can_Task+0x2e4>)
 8000a94:	7a1b      	ldrb	r3, [r3, #8]
 8000a96:	3301      	adds	r3, #1
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <Can_Task+0x2e4>)
 8000a9c:	721a      	strb	r2, [r3, #8]
	   	    	   break;
 8000a9e:	e12c      	b.n	8000cfa <Can_Task+0x50e>



			case Get_searching_networks:

				memset(&Can_state.txbuf[0], 0, sizeof(Can_state.txbuf));
 8000aa0:	2264      	movs	r2, #100	; 0x64
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	480c      	ldr	r0, [pc, #48]	; (8000ad8 <Can_Task+0x2ec>)
 8000aa6:	f00a facf 	bl	800b048 <memset>
				GSM_GPS_Get_Networks(TIMEOUT_40s, Check_number_networks);
 8000aaa:	2110      	movs	r1, #16
 8000aac:	f649 4040 	movw	r0, #40000	; 0x9c40
 8000ab0:	f001 f94c 	bl	8001d4c <GSM_GPS_Get_Networks>

				AVT_cmd_Send(AVT_GSM_Cmd);
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f001 f997 	bl	8001de8 <AVT_cmd_Send>

				Can_state.state += 1;
 8000aba:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <Can_Task+0x2e4>)
 8000abc:	7a1b      	ldrb	r3, [r3, #8]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <Can_Task+0x2e4>)
 8000ac4:	721a      	strb	r2, [r3, #8]

				break;
 8000ac6:	e118      	b.n	8000cfa <Can_Task+0x50e>
 8000ac8:	20006384 	.word	0x20006384
 8000acc:	20006c18 	.word	0x20006c18
 8000ad0:	20006284 	.word	0x20006284
 8000ad4:	200062a9 	.word	0x200062a9
 8000ad8:	200062b9 	.word	0x200062b9
 8000adc:	20006d98 	.word	0x20006d98
 8000ae0:	20006510 	.word	0x20006510
 8000ae4:	20005da4 	.word	0x20005da4
 8000ae8:	20006c7c 	.word	0x20006c7c
 8000aec:	20000014 	.word	0x20000014
 8000af0:	2000633c 	.word	0x2000633c

			case Get_activate_block:

				timer_network_scan = xTaskGetTickCount();
 8000af4:	f007 fffe 	bl	8008af4 <xTaskGetTickCount>
 8000af8:	6178      	str	r0, [r7, #20]
				do {

					vTaskDelay(500);
 8000afa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000afe:	f007 fea9 	bl	8008854 <vTaskDelay>

					if (!CAN_UDS_Diagnostic_Req_Send(&message, OBD2_CMD_READ,
 8000b02:	2303      	movs	r3, #3
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	2313      	movs	r3, #19
 8000b08:	2299      	movs	r2, #153	; 0x99
 8000b0a:	2122      	movs	r1, #34	; 0x22
 8000b0c:	487d      	ldr	r0, [pc, #500]	; (8000d04 <Can_Task+0x518>)
 8000b0e:	f000 f95f 	bl	8000dd0 <CAN_UDS_Diagnostic_Req_Send>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d109      	bne.n	8000b2c <Can_Task+0x340>
							P99_group, Get_VBAT, 3)) {
						Config.VBat = 0;
 8000b18:	4b7b      	ldr	r3, [pc, #492]	; (8000d08 <Can_Task+0x51c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	851a      	strh	r2, [r3, #40]	; 0x28
						Can_state.state += 1;
 8000b1e:	4b7b      	ldr	r3, [pc, #492]	; (8000d0c <Can_Task+0x520>)
 8000b20:	7a1b      	ldrb	r3, [r3, #8]
 8000b22:	3301      	adds	r3, #1
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	4b79      	ldr	r3, [pc, #484]	; (8000d0c <Can_Task+0x520>)
 8000b28:	721a      	strb	r2, [r3, #8]
 8000b2a:	e009      	b.n	8000b40 <Can_Task+0x354>
					} else {
						Config.VBat |= (0x1 << 15);
 8000b2c:	4b76      	ldr	r3, [pc, #472]	; (8000d08 <Can_Task+0x51c>)
 8000b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000b34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	4b73      	ldr	r3, [pc, #460]	; (8000d08 <Can_Task+0x51c>)
 8000b3c:	851a      	strh	r2, [r3, #40]	; 0x28
						break;
 8000b3e:	e007      	b.n	8000b50 <Can_Task+0x364>
					}
				} while ((xTaskGetTickCount() - timer_network_scan) < 2000);
 8000b40:	f007 ffd8 	bl	8008af4 <xTaskGetTickCount>
 8000b44:	4602      	mov	r2, r0
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000b4e:	d3d4      	bcc.n	8000afa <Can_Task+0x30e>
				Can_state.state += 1;
 8000b50:	4b6e      	ldr	r3, [pc, #440]	; (8000d0c <Can_Task+0x520>)
 8000b52:	7a1b      	ldrb	r3, [r3, #8]
 8000b54:	3301      	adds	r3, #1
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	4b6c      	ldr	r3, [pc, #432]	; (8000d0c <Can_Task+0x520>)
 8000b5a:	721a      	strb	r2, [r3, #8]

				break;
 8000b5c:	e0cd      	b.n	8000cfa <Can_Task+0x50e>

			case Get_GNSS_fix:

				GSM_GPS_Get_Networks(TIMEOUT_30s, Check_GNSS_fix);
 8000b5e:	2111      	movs	r1, #17
 8000b60:	f247 5030 	movw	r0, #30000	; 0x7530
 8000b64:	f001 f8f2 	bl	8001d4c <GSM_GPS_Get_Networks>
				Can_state.state += 1;
 8000b68:	4b68      	ldr	r3, [pc, #416]	; (8000d0c <Can_Task+0x520>)
 8000b6a:	7a1b      	ldrb	r3, [r3, #8]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	4b66      	ldr	r3, [pc, #408]	; (8000d0c <Can_Task+0x520>)
 8000b72:	721a      	strb	r2, [r3, #8]
				break;
 8000b74:	e0c1      	b.n	8000cfa <Can_Task+0x50e>

			case Get_Sat:

				if (Config.GNSS_fix == 0) {
 8000b76:	4b64      	ldr	r3, [pc, #400]	; (8000d08 <Can_Task+0x51c>)
 8000b78:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d104      	bne.n	8000b8a <Can_Task+0x39e>
					GSM_GPS_Get_Networks(TIMEOUT_30s, Check_GNSS_fix);
 8000b80:	2111      	movs	r1, #17
 8000b82:	f247 5030 	movw	r0, #30000	; 0x7530
 8000b86:	f001 f8e1 	bl	8001d4c <GSM_GPS_Get_Networks>
				}

				if (CAN_UDS_Diagnostic_Req_Send(&message, OBD2_CMD_READ,
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	2312      	movs	r3, #18
 8000b90:	2299      	movs	r2, #153	; 0x99
 8000b92:	2122      	movs	r1, #34	; 0x22
 8000b94:	485b      	ldr	r0, [pc, #364]	; (8000d04 <Can_Task+0x518>)
 8000b96:	f000 f91b 	bl	8000dd0 <CAN_UDS_Diagnostic_Req_Send>
						P99_group, Check_Satellites, 3));



				AVT_cmd_Send(AVT_GPS_Cmd);
 8000b9a:	2002      	movs	r0, #2
 8000b9c:	f001 f924 	bl	8001de8 <AVT_cmd_Send>

				vTaskDelay(200);
 8000ba0:	20c8      	movs	r0, #200	; 0xc8
 8000ba2:	f007 fe57 	bl	8008854 <vTaskDelay>

				Can_state.state += 1;
 8000ba6:	4b59      	ldr	r3, [pc, #356]	; (8000d0c <Can_Task+0x520>)
 8000ba8:	7a1b      	ldrb	r3, [r3, #8]
 8000baa:	3301      	adds	r3, #1
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4b57      	ldr	r3, [pc, #348]	; (8000d0c <Can_Task+0x520>)
 8000bb0:	721a      	strb	r2, [r3, #8]
				//}

				break;
 8000bb2:	e0a2      	b.n	8000cfa <Can_Task+0x50e>

			case Play_Microphone_Record:

				//   {

				res = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	73fb      	strb	r3, [r7, #15]
				Can_state.num = 0;
 8000bb8:	4b54      	ldr	r3, [pc, #336]	; (8000d0c <Can_Task+0x520>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	621a      	str	r2, [r3, #32]

				Can_state.time = 6;
 8000bbe:	4b53      	ldr	r3, [pc, #332]	; (8000d0c <Can_Task+0x520>)
 8000bc0:	2206      	movs	r2, #6
 8000bc2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
				//	fft_pResult.mute_adc =   	InOutADC_Data( &hadc2, 2);  //!!!!!mute
				audio_routine_scan = xTaskGetTickCount();
 8000bc6:	f007 ff95 	bl	8008af4 <xTaskGetTickCount>
 8000bca:	6138      	str	r0, [r7, #16]
				do {

					res = Test_Audio_Rec(Can_state.time);
 8000bcc:	4b4f      	ldr	r3, [pc, #316]	; (8000d0c <Can_Task+0x520>)
 8000bce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 ffb7 	bl	8001b48 <Test_Audio_Rec>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	73fb      	strb	r3, [r7, #15]

					if (res == true)
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d115      	bne.n	8000c10 <Can_Task+0x424>
						break;
					vTaskDelay(TIMEOUT_1s);
 8000be4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000be8:	f007 fe34 	bl	8008854 <vTaskDelay>
					if (Check_AVT04_Test() == false)
 8000bec:	f001 f80e 	bl	8001c0c <Check_AVT04_Test>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	f083 0301 	eor.w	r3, r3, #1
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d10b      	bne.n	8000c14 <Can_Task+0x428>
						break;
				} while ((xTaskGetTickCount() - audio_routine_scan)
 8000bfc:	f007 ff7a 	bl	8008af4 <xTaskGetTickCount>
 8000c00:	4602      	mov	r2, r0
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	1ad3      	subs	r3, r2, r3
						< TIMEOUT_30s);
 8000c06:	f247 522f 	movw	r2, #29999	; 0x752f
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d9de      	bls.n	8000bcc <Can_Task+0x3e0>
 8000c0e:	e002      	b.n	8000c16 <Can_Task+0x42a>
						break;
 8000c10:	bf00      	nop
 8000c12:	e000      	b.n	8000c16 <Can_Task+0x42a>
						break;
 8000c14:	bf00      	nop

				// Can_state.num += 100;

				ConsoleWrite(&cmd_play_audio[0], sizeof(cmd_play_audio));
 8000c16:	2110      	movs	r1, #16
 8000c18:	483d      	ldr	r0, [pc, #244]	; (8000d10 <Can_Task+0x524>)
 8000c1a:	f000 f883 	bl	8000d24 <ConsoleWrite>

				vTaskDelay(TIMEOUT_1s);
 8000c1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c22:	f007 fe17 	bl	8008854 <vTaskDelay>
				audio_routine_scan = xTaskGetTickCount();
 8000c26:	f007 ff65 	bl	8008af4 <xTaskGetTickCount>
 8000c2a:	6138      	str	r0, [r7, #16]

				do {
					res = Test_Audio_Play(Can_state.time);
 8000c2c:	4b37      	ldr	r3, [pc, #220]	; (8000d0c <Can_Task+0x520>)
 8000c2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 ffc1 	bl	8001bbc <Test_Audio_Play>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	73fb      	strb	r3, [r7, #15]

					if (res == true) {
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d10d      	bne.n	8000c60 <Can_Task+0x474>
						//vTaskDelay(TIMEOUT_1s * Can_state.time);
						break;
					}

					vTaskDelay(TIMEOUT_1s);
 8000c44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c48:	f007 fe04 	bl	8008854 <vTaskDelay>
				} while ((xTaskGetTickCount() - audio_routine_scan)
 8000c4c:	f007 ff52 	bl	8008af4 <xTaskGetTickCount>
 8000c50:	4602      	mov	r2, r0
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	1ad3      	subs	r3, r2, r3
						< TIMEOUT_30s);
 8000c56:	f247 522f 	movw	r2, #29999	; 0x752f
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d9e6      	bls.n	8000c2c <Can_Task+0x440>
 8000c5e:	e000      	b.n	8000c62 <Can_Task+0x476>
						break;
 8000c60:	bf00      	nop
				MX_ADC3_Init(ADC_CHANNEL_15);
 8000c62:	200f      	movs	r0, #15
 8000c64:	f001 ffae 	bl	8002bc4 <MX_ADC3_Init>
				// adc current
				if (fft_pResult.mute_type_ok) {
 8000c68:	4b2a      	ldr	r3, [pc, #168]	; (8000d14 <Can_Task+0x528>)
 8000c6a:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d007      	beq.n	8000c82 <Can_Task+0x496>
					fft_pResult.mute_adc_on = InOutADC_Data(&hadc2, 2);
 8000c72:	2102      	movs	r1, #2
 8000c74:	4828      	ldr	r0, [pc, #160]	; (8000d18 <Can_Task+0x52c>)
 8000c76:	f001 fb87 	bl	8002388 <InOutADC_Data>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	4a25      	ldr	r2, [pc, #148]	; (8000d14 <Can_Task+0x528>)
 8000c7e:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434
				}
				HAL_GPIO_WritePin(MIC_ON_Port, MIC_ON, GPIO_PIN_SET);
 8000c82:	2201      	movs	r2, #1
 8000c84:	2140      	movs	r1, #64	; 0x40
 8000c86:	4825      	ldr	r0, [pc, #148]	; (8000d1c <Can_Task+0x530>)
 8000c88:	f004 fbb4 	bl	80053f4 <HAL_GPIO_WritePin>


				AVT_cmd_Send(AVT_Audio_Cmd);
 8000c8c:	2003      	movs	r0, #3
 8000c8e:	f001 f8ab 	bl	8001de8 <AVT_cmd_Send>

				//    }
				Can_state.state += 1;
 8000c92:	4b1e      	ldr	r3, [pc, #120]	; (8000d0c <Can_Task+0x520>)
 8000c94:	7a1b      	ldrb	r3, [r3, #8]
 8000c96:	3301      	adds	r3, #1
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <Can_Task+0x520>)
 8000c9c:	721a      	strb	r2, [r3, #8]

				break;
 8000c9e:	e02c      	b.n	8000cfa <Can_Task+0x50e>

			case Kl30_off:

				if (CAN_UDS_Diagnostic_Req_Send(&message, OBD2_CMD_RESET, 0x62,
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	9300      	str	r3, [sp, #0]
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	2262      	movs	r2, #98	; 0x62
 8000ca8:	2111      	movs	r1, #17
 8000caa:	4816      	ldr	r0, [pc, #88]	; (8000d04 <Can_Task+0x518>)
 8000cac:	f000 f890 	bl	8000dd0 <CAN_UDS_Diagnostic_Req_Send>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d003      	beq.n	8000cbe <Can_Task+0x4d2>
						0x0, 2)) {
					vTaskDelay(1000);
 8000cb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cba:	f007 fdcb 	bl	8008854 <vTaskDelay>
				}
				Can_state.disable_test_mode = 1;
 8000cbe:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <Can_Task+0x520>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

				Can_state.start_test_cmd22 = 0;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <Can_Task+0x520>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	70da      	strb	r2, [r3, #3]

				ConsoleWrite(&cmd_work_start[0], sizeof(cmd_work_start));
 8000ccc:	2116      	movs	r1, #22
 8000cce:	4814      	ldr	r0, [pc, #80]	; (8000d20 <Can_Task+0x534>)
 8000cd0:	f000 f828 	bl	8000d24 <ConsoleWrite>
				Can_state.state = 0;
 8000cd4:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <Can_Task+0x520>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	721a      	strb	r2, [r3, #8]

				Init_Pins();
 8000cda:	f002 f913 	bl	8002f04 <Init_Pins>

				break;
 8000cde:	e00c      	b.n	8000cfa <Can_Task+0x50e>
			}

		}
 8000ce0:	bf00      	nop
 8000ce2:	e00a      	b.n	8000cfa <Can_Task+0x50e>
			     break;
 8000ce4:	bf00      	nop
 8000ce6:	e008      	b.n	8000cfa <Can_Task+0x50e>
	     break;
 8000ce8:	bf00      	nop
 8000cea:	e006      	b.n	8000cfa <Can_Task+0x50e>
		break;
 8000cec:	bf00      	nop
 8000cee:	e004      	b.n	8000cfa <Can_Task+0x50e>
	    	 break;
 8000cf0:	bf00      	nop
 8000cf2:	e002      	b.n	8000cfa <Can_Task+0x50e>
	   	    	 break;
 8000cf4:	bf00      	nop
 8000cf6:	e000      	b.n	8000cfa <Can_Task+0x50e>
	   	    	    	    break;
 8000cf8:	bf00      	nop
		//  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
		vTaskDelay(100);
 8000cfa:	2064      	movs	r0, #100	; 0x64
 8000cfc:	f007 fdaa 	bl	8008854 <vTaskDelay>
		Power_Monitor();
 8000d00:	e5a3      	b.n	800084a <Can_Task+0x5e>
 8000d02:	bf00      	nop
 8000d04:	2000633c 	.word	0x2000633c
 8000d08:	20006d98 	.word	0x20006d98
 8000d0c:	20006284 	.word	0x20006284
 8000d10:	20000004 	.word	0x20000004
 8000d14:	20005da4 	.word	0x20005da4
 8000d18:	20006c7c 	.word	0x20006c7c
 8000d1c:	40020000 	.word	0x40020000
 8000d20:	20000024 	.word	0x20000024

08000d24 <ConsoleWrite>:
	}

}

bool ConsoleWrite(uint8_t *pcString, int len) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]

	xSemaphoreTake(cons.gate, portMAX_DELAY);
 8000d2e:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <ConsoleWrite+0x58>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f04f 31ff 	mov.w	r1, #4294967295
 8000d36:	4618      	mov	r0, r3
 8000d38:	f007 f942 	bl	8007fc0 <xQueueSemaphoreTake>
	if (HAL_UART_Transmit(&huart3, pcString, len, 300) == HAL_OK) {
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000d44:	6879      	ldr	r1, [r7, #4]
 8000d46:	480e      	ldr	r0, [pc, #56]	; (8000d80 <ConsoleWrite+0x5c>)
 8000d48:	f005 fb1d 	bl	8006386 <HAL_UART_Transmit>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d108      	bne.n	8000d64 <ConsoleWrite+0x40>
		xSemaphoreGive(cons.gate);
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <ConsoleWrite+0x58>)
 8000d54:	6818      	ldr	r0, [r3, #0]
 8000d56:	2300      	movs	r3, #0
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	f006 feb6 	bl	8007acc <xQueueGenericSend>
		return true;
 8000d60:	2301      	movs	r3, #1
 8000d62:	e007      	b.n	8000d74 <ConsoleWrite+0x50>

	} else {
		xSemaphoreGive(cons.gate);
 8000d64:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <ConsoleWrite+0x58>)
 8000d66:	6818      	ldr	r0, [r3, #0]
 8000d68:	2300      	movs	r3, #0
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	f006 fead 	bl	8007acc <xQueueGenericSend>
		return false;
 8000d72:	2300      	movs	r3, #0

	}
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20006510 	.word	0x20006510
 8000d80:	2000652c 	.word	0x2000652c

08000d84 <IVI_Send_Frame>:




status_t IVI_Send_Frame(	can_message_t *message)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	status_t status;

	      while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0);
 8000d8c:	bf00      	nop
 8000d8e:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <IVI_Send_Frame+0x40>)
 8000d90:	f003 fd3d 	bl	800480e <HAL_CAN_GetTxMailboxesFreeLevel>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d0f9      	beq.n	8000d8e <IVI_Send_Frame+0xa>
	 			           if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, &message->data[0], &TxMailbox) != HAL_OK)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f103 0208 	add.w	r2, r3, #8
 8000da0:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <IVI_Send_Frame+0x44>)
 8000da2:	490a      	ldr	r1, [pc, #40]	; (8000dcc <IVI_Send_Frame+0x48>)
 8000da4:	4807      	ldr	r0, [pc, #28]	; (8000dc4 <IVI_Send_Frame+0x40>)
 8000da6:	f003 fc57 	bl	8004658 <HAL_CAN_AddTxMessage>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <IVI_Send_Frame+0x30>
		 			           {
		 			             status = HCan_ERR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	73fb      	strb	r3, [r7, #15]

		 			           }
      status =  HCan_OK;
 8000db4:	2300      	movs	r3, #0
 8000db6:	73fb      	strb	r3, [r7, #15]

	return status;
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20006c18 	.word	0x20006c18
 8000dc8:	2000137c 	.word	0x2000137c
 8000dcc:	20006420 	.word	0x20006420

08000dd0 <CAN_UDS_Diagnostic_Req_Send>:
	// USER CODE END 5
uint32_t CAN_UDS_Diagnostic_Req_Send(IsoTpMessage *message,
										uint32_t arbitration_id, uint8_t subindex, uint32_t cmd , uint8_t size )
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08e      	sub	sp, #56	; 0x38
 8000dd4:	af02      	add	r7, sp, #8
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	71fb      	strb	r3, [r7, #7]

     uint32_t res = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
		//uint8_t offset;
		  can_message_t handle = {
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
					            .cs =  RxHeader.ExtId,//0U,
					            .id =  RxHeader.StdId,//778,
 8000df4:	4b8b      	ldr	r3, [pc, #556]	; (8001024 <CAN_UDS_Diagnostic_Req_Send+0x254>)
 8000df6:	681b      	ldr	r3, [r3, #0]
		  can_message_t handle = {
 8000df8:	61bb      	str	r3, [r7, #24]
					            .length = RxHeader.DLC,
 8000dfa:	4b8a      	ldr	r3, [pc, #552]	; (8001024 <CAN_UDS_Diagnostic_Req_Send+0x254>)
 8000dfc:	691b      	ldr	r3, [r3, #16]
		  can_message_t handle = {
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					            .cs =  RxHeader.ExtId,//0U,
 8000e04:	4b87      	ldr	r3, [pc, #540]	; (8001024 <CAN_UDS_Diagnostic_Req_Send+0x254>)
 8000e06:	685b      	ldr	r3, [r3, #4]
		  can_message_t handle = {
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		                               };

			    	 message->size = size;
 8000e0e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
                     if(size > 7)
 8000e1a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000e1e:	2b07      	cmp	r3, #7
 8000e20:	d904      	bls.n	8000e2c <CAN_UDS_Diagnostic_Req_Send+0x5c>
			 	          message->multi_frame = true;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	2201      	movs	r2, #1
 8000e26:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8000e2a:	e003      	b.n	8000e34 <CAN_UDS_Diagnostic_Req_Send+0x64>
                     else

                    	  message->multi_frame = false;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
		//	 offset = CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group( &mes[0], &response,  cmd  );

			 			if (message->multi_frame == false) {
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8000e3a:	f083 0301 	eor.w	r3, r3, #1
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	f000 8089 	beq.w	8000f58 <CAN_UDS_Diagnostic_Req_Send+0x188>

			 				memset(message->payload, 0, CAN_MESSAGE_BYTE_SIZE);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	2208      	movs	r2, #8
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f00a f8fa 	bl	800b048 <memset>
			 				message->payload[0] = ((PCI_SINGLE) | (size ));
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000e5a:	711a      	strb	r2, [r3, #4]
			 				message->payload[1] = arbitration_id ;
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	715a      	strb	r2, [r3, #5]
			 				request.arbitration_id = message->payload[1];
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	795b      	ldrb	r3, [r3, #5]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b6f      	ldr	r3, [pc, #444]	; (8001028 <CAN_UDS_Diagnostic_Req_Send+0x258>)
 8000e6c:	601a      	str	r2, [r3, #0]
			 				message->payload[2] = subindex; /////
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	79fa      	ldrb	r2, [r7, #7]
 8000e72:	719a      	strb	r2, [r3, #6]
			 				request.subindex = message->payload[2];
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	799a      	ldrb	r2, [r3, #6]
 8000e78:	4b6b      	ldr	r3, [pc, #428]	; (8001028 <CAN_UDS_Diagnostic_Req_Send+0x258>)
 8000e7a:	711a      	strb	r2, [r3, #4]
			 				message->payload[3] = cmd; //positive response;
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	71da      	strb	r2, [r3, #7]


			 			    request.succes = true;
 8000e84:	4b68      	ldr	r3, [pc, #416]	; (8001028 <CAN_UDS_Diagnostic_Req_Send+0x258>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			 				request.completed = true;
 8000e8c:	4b66      	ldr	r3, [pc, #408]	; (8001028 <CAN_UDS_Diagnostic_Req_Send+0x258>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			 				memset(&message->payload[size + 1], Padding_byte, (7 - size) );
 8000e94:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000e98:	3301      	adds	r3, #1
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	1d18      	adds	r0, r3, #4
 8000ea0:	4b62      	ldr	r3, [pc, #392]	; (800102c <CAN_UDS_Diagnostic_Req_Send+0x25c>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000eaa:	f1c3 0307 	rsb	r3, r3, #7
 8000eae:	461a      	mov	r2, r3
 8000eb0:	f00a f8ca 	bl	800b048 <memset>
			 				//memset(&message->payload[4],   (8 - message->size), 0xAA );
                              if((arbitration_id == OBD2_CMD_SEC) && ( subindex == GSM04_group) ){
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	2b27      	cmp	r3, #39	; 0x27
 8000eb8:	d105      	bne.n	8000ec6 <CAN_UDS_Diagnostic_Req_Send+0xf6>
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	2b04      	cmp	r3, #4
 8000ebe:	d102      	bne.n	8000ec6 <CAN_UDS_Diagnostic_Req_Send+0xf6>
                            	            message->payload[4] = 0x11;}
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2211      	movs	r2, #17
 8000ec4:	721a      	strb	r2, [r3, #8]

                              //// Test Mode ON
                              if((arbitration_id == OBD2_CMD_WRITE)
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	2b2e      	cmp	r3, #46	; 0x2e
 8000eca:	d10b      	bne.n	8000ee4 <CAN_UDS_Diagnostic_Req_Send+0x114>
                            		  && ( subindex == P99_group)
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	2b99      	cmp	r3, #153	; 0x99
 8000ed0:	d108      	bne.n	8000ee4 <CAN_UDS_Diagnostic_Req_Send+0x114>
                            		  && ( cmd == 0x0B))
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	2b0b      	cmp	r3, #11
 8000ed6:	d105      	bne.n	8000ee4 <CAN_UDS_Diagnostic_Req_Send+0x114>
									  {

                              message->payload[4] = Can_state.disable_test_mode;
 8000ed8:	4b55      	ldr	r3, [pc, #340]	; (8001030 <CAN_UDS_Diagnostic_Req_Send+0x260>)
 8000eda:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8000ede:	461a      	mov	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	721a      	strb	r2, [r3, #8]

									  }
                             if((arbitration_id == OBD2_CMD_WRITE)
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	2b2e      	cmp	r3, #46	; 0x2e
 8000ee8:	d109      	bne.n	8000efe <CAN_UDS_Diagnostic_Req_Send+0x12e>
                                        && ( subindex == P99_group)
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	2b99      	cmp	r3, #153	; 0x99
 8000eee:	d106      	bne.n	8000efe <CAN_UDS_Diagnostic_Req_Send+0x12e>
                                        && ( cmd == Get_Set_digital_IO_state)){
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	2b09      	cmp	r3, #9
 8000ef4:	d103      	bne.n	8000efe <CAN_UDS_Diagnostic_Req_Send+0x12e>

                                         message->payload[4] = digital_IO_state.Byte_status_IO;
 8000ef6:	4b4f      	ldr	r3, [pc, #316]	; (8001034 <CAN_UDS_Diagnostic_Req_Send+0x264>)
 8000ef8:	7a1a      	ldrb	r2, [r3, #8]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	721a      	strb	r2, [r3, #8]
                                                                   }

                              if((arbitration_id == OBD2_CMD_ROUTINE)
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	2b31      	cmp	r3, #49	; 0x31
 8000f02:	d10f      	bne.n	8000f24 <CAN_UDS_Diagnostic_Req_Send+0x154>
                            		  &&  (Can_state.state == Get_Microphone_Record)){
 8000f04:	4b4a      	ldr	r3, [pc, #296]	; (8001030 <CAN_UDS_Diagnostic_Req_Send+0x260>)
 8000f06:	7a1b      	ldrb	r3, [r3, #8]
 8000f08:	2b0c      	cmp	r3, #12
 8000f0a:	d10b      	bne.n	8000f24 <CAN_UDS_Diagnostic_Req_Send+0x154>
                                       message->payload[4] = 0x04;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2204      	movs	r2, #4
 8000f10:	721a      	strb	r2, [r3, #8]
                                       message->payload[5] = 0x04;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	2204      	movs	r2, #4
 8000f16:	725a      	strb	r2, [r3, #9]
                                       message->payload[6] = Can_state.time;
 8000f18:	4b45      	ldr	r3, [pc, #276]	; (8001030 <CAN_UDS_Diagnostic_Req_Send+0x260>)
 8000f1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	729a      	strb	r2, [r3, #10]
                              }
                              if((arbitration_id == OBD2_CMD_ROUTINE)
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	2b31      	cmp	r3, #49	; 0x31
 8000f28:	d109      	bne.n	8000f3e <CAN_UDS_Diagnostic_Req_Send+0x16e>
                                  &&  (Can_state.state == Play_Microphone_Record)){
 8000f2a:	4b41      	ldr	r3, [pc, #260]	; (8001030 <CAN_UDS_Diagnostic_Req_Send+0x260>)
 8000f2c:	7a1b      	ldrb	r3, [r3, #8]
 8000f2e:	2b11      	cmp	r3, #17
 8000f30:	d105      	bne.n	8000f3e <CAN_UDS_Diagnostic_Req_Send+0x16e>
                                               message->payload[4] = 0x04;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2204      	movs	r2, #4
 8000f36:	721a      	strb	r2, [r3, #8]
                                               message->payload[5] = 0x05;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2205      	movs	r2, #5
 8000f3c:	725a      	strb	r2, [r3, #9]

                                                            }
                              if((arbitration_id == OBD2_CMD_ROUTINE)
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	2b31      	cmp	r3, #49	; 0x31
 8000f42:	d109      	bne.n	8000f58 <CAN_UDS_Diagnostic_Req_Send+0x188>
                            		  &&  (Can_state.state == Start_Test)){
 8000f44:	4b3a      	ldr	r3, [pc, #232]	; (8001030 <CAN_UDS_Diagnostic_Req_Send+0x260>)
 8000f46:	7a1b      	ldrb	r3, [r3, #8]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d105      	bne.n	8000f58 <CAN_UDS_Diagnostic_Req_Send+0x188>
                                      message->payload[4] = 0x03;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2203      	movs	r2, #3
 8000f50:	721a      	strb	r2, [r3, #8]
                                      message->payload[5] = 0x04;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2204      	movs	r2, #4
 8000f56:	725a      	strb	r2, [r3, #9]
                              }

			 		      	}

		                    while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0);
 8000f58:	bf00      	nop
 8000f5a:	4837      	ldr	r0, [pc, #220]	; (8001038 <CAN_UDS_Diagnostic_Req_Send+0x268>)
 8000f5c:	f003 fc57 	bl	800480e <HAL_CAN_GetTxMailboxesFreeLevel>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d0f9      	beq.n	8000f5a <CAN_UDS_Diagnostic_Req_Send+0x18a>
			                if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, &message->payload[0], &TxMailbox) != HAL_OK)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	1d1a      	adds	r2, r3, #4
 8000f6a:	4b34      	ldr	r3, [pc, #208]	; (800103c <CAN_UDS_Diagnostic_Req_Send+0x26c>)
 8000f6c:	4934      	ldr	r1, [pc, #208]	; (8001040 <CAN_UDS_Diagnostic_Req_Send+0x270>)
 8000f6e:	4832      	ldr	r0, [pc, #200]	; (8001038 <CAN_UDS_Diagnostic_Req_Send+0x268>)
 8000f70:	f003 fb72 	bl	8004658 <HAL_CAN_AddTxMessage>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d002      	beq.n	8000f80 <CAN_UDS_Diagnostic_Req_Send+0x1b0>
			                {

			         	      HAL_Delay(50);
 8000f7a:	2032      	movs	r0, #50	; 0x32
 8000f7c:	f002 fd18 	bl	80039b0 <HAL_Delay>
			                }

			           response.completed  = false;
 8000f80:	4b30      	ldr	r3, [pc, #192]	; (8001044 <CAN_UDS_Diagnostic_Req_Send+0x274>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	709a      	strb	r2, [r3, #2]
			         //  while (response ->completed == false)
			           for(int resp = 0 ; resp < 50; resp++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f8a:	e042      	b.n	8001012 <CAN_UDS_Diagnostic_Req_Send+0x242>
			           {
			        	//  if(Check_AVT04_Test()== false)
			        	//	  return 0;
			        	   Power_Monitor();
 8000f8c:	f000 fe8a 	bl	8001ca4 <Power_Monitor>
			             if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, handle.data) == HAL_OK  )
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	3308      	adds	r3, #8
 8000f96:	4a23      	ldr	r2, [pc, #140]	; (8001024 <CAN_UDS_Diagnostic_Req_Send+0x254>)
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4827      	ldr	r0, [pc, #156]	; (8001038 <CAN_UDS_Diagnostic_Req_Send+0x268>)
 8000f9c:	f003 fc6c 	bl	8004878 <HAL_CAN_GetRxMessage>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d12c      	bne.n	8001000 <CAN_UDS_Diagnostic_Req_Send+0x230>
			           	              {
			        	         if(CAN_UDS_Request_Parse (  message,   &handle ,  &request,
 8000fa6:	f107 0114 	add.w	r1, r7, #20
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	4b25      	ldr	r3, [pc, #148]	; (8001044 <CAN_UDS_Diagnostic_Req_Send+0x274>)
 8000fb0:	4a1d      	ldr	r2, [pc, #116]	; (8001028 <CAN_UDS_Diagnostic_Req_Send+0x258>)
 8000fb2:	68f8      	ldr	r0, [r7, #12]
 8000fb4:	f002 f9ec 	bl	8003390 <CAN_UDS_Request_Parse>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d026      	beq.n	800100c <CAN_UDS_Diagnostic_Req_Send+0x23c>
			        	   				  		&response ,
			        	 						arbitration_id) )

			                     	   {
			        	         	  if( response.completed == true)
 8000fbe:	4b21      	ldr	r3, [pc, #132]	; (8001044 <CAN_UDS_Diagnostic_Req_Send+0x274>)
 8000fc0:	789b      	ldrb	r3, [r3, #2]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d022      	beq.n	800100c <CAN_UDS_Diagnostic_Req_Send+0x23c>
			        	          	    {
			        	         		 if(request.arbitration_id == OBD2_CMD_ROUTINE && handle.data[5] == 0xFF)
 8000fc6:	4b18      	ldr	r3, [pc, #96]	; (8001028 <CAN_UDS_Diagnostic_Req_Send+0x258>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2b31      	cmp	r3, #49	; 0x31
 8000fcc:	d10c      	bne.n	8000fe8 <CAN_UDS_Diagnostic_Req_Send+0x218>
 8000fce:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000fd2:	2bff      	cmp	r3, #255	; 0xff
 8000fd4:	d108      	bne.n	8000fe8 <CAN_UDS_Diagnostic_Req_Send+0x218>
			        	         		 	    {
			        	         		 	       response.completed = false;
 8000fd6:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <CAN_UDS_Diagnostic_Req_Send+0x274>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	709a      	strb	r2, [r3, #2]
			        	         		 	       response.success = false;
 8000fdc:	4b19      	ldr	r3, [pc, #100]	; (8001044 <CAN_UDS_Diagnostic_Req_Send+0x274>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	70da      	strb	r2, [r3, #3]
			        	         		 	       return  response.success ;
 8000fe2:	4b18      	ldr	r3, [pc, #96]	; (8001044 <CAN_UDS_Diagnostic_Req_Send+0x274>)
 8000fe4:	78db      	ldrb	r3, [r3, #3]
 8000fe6:	e018      	b.n	800101a <CAN_UDS_Diagnostic_Req_Send+0x24a>
			        	         		 	                                               }
			        	         		 CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group( message->payload, &response,subindex , cmd  );
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	1d18      	adds	r0, r3, #4
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	79fa      	ldrb	r2, [r7, #7]
 8000ff2:	4914      	ldr	r1, [pc, #80]	; (8001044 <CAN_UDS_Diagnostic_Req_Send+0x274>)
 8000ff4:	f002 f8c2 	bl	800317c <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group>

			        	         		 res = 1;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	62bb      	str	r3, [r7, #40]	; 0x28
			        	                return res;
 8000ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ffe:	e00c      	b.n	800101a <CAN_UDS_Diagnostic_Req_Send+0x24a>

			        	             } //if parse

			           	        }   //if rx
			                        else  {
			                        	vTaskDelay(100);
 8001000:	2064      	movs	r0, #100	; 0x64
 8001002:	f007 fc27 	bl	8008854 <vTaskDelay>
			         			          resp++;
 8001006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001008:	3301      	adds	r3, #1
 800100a:	62fb      	str	r3, [r7, #44]	; 0x2c
			           for(int resp = 0 ; resp < 50; resp++)
 800100c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800100e:	3301      	adds	r3, #1
 8001010:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001014:	2b31      	cmp	r3, #49	; 0x31
 8001016:	ddb9      	ble.n	8000f8c <CAN_UDS_Diagnostic_Req_Send+0x1bc>
			         			     //      if(Check_AVT04_Test()== false)
			         			       //  		 return 0;
			                        }
			           }  // for
  	return res;
 8001018:	6abb      	ldr	r3, [r7, #40]	; 0x28

   }
 800101a:	4618      	mov	r0, r3
 800101c:	3730      	adds	r7, #48	; 0x30
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20006438 	.word	0x20006438
 8001028:	20006384 	.word	0x20006384
 800102c:	20000000 	.word	0x20000000
 8001030:	20006284 	.word	0x20006284
 8001034:	200063d0 	.word	0x200063d0
 8001038:	20006c18 	.word	0x20006c18
 800103c:	2000137c 	.word	0x2000137c
 8001040:	20006420 	.word	0x20006420
 8001044:	200061e0 	.word	0x200061e0

08001048 <Get_SN>:

 bool Get_SN(can_state *cfg)
 {
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af02      	add	r7, sp, #8
 800104e:	6078      	str	r0, [r7, #4]
       uint32_t timer_network_scan;

	   char *str;
	   cfg-> Config = false;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	761a      	strb	r2, [r3, #24]

	   timer_network_scan = xTaskGetTickCount() ;
 8001056:	f007 fd4d 	bl	8008af4 <xTaskGetTickCount>
 800105a:	60f8      	str	r0, [r7, #12]
	  	do {
	   		 vTaskDelay(TIMEOUT_1s );
 800105c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001060:	f007 fbf8 	bl	8008854 <vTaskDelay>
          if (CAN_UDS_Diagnostic_Req_Send(&message, OBD2_CMD_READ, 0xF1, 0x8C, 3)) {
 8001064:	2303      	movs	r3, #3
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	238c      	movs	r3, #140	; 0x8c
 800106a:	22f1      	movs	r2, #241	; 0xf1
 800106c:	2122      	movs	r1, #34	; 0x22
 800106e:	4811      	ldr	r0, [pc, #68]	; (80010b4 <Get_SN+0x6c>)
 8001070:	f7ff feae 	bl	8000dd0 <CAN_UDS_Diagnostic_Req_Send>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d00d      	beq.n	8001096 <Get_SN+0x4e>

        	 str = strstr((char *) cfg-> SRN, "20");
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3325      	adds	r3, #37	; 0x25
 800107e:	490e      	ldr	r1, [pc, #56]	; (80010b8 <Get_SN+0x70>)
 8001080:	4618      	mov	r0, r3
 8001082:	f00a f853 	bl	800b12c <strstr>
 8001086:	60b8      	str	r0, [r7, #8]
			if (str) {
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <Get_SN+0x4a>

				return true;
 800108e:	2301      	movs	r3, #1
 8001090:	e00b      	b.n	80010aa <Get_SN+0x62>
			}

				else  return false;//cfg-> Config = false;*/
 8001092:	2300      	movs	r3, #0
 8001094:	e009      	b.n	80010aa <Get_SN+0x62>
                 }

          } while ((xTaskGetTickCount() - timer_network_scan) < 60000);
 8001096:	f007 fd2d 	bl	8008af4 <xTaskGetTickCount>
 800109a:	4602      	mov	r2, r0
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d9d9      	bls.n	800105c <Get_SN+0x14>

		return false; // cfg-> Config;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	2000633c 	.word	0x2000633c
 80010b8:	0800b22c 	.word	0x0800b22c

080010bc <Autorization_test>:

bool Autorization_test(bool cfg)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af02      	add	r7, sp, #8
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]



	Can_state.disable_test_mode = 0;
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <Autorization_test+0x60>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c


			  if(CAN_UDS_Diagnostic_Req_Send(&message,   OBD2_CMD_SEC  , 0x03 , 0x0,  2))
 80010ce:	2302      	movs	r3, #2
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2300      	movs	r3, #0
 80010d4:	2203      	movs	r2, #3
 80010d6:	2127      	movs	r1, #39	; 0x27
 80010d8:	4811      	ldr	r0, [pc, #68]	; (8001120 <Autorization_test+0x64>)
 80010da:	f7ff fe79 	bl	8000dd0 <CAN_UDS_Diagnostic_Req_Send>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d016      	beq.n	8001112 <Autorization_test+0x56>
			  {
				    if(CAN_UDS_Diagnostic_Req_Send(&message, OBD2_CMD_SEC , 0x04 , 0x9,  4)){
 80010e4:	2304      	movs	r3, #4
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	2309      	movs	r3, #9
 80010ea:	2204      	movs	r2, #4
 80010ec:	2127      	movs	r1, #39	; 0x27
 80010ee:	480c      	ldr	r0, [pc, #48]	; (8001120 <Autorization_test+0x64>)
 80010f0:	f7ff fe6e 	bl	8000dd0 <CAN_UDS_Diagnostic_Req_Send>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d009      	beq.n	800110e <Autorization_test+0x52>
			   	  // 	CAN_UDS_Diagnostic_Req_Send(&message, OBD2_CMD_WRITE , P99_group , 0x0B,  4);

				            CAN_UDS_Diagnostic_Req_Send(&message, OBD2_CMD_ROUTINE , 0x01 , 0x0,  5);
 80010fa:	2305      	movs	r3, #5
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2300      	movs	r3, #0
 8001100:	2201      	movs	r2, #1
 8001102:	2131      	movs	r1, #49	; 0x31
 8001104:	4806      	ldr	r0, [pc, #24]	; (8001120 <Autorization_test+0x64>)
 8001106:	f7ff fe63 	bl	8000dd0 <CAN_UDS_Diagnostic_Req_Send>
				            	return true;// 31  !!
 800110a:	2301      	movs	r3, #1
 800110c:	e002      	b.n	8001114 <Autorization_test+0x58>
				   		//	 	Can_state.state +=1;

				         }
				    return false;
 800110e:	2300      	movs	r3, #0
 8001110:	e000      	b.n	8001114 <Autorization_test+0x58>

			  }

	return false;
 8001112:	2300      	movs	r3, #0
 }
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20006284 	.word	0x20006284
 8001120:	2000633c 	.word	0x2000633c

08001124 <GPIO_IO_check>:

bool GPIO_IO_check(  uint8_t event , bool positive)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af02      	add	r7, sp, #8
 800112a:	4603      	mov	r3, r0
 800112c:	460a      	mov	r2, r1
 800112e:	71fb      	strb	r3, [r7, #7]
 8001130:	4613      	mov	r3, r2
 8001132:	71bb      	strb	r3, [r7, #6]
	//uint8_t state;
	bool res;
   uint8_t event_1 = event ;
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	73fb      	strb	r3, [r7, #15]

      memcpy(&Can_state.txbuf[0], "HW Test ", 8);
 8001138:	2208      	movs	r2, #8
 800113a:	49c1      	ldr	r1, [pc, #772]	; (8001440 <GPIO_IO_check+0x31c>)
 800113c:	48c1      	ldr	r0, [pc, #772]	; (8001444 <GPIO_IO_check+0x320>)
 800113e:	f009 ff75 	bl	800b02c <memcpy>

     Hex_Str(event_1, &Can_state.txbuf[8]);
 8001142:	7bfb      	ldrb	r3, [r7, #15]
 8001144:	49c0      	ldr	r1, [pc, #768]	; (8001448 <GPIO_IO_check+0x324>)
 8001146:	4618      	mov	r0, r3
 8001148:	f000 ffb8 	bl	80020bc <Hex_Str>
     for(int num = 0; num < 5; num ++)
 800114c:	2300      	movs	r3, #0
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	e008      	b.n	8001164 <GPIO_IO_check+0x40>
    	 ADC_chan.aInputs[num] = 0;
 8001152:	4abe      	ldr	r2, [pc, #760]	; (800144c <GPIO_IO_check+0x328>)
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	3302      	adds	r3, #2
 8001158:	2100      	movs	r1, #0
 800115a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
     for(int num = 0; num < 5; num ++)
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	3301      	adds	r3, #1
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	2b04      	cmp	r3, #4
 8001168:	ddf3      	ble.n	8001152 <GPIO_IO_check+0x2e>

     	ConsoleWrite(&Can_state.txbuf[0] , 10);
 800116a:	210a      	movs	r1, #10
 800116c:	48b5      	ldr	r0, [pc, #724]	; (8001444 <GPIO_IO_check+0x320>)
 800116e:	f7ff fdd9 	bl	8000d24 <ConsoleWrite>
	   CAN_UDS_Diagnostic_IO_test(1, 2, 1);      ///on-off mode !!!
 8001172:	2201      	movs	r2, #1
 8001174:	2102      	movs	r1, #2
 8001176:	2001      	movs	r0, #1
 8001178:	f000 fb2a 	bl	80017d0 <CAN_UDS_Diagnostic_IO_test>
   // Power_Monitor();

	     switch (event)
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	2b0c      	cmp	r3, #12
 8001180:	f200 82f1 	bhi.w	8001766 <GPIO_IO_check+0x642>
 8001184:	a201      	add	r2, pc, #4	; (adr r2, 800118c <GPIO_IO_check+0x68>)
 8001186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800118a:	bf00      	nop
 800118c:	080011c1 	.word	0x080011c1
 8001190:	080011f5 	.word	0x080011f5
 8001194:	08001271 	.word	0x08001271
 8001198:	08001319 	.word	0x08001319
 800119c:	08001371 	.word	0x08001371
 80011a0:	080013a5 	.word	0x080013a5
 80011a4:	08001485 	.word	0x08001485
 80011a8:	08001539 	.word	0x08001539
 80011ac:	080015a1 	.word	0x080015a1
 80011b0:	08001649 	.word	0x08001649
 80011b4:	080016c5 	.word	0x080016c5
 80011b8:	08001767 	.word	0x08001767
 80011bc:	08001767 	.word	0x08001767

	     {
	     case  kl30cur_test:  //


	    	 CAN_UDS_Diagnostic_IO_test(1, 0, 1);
 80011c0:	2201      	movs	r2, #1
 80011c2:	2100      	movs	r1, #0
 80011c4:	2001      	movs	r0, #1
 80011c6:	f000 fb03 	bl	80017d0 <CAN_UDS_Diagnostic_IO_test>
	    		 Config.kl30_adc =  InOutADC_Data( &hadc1, 0);
	    	    res = Validate_Config(ADC_chan.aInputs[0], KL3016VADC_MIN, KL3016VADC_MAX);
	    	 }
	    	 else
	    	 {*/
	    		 Config.kl30_adc = InOutADC_Data( &hadc3, 4);
 80011ca:	2104      	movs	r1, #4
 80011cc:	48a0      	ldr	r0, [pc, #640]	; (8001450 <GPIO_IO_check+0x32c>)
 80011ce:	f001 f8db 	bl	8002388 <InOutADC_Data>
 80011d2:	4603      	mov	r3, r0
 80011d4:	4a9f      	ldr	r2, [pc, #636]	; (8001454 <GPIO_IO_check+0x330>)
 80011d6:	6053      	str	r3, [r2, #4]
	    		 //Config.kl30_adc = InOutADC_Data( &hadc3, 4);
	    		 res = Validate_Config(Config.kl30_adc, KL3016VADC_CUR_MIN, KL3016VADC_CUR_MAX);
 80011d8:	4b9e      	ldr	r3, [pc, #632]	; (8001454 <GPIO_IO_check+0x330>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f241 1294 	movw	r2, #4500	; 0x1194
 80011e0:	21e6      	movs	r1, #230	; 0xe6
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 fc91 	bl	8001b0a <Validate_Config>
 80011e8:	4603      	mov	r3, r0
 80011ea:	75fb      	strb	r3, [r7, #23]
	    //	 }
	    	 MX_ADC3_Init(ADC_CHANNEL_9);
 80011ec:	2009      	movs	r0, #9
 80011ee:	f001 fce9 	bl	8002bc4 <MX_ADC3_Init>

	   break;
 80011f2:	e2d0      	b.n	8001796 <GPIO_IO_check+0x672>

	     case  kl3016V_test:


	    	 if(CAN_UDS_Diagnostic_Req_Send(&message, OBD2_CMD_READ , P99_group ,Get_KL30_ADC,  3))
 80011f4:	2303      	movs	r3, #3
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2307      	movs	r3, #7
 80011fa:	2299      	movs	r2, #153	; 0x99
 80011fc:	2122      	movs	r1, #34	; 0x22
 80011fe:	4896      	ldr	r0, [pc, #600]	; (8001458 <GPIO_IO_check+0x334>)
 8001200:	f7ff fde6 	bl	8000dd0 <CAN_UDS_Diagnostic_Req_Send>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d02f      	beq.n	800126a <GPIO_IO_check+0x146>
	    	 {

	    		 Config.kl30_16v = 	Config.kl30;
 800120a:	4b92      	ldr	r3, [pc, #584]	; (8001454 <GPIO_IO_check+0x330>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a91      	ldr	r2, [pc, #580]	; (8001454 <GPIO_IO_check+0x330>)
 8001210:	6093      	str	r3, [r2, #8]
	    		 if(Can_state.version == AVT04){
 8001212:	4b92      	ldr	r3, [pc, #584]	; (800145c <GPIO_IO_check+0x338>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b02      	cmp	r3, #2
 8001218:	d10b      	bne.n	8001232 <GPIO_IO_check+0x10e>
	    		      res = Validate_Config(Config.kl30, KL3016V_MIN, KL3016V_MAX);}
 800121a:	4b8e      	ldr	r3, [pc, #568]	; (8001454 <GPIO_IO_check+0x330>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001222:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8001226:	4618      	mov	r0, r3
 8001228:	f000 fc6f 	bl	8001b0a <Validate_Config>
 800122c:	4603      	mov	r3, r0
 800122e:	75fb      	strb	r3, [r7, #23]
	    			 res = Validate_Config(Config.kl30, KL3016V_ISNT_MIN, KL3016V_ISNT_MAX);

	    	 }
	    	 else
	    		 res= false;
	    	break;
 8001230:	e2b1      	b.n	8001796 <GPIO_IO_check+0x672>
	    		 else if(Can_state.version == ISNT_24){
 8001232:	4b8a      	ldr	r3, [pc, #552]	; (800145c <GPIO_IO_check+0x338>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b03      	cmp	r3, #3
 8001238:	d10b      	bne.n	8001252 <GPIO_IO_check+0x12e>
	    			 res = Validate_Config(Config.kl30, KL3016V_ISNT_24_MIN, KL3016V_ISNT_24_MAX);}
 800123a:	4b86      	ldr	r3, [pc, #536]	; (8001454 <GPIO_IO_check+0x330>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001242:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001246:	4618      	mov	r0, r3
 8001248:	f000 fc5f 	bl	8001b0a <Validate_Config>
 800124c:	4603      	mov	r3, r0
 800124e:	75fb      	strb	r3, [r7, #23]
	    	break;
 8001250:	e2a1      	b.n	8001796 <GPIO_IO_check+0x672>
	    			 res = Validate_Config(Config.kl30, KL3016V_ISNT_MIN, KL3016V_ISNT_MAX);
 8001252:	4b80      	ldr	r3, [pc, #512]	; (8001454 <GPIO_IO_check+0x330>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800125a:	f240 5114 	movw	r1, #1300	; 0x514
 800125e:	4618      	mov	r0, r3
 8001260:	f000 fc53 	bl	8001b0a <Validate_Config>
 8001264:	4603      	mov	r3, r0
 8001266:	75fb      	strb	r3, [r7, #23]
	    	break;
 8001268:	e295      	b.n	8001796 <GPIO_IO_check+0x672>
	    		 res= false;
 800126a:	2300      	movs	r3, #0
 800126c:	75fb      	strb	r3, [r7, #23]
	    	break;
 800126e:	e292      	b.n	8001796 <GPIO_IO_check+0x672>

	     case kl308V_test:


	    	 HAL_GPIO_WritePin(LOW_VOL_ON_Port, LOW_VOL_ON, GPIO_PIN_RESET);
 8001270:	2200      	movs	r2, #0
 8001272:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001276:	487a      	ldr	r0, [pc, #488]	; (8001460 <GPIO_IO_check+0x33c>)
 8001278:	f004 f8bc 	bl	80053f4 <HAL_GPIO_WritePin>

	     		if (CAN_UDS_Diagnostic_Req_Send(&message, OBD2_CMD_READ, P99_group,
 800127c:	2303      	movs	r3, #3
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	2307      	movs	r3, #7
 8001282:	2299      	movs	r2, #153	; 0x99
 8001284:	2122      	movs	r1, #34	; 0x22
 8001286:	4874      	ldr	r0, [pc, #464]	; (8001458 <GPIO_IO_check+0x334>)
 8001288:	f7ff fda2 	bl	8000dd0 <CAN_UDS_Diagnostic_Req_Send>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d039      	beq.n	8001306 <GPIO_IO_check+0x1e2>
	     		        Get_KL30_ADC, 3))
	     		{

	     			vTaskDelay(TIMEOUT_1s);
 8001292:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001296:	f007 fadd 	bl	8008854 <vTaskDelay>
	     		//	Config.kl30 = InOutADC_Data( &hadc1, 0);

	     	     	HAL_GPIO_WritePin(LOW_VOL_ON_Port, LOW_VOL_ON, GPIO_PIN_SET);
 800129a:	2201      	movs	r2, #1
 800129c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012a0:	486f      	ldr	r0, [pc, #444]	; (8001460 <GPIO_IO_check+0x33c>)
 80012a2:	f004 f8a7 	bl	80053f4 <HAL_GPIO_WritePin>
	     		    Config.kl30_8v = 	Config.kl30;
 80012a6:	4b6b      	ldr	r3, [pc, #428]	; (8001454 <GPIO_IO_check+0x330>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a6a      	ldr	r2, [pc, #424]	; (8001454 <GPIO_IO_check+0x330>)
 80012ac:	60d3      	str	r3, [r2, #12]

	     		//	HAL_GPIO_WritePin(LOW_VOL_ON_Port, LOW_VOL_ON, GPIO_PIN_SET);
	     			 if(Can_state.version == AVT04){
 80012ae:	4b6b      	ldr	r3, [pc, #428]	; (800145c <GPIO_IO_check+0x338>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d10b      	bne.n	80012ce <GPIO_IO_check+0x1aa>
	     			 res = Validate_Config(Config.kl30_8v, KL308V_MIN, KL308V_MAX);
 80012b6:	4b67      	ldr	r3, [pc, #412]	; (8001454 <GPIO_IO_check+0x330>)
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80012be:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 fc21 	bl	8001b0a <Validate_Config>
 80012c8:	4603      	mov	r3, r0
 80012ca:	75fb      	strb	r3, [r7, #23]
 80012cc:	e01d      	b.n	800130a <GPIO_IO_check+0x1e6>
	     			 	 }

	     			 else  if(Can_state.version == ISNT_24){
 80012ce:	4b63      	ldr	r3, [pc, #396]	; (800145c <GPIO_IO_check+0x338>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	d10b      	bne.n	80012ee <GPIO_IO_check+0x1ca>
	     			 res = Validate_Config(Config.kl30_8v, KL308V_ISNT_24B_MIN, KL308V_ISNT_24B_MAX);
 80012d6:	4b5f      	ldr	r3, [pc, #380]	; (8001454 <GPIO_IO_check+0x330>)
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	f44f 7216 	mov.w	r2, #600	; 0x258
 80012de:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 fc11 	bl	8001b0a <Validate_Config>
 80012e8:	4603      	mov	r3, r0
 80012ea:	75fb      	strb	r3, [r7, #23]
 80012ec:	e00d      	b.n	800130a <GPIO_IO_check+0x1e6>
	     					 }
	     			 else
	     			 {res = Validate_Config(Config.kl30_8v, KL308V_ISNT_MIN, KL308V_ISNT_MAX);}
 80012ee:	4b59      	ldr	r3, [pc, #356]	; (8001454 <GPIO_IO_check+0x330>)
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	f44f 7261 	mov.w	r2, #900	; 0x384
 80012f6:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 fc05 	bl	8001b0a <Validate_Config>
 8001300:	4603      	mov	r3, r0
 8001302:	75fb      	strb	r3, [r7, #23]
 8001304:	e001      	b.n	800130a <GPIO_IO_check+0x1e6>

	     		}
	     		else
	     			res = false;
 8001306:	2300      	movs	r3, #0
 8001308:	75fb      	strb	r3, [r7, #23]
	     		HAL_GPIO_WritePin(LOW_VOL_ON_Port, LOW_VOL_ON, GPIO_PIN_SET);
 800130a:	2201      	movs	r2, #1
 800130c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001310:	4853      	ldr	r0, [pc, #332]	; (8001460 <GPIO_IO_check+0x33c>)
 8001312:	f004 f86f 	bl	80053f4 <HAL_GPIO_WritePin>
	     		break;
 8001316:	e23e      	b.n	8001796 <GPIO_IO_check+0x672>


	case kl15_test:

		CAN_UDS_Diagnostic_IO_test(1, 2, 1);
 8001318:	2201      	movs	r2, #1
 800131a:	2102      	movs	r1, #2
 800131c:	2001      	movs	r0, #1
 800131e:	f000 fa57 	bl	80017d0 <CAN_UDS_Diagnostic_IO_test>

	if(CAN_UDS_Diagnostic_Req_Send(&message, OBD2_CMD_READ , P99_group , Get_Set_digital_IO_state, 3))
 8001322:	2303      	movs	r3, #3
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2309      	movs	r3, #9
 8001328:	2299      	movs	r2, #153	; 0x99
 800132a:	2122      	movs	r1, #34	; 0x22
 800132c:	484a      	ldr	r0, [pc, #296]	; (8001458 <GPIO_IO_check+0x334>)
 800132e:	f7ff fd4f 	bl	8000dd0 <CAN_UDS_Diagnostic_Req_Send>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d00c      	beq.n	8001352 <GPIO_IO_check+0x22e>
			    		  {
			  digital_IO_state.io_ign_btn.ignition_in = (Config.IO_ign_state & (1 << 4)) >> 4;
 8001338:	4b46      	ldr	r3, [pc, #280]	; (8001454 <GPIO_IO_check+0x330>)
 800133a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800133e:	111b      	asrs	r3, r3, #4
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	b2d9      	uxtb	r1, r3
 8001346:	4a47      	ldr	r2, [pc, #284]	; (8001464 <GPIO_IO_check+0x340>)
 8001348:	7c13      	ldrb	r3, [r2, #16]
 800134a:	f361 03c3 	bfi	r3, r1, #3, #1
 800134e:	7413      	strb	r3, [r2, #16]
 8001350:	e001      	b.n	8001356 <GPIO_IO_check+0x232>


			    		  }
	    else res = false;
 8001352:	2300      	movs	r3, #0
 8001354:	75fb      	strb	r3, [r7, #23]
		if( digital_IO_state.io_ign_btn.ignition_in )
 8001356:	4b43      	ldr	r3, [pc, #268]	; (8001464 <GPIO_IO_check+0x340>)
 8001358:	7c1b      	ldrb	r3, [r3, #16]
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	b2db      	uxtb	r3, r3
 8001360:	2b00      	cmp	r3, #0
 8001362:	d002      	beq.n	800136a <GPIO_IO_check+0x246>
		{
			res = true;
 8001364:	2301      	movs	r3, #1
 8001366:	75fb      	strb	r3, [r7, #23]
		      	}
	   		else
		         res= false;
		//}

		break;
 8001368:	e215      	b.n	8001796 <GPIO_IO_check+0x672>
		         res= false;
 800136a:	2300      	movs	r3, #0
 800136c:	75fb      	strb	r3, [r7, #23]
		break;
 800136e:	e212      	b.n	8001796 <GPIO_IO_check+0x672>

	case battery_test:

		   if(CAN_UDS_Diagnostic_Req_Send(&message, OBD2_CMD_READ , P99_group ,  Get_BATTERY_ADC,  3))
 8001370:	2303      	movs	r3, #3
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	2308      	movs	r3, #8
 8001376:	2299      	movs	r2, #153	; 0x99
 8001378:	2122      	movs	r1, #34	; 0x22
 800137a:	4837      	ldr	r0, [pc, #220]	; (8001458 <GPIO_IO_check+0x334>)
 800137c:	f7ff fd28 	bl	8000dd0 <CAN_UDS_Diagnostic_Req_Send>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d00b      	beq.n	800139e <GPIO_IO_check+0x27a>
			    	 	    	 {
			   res = Validate_Config(Config.batt_adc, BATT_MIN, BATT_MAX);
 8001386:	4b33      	ldr	r3, [pc, #204]	; (8001454 <GPIO_IO_check+0x330>)
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 800138e:	f240 4192 	movw	r1, #1170	; 0x492
 8001392:	4618      	mov	r0, r3
 8001394:	f000 fbb9 	bl	8001b0a <Validate_Config>
 8001398:	4603      	mov	r3, r0
 800139a:	75fb      	strb	r3, [r7, #23]

			    	 	    	 }
		   else
			   res = false;

		break;
 800139c:	e1fb      	b.n	8001796 <GPIO_IO_check+0x672>
			   res = false;
 800139e:	2300      	movs	r3, #0
 80013a0:	75fb      	strb	r3, [r7, #23]
		break;
 80013a2:	e1f8      	b.n	8001796 <GPIO_IO_check+0x672>

	case mic_test:


			if (CAN_UDS_Diagnostic_Req_Send(&message, OBD2_CMD_READ, P99_group,
 80013a4:	2303      	movs	r3, #3
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	2306      	movs	r3, #6
 80013aa:	2299      	movs	r2, #153	; 0x99
 80013ac:	2122      	movs	r1, #34	; 0x22
 80013ae:	482a      	ldr	r0, [pc, #168]	; (8001458 <GPIO_IO_check+0x334>)
 80013b0:	f7ff fd0e 	bl	8000dd0 <CAN_UDS_Diagnostic_Req_Send>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f000 81d7 	beq.w	800176a <GPIO_IO_check+0x646>
			        Get_Microphone_ADC, 3))
			         {
            if(Can_state.version == AVT04){
 80013bc:	4b27      	ldr	r3, [pc, #156]	; (800145c <GPIO_IO_check+0x338>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d153      	bne.n	800146c <GPIO_IO_check+0x348>

        		 HAL_GPIO_WritePin( BUT_CUR_ON_Port,  BUT_CUR_ON, GPIO_PIN_RESET);  //
 80013c4:	2200      	movs	r2, #0
 80013c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ca:	4827      	ldr	r0, [pc, #156]	; (8001468 <GPIO_IO_check+0x344>)
 80013cc:	f004 f812 	bl	80053f4 <HAL_GPIO_WritePin>
        		// vTaskDelay(1500);
        		 if (CAN_UDS_Diagnostic_Req_Send(&message, OBD2_CMD_READ, P99_group,
 80013d0:	2303      	movs	r3, #3
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	2306      	movs	r3, #6
 80013d6:	2299      	movs	r2, #153	; 0x99
 80013d8:	2122      	movs	r1, #34	; 0x22
 80013da:	481f      	ldr	r0, [pc, #124]	; (8001458 <GPIO_IO_check+0x334>)
 80013dc:	f7ff fcf8 	bl	8000dd0 <CAN_UDS_Diagnostic_Req_Send>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 81c1 	beq.w	800176a <GPIO_IO_check+0x646>
        		 			        Get_Microphone_ADC, 3))
        		 {
        			 if(Config.mic_adc > MIC_UDS_AVT04_OFF){
 80013e8:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <GPIO_IO_check+0x330>)
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80013f0:	d922      	bls.n	8001438 <GPIO_IO_check+0x314>
        				 HAL_GPIO_WritePin( BUT_CUR_ON_Port,  BUT_CUR_ON, GPIO_PIN_SET);  // off
 80013f2:	2201      	movs	r2, #1
 80013f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013f8:	481b      	ldr	r0, [pc, #108]	; (8001468 <GPIO_IO_check+0x344>)
 80013fa:	f003 fffb 	bl	80053f4 <HAL_GPIO_WritePin>
        				 vTaskDelay(1700);
 80013fe:	f240 60a4 	movw	r0, #1700	; 0x6a4
 8001402:	f007 fa27 	bl	8008854 <vTaskDelay>
        			 if (CAN_UDS_Diagnostic_Req_Send(&message, OBD2_CMD_READ, P99_group,
 8001406:	2303      	movs	r3, #3
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	2306      	movs	r3, #6
 800140c:	2299      	movs	r2, #153	; 0x99
 800140e:	2122      	movs	r1, #34	; 0x22
 8001410:	4811      	ldr	r0, [pc, #68]	; (8001458 <GPIO_IO_check+0x334>)
 8001412:	f7ff fcdd 	bl	8000dd0 <CAN_UDS_Diagnostic_Req_Send>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d00a      	beq.n	8001432 <GPIO_IO_check+0x30e>
        			         		 			        Get_Microphone_ADC, 3))
        			 {
        					res = Validate_Config(Config.mic_adc, MIC_UDS_AVT04_MIN, MIC_UDS_AVT04_MAX);
 800141c:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <GPIO_IO_check+0x330>)
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8001424:	21c8      	movs	r1, #200	; 0xc8
 8001426:	4618      	mov	r0, r3
 8001428:	f000 fb6f 	bl	8001b0a <Validate_Config>
 800142c:	4603      	mov	r3, r0
 800142e:	75fb      	strb	r3, [r7, #23]
             else   // ISNT
             {res = Validate_Config(Config.mic_adc, MIC_UDS_ISNT_MIN, MIC_UDS_ISNT_MAX);}
	      //   res = false;
			}

			break;
 8001430:	e19b      	b.n	800176a <GPIO_IO_check+0x646>
        			 else res= false;
 8001432:	2300      	movs	r3, #0
 8001434:	75fb      	strb	r3, [r7, #23]
			break;
 8001436:	e198      	b.n	800176a <GPIO_IO_check+0x646>
        			 else res = false;
 8001438:	2300      	movs	r3, #0
 800143a:	75fb      	strb	r3, [r7, #23]
			break;
 800143c:	e195      	b.n	800176a <GPIO_IO_check+0x646>
 800143e:	bf00      	nop
 8001440:	0800b230 	.word	0x0800b230
 8001444:	200062b9 	.word	0x200062b9
 8001448:	200062c1 	.word	0x200062c1
 800144c:	20006454 	.word	0x20006454
 8001450:	20006cc4 	.word	0x20006cc4
 8001454:	20006d98 	.word	0x20006d98
 8001458:	2000633c 	.word	0x2000633c
 800145c:	20006284 	.word	0x20006284
 8001460:	40020c00 	.word	0x40020c00
 8001464:	200063d0 	.word	0x200063d0
 8001468:	40021000 	.word	0x40021000
             {res = Validate_Config(Config.mic_adc, MIC_UDS_ISNT_MIN, MIC_UDS_ISNT_MAX);}
 800146c:	4bc0      	ldr	r3, [pc, #768]	; (8001770 <GPIO_IO_check+0x64c>)
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8001474:	f44f 61af 	mov.w	r1, #1400	; 0x578
 8001478:	4618      	mov	r0, r3
 800147a:	f000 fb46 	bl	8001b0a <Validate_Config>
 800147e:	4603      	mov	r3, r0
 8001480:	75fb      	strb	r3, [r7, #23]
			break;
 8001482:	e172      	b.n	800176a <GPIO_IO_check+0x646>


		// HAL_GPIO_WritePin( BUT_CUR_ON_Port,  BUT_CUR_ON, GPIO_PIN_SET);  // off


		if (CAN_UDS_Diagnostic_Req_Send(&message, OBD2_CMD_READ, P99_group,
 8001484:	2303      	movs	r3, #3
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	2309      	movs	r3, #9
 800148a:	2299      	movs	r2, #153	; 0x99
 800148c:	2122      	movs	r1, #34	; 0x22
 800148e:	48b9      	ldr	r0, [pc, #740]	; (8001774 <GPIO_IO_check+0x650>)
 8001490:	f7ff fc9e 	bl	8000dd0 <CAN_UDS_Diagnostic_Req_Send>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d047      	beq.n	800152a <GPIO_IO_check+0x406>
		        Get_Set_digital_IO_state, 3)) {
			digital_IO_state.io_sos_btn.sos_btn_in = ((Config.IO_sos_state
 800149a:	4bb5      	ldr	r3, [pc, #724]	; (8001770 <GPIO_IO_check+0x64c>)
 800149c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
						        & (1 << Sos_btn_in))) >> Sos_btn_in;
 80014a0:	09db      	lsrs	r3, r3, #7
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	b2d9      	uxtb	r1, r3
			digital_IO_state.io_sos_btn.sos_btn_in = ((Config.IO_sos_state
 80014aa:	4ab3      	ldr	r2, [pc, #716]	; (8001778 <GPIO_IO_check+0x654>)
 80014ac:	7b13      	ldrb	r3, [r2, #12]
 80014ae:	f361 0300 	bfi	r3, r1, #0, #1
 80014b2:	7313      	strb	r3, [r2, #12]

			if(!digital_IO_state.io_sos_btn.sos_btn_in){
 80014b4:	4bb0      	ldr	r3, [pc, #704]	; (8001778 <GPIO_IO_check+0x654>)
 80014b6:	7b1b      	ldrb	r3, [r3, #12]
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d131      	bne.n	8001526 <GPIO_IO_check+0x402>
			HAL_GPIO_WritePin(SOS_ON_Port, SOS_ON, GPIO_PIN_SET);   // ON
 80014c2:	2201      	movs	r2, #1
 80014c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014c8:	48ac      	ldr	r0, [pc, #688]	; (800177c <GPIO_IO_check+0x658>)
 80014ca:	f003 ff93 	bl	80053f4 <HAL_GPIO_WritePin>
						vTaskDelay(500);
 80014ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014d2:	f007 f9bf 	bl	8008854 <vTaskDelay>


     	if (CAN_UDS_Diagnostic_Req_Send(&message, OBD2_CMD_READ, P99_group,
 80014d6:	2303      	movs	r3, #3
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	2309      	movs	r3, #9
 80014dc:	2299      	movs	r2, #153	; 0x99
 80014de:	2122      	movs	r1, #34	; 0x22
 80014e0:	48a4      	ldr	r0, [pc, #656]	; (8001774 <GPIO_IO_check+0x650>)
 80014e2:	f7ff fc75 	bl	8000dd0 <CAN_UDS_Diagnostic_Req_Send>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d019      	beq.n	8001520 <GPIO_IO_check+0x3fc>
								        Get_Set_digital_IO_state, 3)) {

			digital_IO_state.io_sos_btn.sos_btn_in = ((Config.IO_sos_state
 80014ec:	4ba0      	ldr	r3, [pc, #640]	; (8001770 <GPIO_IO_check+0x64c>)
 80014ee:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
			        & (1 << Sos_btn_in))) >> Sos_btn_in;
 80014f2:	09db      	lsrs	r3, r3, #7
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	b2d9      	uxtb	r1, r3
			digital_IO_state.io_sos_btn.sos_btn_in = ((Config.IO_sos_state
 80014fc:	4a9e      	ldr	r2, [pc, #632]	; (8001778 <GPIO_IO_check+0x654>)
 80014fe:	7b13      	ldrb	r3, [r2, #12]
 8001500:	f361 0300 	bfi	r3, r1, #0, #1
 8001504:	7313      	strb	r3, [r2, #12]


			  if(digital_IO_state.io_sos_btn.sos_btn_in)
 8001506:	4b9c      	ldr	r3, [pc, #624]	; (8001778 <GPIO_IO_check+0x654>)
 8001508:	7b1b      	ldrb	r3, [r3, #12]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	d002      	beq.n	800151a <GPIO_IO_check+0x3f6>
				  res = true;
 8001514:	2301      	movs	r3, #1
 8001516:	75fb      	strb	r3, [r7, #23]
 8001518:	e007      	b.n	800152a <GPIO_IO_check+0x406>
					    else
			 res = false;
 800151a:	2300      	movs	r3, #0
 800151c:	75fb      	strb	r3, [r7, #23]
 800151e:	e004      	b.n	800152a <GPIO_IO_check+0x406>


						}
                 	else res = false;
 8001520:	2300      	movs	r3, #0
 8001522:	75fb      	strb	r3, [r7, #23]
 8001524:	e001      	b.n	800152a <GPIO_IO_check+0x406>
	    	}
			else res = false;
 8001526:	2300      	movs	r3, #0
 8001528:	75fb      	strb	r3, [r7, #23]
		}
		HAL_GPIO_WritePin(SOS_ON_Port, SOS_ON, GPIO_PIN_RESET);   // ON
 800152a:	2200      	movs	r2, #0
 800152c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001530:	4892      	ldr	r0, [pc, #584]	; (800177c <GPIO_IO_check+0x658>)
 8001532:	f003 ff5f 	bl	80053f4 <HAL_GPIO_WritePin>
		break;
 8001536:	e12e      	b.n	8001796 <GPIO_IO_check+0x672>

	case led_cur_test:


	    CAN_UDS_Set_IO_test(1, 0, 0);
 8001538:	2200      	movs	r2, #0
 800153a:	2100      	movs	r1, #0
 800153c:	2001      	movs	r0, #1
 800153e:	f000 f9a5 	bl	800188c <CAN_UDS_Set_IO_test>
	    CAN_UDS_Set_IO_test(1, 5, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2105      	movs	r1, #5
 8001546:	2001      	movs	r0, #1
 8001548:	f000 f9a0 	bl	800188c <CAN_UDS_Set_IO_test>

		 if(Can_state.version == AVT04){
 800154c:	4b8c      	ldr	r3, [pc, #560]	; (8001780 <GPIO_IO_check+0x65c>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d112      	bne.n	800157a <GPIO_IO_check+0x456>
			 Config.led_pwr= InOutADC_Data( &hadc2, 1);
 8001554:	2101      	movs	r1, #1
 8001556:	488b      	ldr	r0, [pc, #556]	; (8001784 <GPIO_IO_check+0x660>)
 8001558:	f000 ff16 	bl	8002388 <InOutADC_Data>
 800155c:	4603      	mov	r3, r0
 800155e:	4a84      	ldr	r2, [pc, #528]	; (8001770 <GPIO_IO_check+0x64c>)
 8001560:	6193      	str	r3, [r2, #24]
             res = Validate_Config(Config.led_pwr, LEDADC_LOW_MIN, LEDADC_LOW_MAX);}
 8001562:	4b83      	ldr	r3, [pc, #524]	; (8001770 <GPIO_IO_check+0x64c>)
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	f640 421c 	movw	r2, #3100	; 0xc1c
 800156a:	f640 218c 	movw	r1, #2700	; 0xa8c
 800156e:	4618      	mov	r0, r3
 8001570:	f000 facb 	bl	8001b0a <Validate_Config>
 8001574:	4603      	mov	r3, r0
 8001576:	75fb      	strb	r3, [r7, #23]
		 {
			 Config.led_pwr= InOutADC_Data( &hadc1, 0);
		 res = Validate_Config(Config.led_pwr, LEDADC_LOW_ISNT_MIN, LEDADC_LOW_ISNT_MAX);}


		 break;
 8001578:	e10d      	b.n	8001796 <GPIO_IO_check+0x672>
			 Config.led_pwr= InOutADC_Data( &hadc1, 0);
 800157a:	2100      	movs	r1, #0
 800157c:	4882      	ldr	r0, [pc, #520]	; (8001788 <GPIO_IO_check+0x664>)
 800157e:	f000 ff03 	bl	8002388 <InOutADC_Data>
 8001582:	4603      	mov	r3, r0
 8001584:	4a7a      	ldr	r2, [pc, #488]	; (8001770 <GPIO_IO_check+0x64c>)
 8001586:	6193      	str	r3, [r2, #24]
		 res = Validate_Config(Config.led_pwr, LEDADC_LOW_ISNT_MIN, LEDADC_LOW_ISNT_MAX);}
 8001588:	4b79      	ldr	r3, [pc, #484]	; (8001770 <GPIO_IO_check+0x64c>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001590:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8001594:	4618      	mov	r0, r3
 8001596:	f000 fab8 	bl	8001b0a <Validate_Config>
 800159a:	4603      	mov	r3, r0
 800159c:	75fb      	strb	r3, [r7, #23]
		 break;
 800159e:	e0fa      	b.n	8001796 <GPIO_IO_check+0x672>


	case led_red_test:

		    CAN_UDS_Diagnostic_IO_test(1, 4, 1);
 80015a0:	2201      	movs	r2, #1
 80015a2:	2104      	movs	r1, #4
 80015a4:	2001      	movs	r0, #1
 80015a6:	f000 f913 	bl	80017d0 <CAN_UDS_Diagnostic_IO_test>

			CAN_UDS_Diagnostic_IO_test(1, 0, 1);
 80015aa:	2201      	movs	r2, #1
 80015ac:	2100      	movs	r1, #0
 80015ae:	2001      	movs	r0, #1
 80015b0:	f000 f90e 	bl	80017d0 <CAN_UDS_Diagnostic_IO_test>


				 digital_IO_state.io_ign_btn.red_mode_out = ((Config.IO_ign_state  & (1 << Service_ctrl_out))) >> Service_ctrl_out;
 80015b4:	4b6e      	ldr	r3, [pc, #440]	; (8001770 <GPIO_IO_check+0x64c>)
 80015b6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80015ba:	10db      	asrs	r3, r3, #3
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	b2d9      	uxtb	r1, r3
 80015c2:	4a6d      	ldr	r2, [pc, #436]	; (8001778 <GPIO_IO_check+0x654>)
 80015c4:	7c13      	ldrb	r3, [r2, #16]
 80015c6:	f361 1304 	bfi	r3, r1, #4, #1
 80015ca:	7413      	strb	r3, [r2, #16]
				 if(digital_IO_state.io_ign_btn.red_mode_out)
 80015cc:	4b6a      	ldr	r3, [pc, #424]	; (8001778 <GPIO_IO_check+0x654>)
 80015ce:	7c1b      	ldrb	r3, [r3, #16]
 80015d0:	f003 0310 	and.w	r3, r3, #16
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d029      	beq.n	800162e <GPIO_IO_check+0x50a>
				 {
					 if(Can_state.version == AVT04){
 80015da:	4b69      	ldr	r3, [pc, #420]	; (8001780 <GPIO_IO_check+0x65c>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d112      	bne.n	8001608 <GPIO_IO_check+0x4e4>
						 Config.led_pwr_red= InOutADC_Data( &hadc2, 1);
 80015e2:	2101      	movs	r1, #1
 80015e4:	4867      	ldr	r0, [pc, #412]	; (8001784 <GPIO_IO_check+0x660>)
 80015e6:	f000 fecf 	bl	8002388 <InOutADC_Data>
 80015ea:	4603      	mov	r3, r0
 80015ec:	4a60      	ldr	r2, [pc, #384]	; (8001770 <GPIO_IO_check+0x64c>)
 80015ee:	61d3      	str	r3, [r2, #28]
						res = Validate_Config(/*ADC_chan.aInputs[1]*/Config.led_pwr_red , LEDADC_HIGH_MIN,LEDADC_HIGH_MAX);
 80015f0:	4b5f      	ldr	r3, [pc, #380]	; (8001770 <GPIO_IO_check+0x64c>)
 80015f2:	69db      	ldr	r3, [r3, #28]
 80015f4:	f640 2228 	movw	r2, #2600	; 0xa28
 80015f8:	f640 0198 	movw	r1, #2200	; 0x898
 80015fc:	4618      	mov	r0, r3
 80015fe:	f000 fa84 	bl	8001b0a <Validate_Config>
 8001602:	4603      	mov	r3, r0
 8001604:	75fb      	strb	r3, [r7, #23]
 8001606:	e014      	b.n	8001632 <GPIO_IO_check+0x50e>
					 }
					 else{
						 Config.led_pwr_red= InOutADC_Data( &hadc1, 0);
 8001608:	2100      	movs	r1, #0
 800160a:	485f      	ldr	r0, [pc, #380]	; (8001788 <GPIO_IO_check+0x664>)
 800160c:	f000 febc 	bl	8002388 <InOutADC_Data>
 8001610:	4603      	mov	r3, r0
 8001612:	4a57      	ldr	r2, [pc, #348]	; (8001770 <GPIO_IO_check+0x64c>)
 8001614:	61d3      	str	r3, [r2, #28]
						 res = Validate_Config(/*ADC_chan.aInputs[1]*/Config.led_pwr_red , LEDADC_HIGH_ISNT_MIN,LEDADC_HIGH_ISNT_MAX);
 8001616:	4b56      	ldr	r3, [pc, #344]	; (8001770 <GPIO_IO_check+0x64c>)
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 800161e:	f44f 6116 	mov.w	r1, #2400	; 0x960
 8001622:	4618      	mov	r0, r3
 8001624:	f000 fa71 	bl	8001b0a <Validate_Config>
 8001628:	4603      	mov	r3, r0
 800162a:	75fb      	strb	r3, [r7, #23]
 800162c:	e001      	b.n	8001632 <GPIO_IO_check+0x50e>
					 }
				 }
				 else
					 res = false;
 800162e:	2300      	movs	r3, #0
 8001630:	75fb      	strb	r3, [r7, #23]


				  CAN_UDS_Diagnostic_IO_test(1, 0, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2100      	movs	r1, #0
 8001636:	2001      	movs	r0, #1
 8001638:	f000 f8ca 	bl	80017d0 <CAN_UDS_Diagnostic_IO_test>
				  CAN_UDS_Diagnostic_IO_test(1, 4, 0);
 800163c:	2200      	movs	r2, #0
 800163e:	2104      	movs	r1, #4
 8001640:	2001      	movs	r0, #1
 8001642:	f000 f8c5 	bl	80017d0 <CAN_UDS_Diagnostic_IO_test>

				//  CAN_UDS_Set_IO_test(0, 4, 0);



		break;
 8001646:	e0a6      	b.n	8001796 <GPIO_IO_check+0x672>


	case led_green_test:

		if(Can_state.version == AVT04){
 8001648:	4b4d      	ldr	r3, [pc, #308]	; (8001780 <GPIO_IO_check+0x65c>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b02      	cmp	r3, #2
 800164e:	d133      	bne.n	80016b8 <GPIO_IO_check+0x594>
		   CAN_UDS_Diagnostic_IO_test(1, 5, 1);
 8001650:	2201      	movs	r2, #1
 8001652:	2105      	movs	r1, #5
 8001654:	2001      	movs	r0, #1
 8001656:	f000 f8bb 	bl	80017d0 <CAN_UDS_Diagnostic_IO_test>

				   InOutADC_Data( &hadc2, 1);
 800165a:	2101      	movs	r1, #1
 800165c:	4849      	ldr	r0, [pc, #292]	; (8001784 <GPIO_IO_check+0x660>)
 800165e:	f000 fe93 	bl	8002388 <InOutADC_Data>
				  Config.led_pwr_green = ADC_chan.aInputs[1];
 8001662:	4b4a      	ldr	r3, [pc, #296]	; (800178c <GPIO_IO_check+0x668>)
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	4a42      	ldr	r2, [pc, #264]	; (8001770 <GPIO_IO_check+0x64c>)
 8001668:	6213      	str	r3, [r2, #32]

				 digital_IO_state.io_sos_btn.green_mode_ctrl_out =
						 ((Config.IO_sos_state  & (1 << Green_mode_ctrl_out ))) >> Green_mode_ctrl_out ;
 800166a:	4b41      	ldr	r3, [pc, #260]	; (8001770 <GPIO_IO_check+0x64c>)
 800166c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001670:	109b      	asrs	r3, r3, #2
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	b2d9      	uxtb	r1, r3
				 digital_IO_state.io_sos_btn.green_mode_ctrl_out =
 8001678:	4a3f      	ldr	r2, [pc, #252]	; (8001778 <GPIO_IO_check+0x654>)
 800167a:	7b13      	ldrb	r3, [r2, #12]
 800167c:	f361 1345 	bfi	r3, r1, #5, #1
 8001680:	7313      	strb	r3, [r2, #12]
				if( digital_IO_state.io_sos_btn.green_mode_ctrl_out)
 8001682:	4b3d      	ldr	r3, [pc, #244]	; (8001778 <GPIO_IO_check+0x654>)
 8001684:	7b1b      	ldrb	r3, [r3, #12]
 8001686:	f003 0320 	and.w	r3, r3, #32
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2b00      	cmp	r3, #0
 800168e:	d00b      	beq.n	80016a8 <GPIO_IO_check+0x584>
				{
					res = Validate_Config(ADC_chan.aInputs[1] , LEDADC_HIGH_MIN,LEDADC_HIGH_MAX);
 8001690:	4b3e      	ldr	r3, [pc, #248]	; (800178c <GPIO_IO_check+0x668>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	f640 2228 	movw	r2, #2600	; 0xa28
 8001698:	f640 0198 	movw	r1, #2200	; 0x898
 800169c:	4618      	mov	r0, r3
 800169e:	f000 fa34 	bl	8001b0a <Validate_Config>
 80016a2:	4603      	mov	r3, r0
 80016a4:	75fb      	strb	r3, [r7, #23]
 80016a6:	e001      	b.n	80016ac <GPIO_IO_check+0x588>
				}
				else res = false;
 80016a8:	2300      	movs	r3, #0
 80016aa:	75fb      	strb	r3, [r7, #23]

				   CAN_UDS_Set_IO_test(1, 5, 0);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2105      	movs	r1, #5
 80016b0:	2001      	movs	r0, #1
 80016b2:	f000 f8eb 	bl	800188c <CAN_UDS_Set_IO_test>
		else
		{
			res = true;
			ADC_chan.aInputs[1]=0xff;
		}
			break;
 80016b6:	e06e      	b.n	8001796 <GPIO_IO_check+0x672>
			res = true;
 80016b8:	2301      	movs	r3, #1
 80016ba:	75fb      	strb	r3, [r7, #23]
			ADC_chan.aInputs[1]=0xff;
 80016bc:	4b33      	ldr	r3, [pc, #204]	; (800178c <GPIO_IO_check+0x668>)
 80016be:	22ff      	movs	r2, #255	; 0xff
 80016c0:	60da      	str	r2, [r3, #12]
			break;
 80016c2:	e068      	b.n	8001796 <GPIO_IO_check+0x672>


	case  diag_spn_in:

			if (CAN_UDS_Diagnostic_Req_Send(&message, OBD2_CMD_READ, P99_group,
 80016c4:	2303      	movs	r3, #3
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	2309      	movs	r3, #9
 80016ca:	2299      	movs	r2, #153	; 0x99
 80016cc:	2122      	movs	r1, #34	; 0x22
 80016ce:	4829      	ldr	r0, [pc, #164]	; (8001774 <GPIO_IO_check+0x650>)
 80016d0:	f7ff fb7e 	bl	8000dd0 <CAN_UDS_Diagnostic_Req_Send>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d05c      	beq.n	8001794 <GPIO_IO_check+0x670>
			        Get_Set_digital_IO_state, 3)) {
				digital_IO_state.io_ign_btn.diag_spn_in = ((Config.IO_ign_state
 80016da:	4b25      	ldr	r3, [pc, #148]	; (8001770 <GPIO_IO_check+0x64c>)
 80016dc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
							        & (1 << Diag_sos_btn_in))) >> Diag_sos_btn_in;
 80016e0:	119b      	asrs	r3, r3, #6
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	b2d9      	uxtb	r1, r3
				digital_IO_state.io_ign_btn.diag_spn_in = ((Config.IO_ign_state
 80016e8:	4a23      	ldr	r2, [pc, #140]	; (8001778 <GPIO_IO_check+0x654>)
 80016ea:	7c13      	ldrb	r3, [r2, #16]
 80016ec:	f361 0341 	bfi	r3, r1, #1, #1
 80016f0:	7413      	strb	r3, [r2, #16]

				HAL_GPIO_WritePin(SPK_ON_Port, SPK_ON, GPIO_PIN_RESET);   // ON
 80016f2:	2200      	movs	r2, #0
 80016f4:	2120      	movs	r1, #32
 80016f6:	4826      	ldr	r0, [pc, #152]	; (8001790 <GPIO_IO_check+0x66c>)
 80016f8:	f003 fe7c 	bl	80053f4 <HAL_GPIO_WritePin>
							vTaskDelay(500);
 80016fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001700:	f007 f8a8 	bl	8008854 <vTaskDelay>

			if(!digital_IO_state.io_ign_btn.diag_spn_in){
 8001704:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <GPIO_IO_check+0x654>)
 8001706:	7c1b      	ldrb	r3, [r3, #16]
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d126      	bne.n	8001760 <GPIO_IO_check+0x63c>
	    	if (CAN_UDS_Diagnostic_Req_Send(&message, OBD2_CMD_READ, P99_group,
 8001712:	2303      	movs	r3, #3
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	2309      	movs	r3, #9
 8001718:	2299      	movs	r2, #153	; 0x99
 800171a:	2122      	movs	r1, #34	; 0x22
 800171c:	4815      	ldr	r0, [pc, #84]	; (8001774 <GPIO_IO_check+0x650>)
 800171e:	f7ff fb57 	bl	8000dd0 <CAN_UDS_Diagnostic_Req_Send>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d018      	beq.n	800175a <GPIO_IO_check+0x636>
									        Get_Set_digital_IO_state, 3)) {

			     digital_IO_state.io_ign_btn.diag_spn_in = ((Config.IO_ign_state
 8001728:	4b11      	ldr	r3, [pc, #68]	; (8001770 <GPIO_IO_check+0x64c>)
 800172a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
										        & (1 << Diag_sos_btn_in))) >> Diag_sos_btn_in;
 800172e:	119b      	asrs	r3, r3, #6
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	b2d9      	uxtb	r1, r3
			     digital_IO_state.io_ign_btn.diag_spn_in = ((Config.IO_ign_state
 8001736:	4a10      	ldr	r2, [pc, #64]	; (8001778 <GPIO_IO_check+0x654>)
 8001738:	7c13      	ldrb	r3, [r2, #16]
 800173a:	f361 0341 	bfi	r3, r1, #1, #1
 800173e:	7413      	strb	r3, [r2, #16]

				//   uaprintf(4 , 2 , &Can_state.txbuf[0]);
				  if(digital_IO_state.io_ign_btn.diag_spn_in)
 8001740:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <GPIO_IO_check+0x654>)
 8001742:	7c1b      	ldrb	r3, [r3, #16]
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d002      	beq.n	8001754 <GPIO_IO_check+0x630>
					   res = true;
 800174e:	2301      	movs	r3, #1
 8001750:	75fb      	strb	r3, [r7, #23]
	                     	else res = false;
		    	   }
						else res = false;
			}
		//	HAL_GPIO_WritePin(SPK_ON_Port, SPK_ON, GPIO_PIN_SET);   // ON
			break;
 8001752:	e01f      	b.n	8001794 <GPIO_IO_check+0x670>
				    	 res = false;
 8001754:	2300      	movs	r3, #0
 8001756:	75fb      	strb	r3, [r7, #23]
			break;
 8001758:	e01c      	b.n	8001794 <GPIO_IO_check+0x670>
	                     	else res = false;
 800175a:	2300      	movs	r3, #0
 800175c:	75fb      	strb	r3, [r7, #23]
			break;
 800175e:	e019      	b.n	8001794 <GPIO_IO_check+0x670>
						else res = false;
 8001760:	2300      	movs	r3, #0
 8001762:	75fb      	strb	r3, [r7, #23]
			break;
 8001764:	e016      	b.n	8001794 <GPIO_IO_check+0x670>


		break;

	default:
		break;
 8001766:	bf00      	nop
 8001768:	e015      	b.n	8001796 <GPIO_IO_check+0x672>
			break;
 800176a:	bf00      	nop
 800176c:	e013      	b.n	8001796 <GPIO_IO_check+0x672>
 800176e:	bf00      	nop
 8001770:	20006d98 	.word	0x20006d98
 8001774:	2000633c 	.word	0x2000633c
 8001778:	200063d0 	.word	0x200063d0
 800177c:	40021000 	.word	0x40021000
 8001780:	20006284 	.word	0x20006284
 8001784:	20006c7c 	.word	0x20006c7c
 8001788:	20006a7c 	.word	0x20006a7c
 800178c:	20006454 	.word	0x20006454
 8001790:	40020000 	.word	0x40020000
			break;
 8001794:	bf00      	nop
	}


	if(res)
 8001796:	7dfb      	ldrb	r3, [r7, #23]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d005      	beq.n	80017a8 <GPIO_IO_check+0x684>
		memcpy(&Can_state.txbuf[0], " OK\r\n", 5);
 800179c:	2205      	movs	r2, #5
 800179e:	4909      	ldr	r1, [pc, #36]	; (80017c4 <GPIO_IO_check+0x6a0>)
 80017a0:	4809      	ldr	r0, [pc, #36]	; (80017c8 <GPIO_IO_check+0x6a4>)
 80017a2:	f009 fc43 	bl	800b02c <memcpy>
 80017a6:	e004      	b.n	80017b2 <GPIO_IO_check+0x68e>
	else
		memcpy(&Can_state.txbuf[0], " NO\r\n", 5);
 80017a8:	2205      	movs	r2, #5
 80017aa:	4908      	ldr	r1, [pc, #32]	; (80017cc <GPIO_IO_check+0x6a8>)
 80017ac:	4806      	ldr	r0, [pc, #24]	; (80017c8 <GPIO_IO_check+0x6a4>)
 80017ae:	f009 fc3d 	bl	800b02c <memcpy>
	//HAL_UART_Transmit(&huart3, &Can_state.txbuf[0], 5, 100);
	ConsoleWrite(&Can_state.txbuf[0] , 5);
 80017b2:	2105      	movs	r1, #5
 80017b4:	4804      	ldr	r0, [pc, #16]	; (80017c8 <GPIO_IO_check+0x6a4>)
 80017b6:	f7ff fab5 	bl	8000d24 <ConsoleWrite>


	return res;
 80017ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	0800b23c 	.word	0x0800b23c
 80017c8:	200062b9 	.word	0x200062b9
 80017cc:	0800b244 	.word	0x0800b244

080017d0 <CAN_UDS_Diagnostic_IO_test>:

    }



bool CAN_UDS_Diagnostic_IO_test(uint8_t single, uint8_t event, bool positive) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af02      	add	r7, sp, #8
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
 80017da:	460b      	mov	r3, r1
 80017dc:	71bb      	strb	r3, [r7, #6]
 80017de:	4613      	mov	r3, r2
 80017e0:	717b      	strb	r3, [r7, #5]

	if(single && positive)
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00d      	beq.n	8001804 <CAN_UDS_Diagnostic_IO_test+0x34>
 80017e8:	797b      	ldrb	r3, [r7, #5]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d00a      	beq.n	8001804 <CAN_UDS_Diagnostic_IO_test+0x34>

		digital_IO_state.Byte_status_IO |= (0x1U << event);
 80017ee:	4b24      	ldr	r3, [pc, #144]	; (8001880 <CAN_UDS_Diagnostic_IO_test+0xb0>)
 80017f0:	7a1a      	ldrb	r2, [r3, #8]
 80017f2:	79bb      	ldrb	r3, [r7, #6]
 80017f4:	2101      	movs	r1, #1
 80017f6:	fa01 f303 	lsl.w	r3, r1, r3
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	4313      	orrs	r3, r2
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	4b1f      	ldr	r3, [pc, #124]	; (8001880 <CAN_UDS_Diagnostic_IO_test+0xb0>)
 8001802:	721a      	strb	r2, [r3, #8]

	if(single && !positive)
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d014      	beq.n	8001834 <CAN_UDS_Diagnostic_IO_test+0x64>
 800180a:	797b      	ldrb	r3, [r7, #5]
 800180c:	f083 0301 	eor.w	r3, r3, #1
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00e      	beq.n	8001834 <CAN_UDS_Diagnostic_IO_test+0x64>

			digital_IO_state.Byte_status_IO &= ~(1 << event);;
 8001816:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <CAN_UDS_Diagnostic_IO_test+0xb0>)
 8001818:	7a1b      	ldrb	r3, [r3, #8]
 800181a:	b25a      	sxtb	r2, r3
 800181c:	79bb      	ldrb	r3, [r7, #6]
 800181e:	2101      	movs	r1, #1
 8001820:	fa01 f303 	lsl.w	r3, r1, r3
 8001824:	b25b      	sxtb	r3, r3
 8001826:	43db      	mvns	r3, r3
 8001828:	b25b      	sxtb	r3, r3
 800182a:	4013      	ands	r3, r2
 800182c:	b25b      	sxtb	r3, r3
 800182e:	b2da      	uxtb	r2, r3
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <CAN_UDS_Diagnostic_IO_test+0xb0>)
 8001832:	721a      	strb	r2, [r3, #8]


	if (CAN_UDS_Diagnostic_Req_Send(&message, OBD2_CMD_WRITE, P99_group,
 8001834:	2304      	movs	r3, #4
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2309      	movs	r3, #9
 800183a:	2299      	movs	r2, #153	; 0x99
 800183c:	212e      	movs	r1, #46	; 0x2e
 800183e:	4811      	ldr	r0, [pc, #68]	; (8001884 <CAN_UDS_Diagnostic_IO_test+0xb4>)
 8001840:	f7ff fac6 	bl	8000dd0 <CAN_UDS_Diagnostic_Req_Send>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d014      	beq.n	8001874 <CAN_UDS_Diagnostic_IO_test+0xa4>
	        Get_Set_digital_IO_state, 4))   // 2e
	        {
		  if(Can_state.version == AVT04)
 800184a:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <CAN_UDS_Diagnostic_IO_test+0xb8>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d104      	bne.n	800185c <CAN_UDS_Diagnostic_IO_test+0x8c>
			  vTaskDelay(1000);
 8001852:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001856:	f006 fffd 	bl	8008854 <vTaskDelay>
 800185a:	e003      	b.n	8001864 <CAN_UDS_Diagnostic_IO_test+0x94>
		 else
			 vTaskDelay(300);
 800185c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001860:	f006 fff8 	bl	8008854 <vTaskDelay>
		if (CAN_UDS_Diagnostic_Req_Send(&message, OBD2_CMD_READ, P99_group,
 8001864:	2303      	movs	r3, #3
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2309      	movs	r3, #9
 800186a:	2299      	movs	r2, #153	; 0x99
 800186c:	2122      	movs	r1, #34	; 0x22
 800186e:	4805      	ldr	r0, [pc, #20]	; (8001884 <CAN_UDS_Diagnostic_IO_test+0xb4>)
 8001870:	f7ff faae 	bl	8000dd0 <CAN_UDS_Diagnostic_Req_Send>
		        Get_Set_digital_IO_state, 3));

	}

	return 0;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	200063d0 	.word	0x200063d0
 8001884:	2000633c 	.word	0x2000633c
 8001888:	20006284 	.word	0x20006284

0800188c <CAN_UDS_Set_IO_test>:


bool CAN_UDS_Set_IO_test(uint8_t single, uint8_t event, bool positive) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af02      	add	r7, sp, #8
 8001892:	4603      	mov	r3, r0
 8001894:	71fb      	strb	r3, [r7, #7]
 8001896:	460b      	mov	r3, r1
 8001898:	71bb      	strb	r3, [r7, #6]
 800189a:	4613      	mov	r3, r2
 800189c:	717b      	strb	r3, [r7, #5]

	if(single && positive)
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d00d      	beq.n	80018c0 <CAN_UDS_Set_IO_test+0x34>
 80018a4:	797b      	ldrb	r3, [r7, #5]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00a      	beq.n	80018c0 <CAN_UDS_Set_IO_test+0x34>

		digital_IO_state.Byte_status_IO |= (0x1U << event);
 80018aa:	4b1c      	ldr	r3, [pc, #112]	; (800191c <CAN_UDS_Set_IO_test+0x90>)
 80018ac:	7a1a      	ldrb	r2, [r3, #8]
 80018ae:	79bb      	ldrb	r3, [r7, #6]
 80018b0:	2101      	movs	r1, #1
 80018b2:	fa01 f303 	lsl.w	r3, r1, r3
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	4313      	orrs	r3, r2
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	4b17      	ldr	r3, [pc, #92]	; (800191c <CAN_UDS_Set_IO_test+0x90>)
 80018be:	721a      	strb	r2, [r3, #8]

	if(single && !positive)
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d015      	beq.n	80018f2 <CAN_UDS_Set_IO_test+0x66>
 80018c6:	797b      	ldrb	r3, [r7, #5]
 80018c8:	f083 0301 	eor.w	r3, r3, #1
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00f      	beq.n	80018f2 <CAN_UDS_Set_IO_test+0x66>

			digital_IO_state.Byte_status_IO &= ~(1 << event);
 80018d2:	4b12      	ldr	r3, [pc, #72]	; (800191c <CAN_UDS_Set_IO_test+0x90>)
 80018d4:	7a1b      	ldrb	r3, [r3, #8]
 80018d6:	b25a      	sxtb	r2, r3
 80018d8:	79bb      	ldrb	r3, [r7, #6]
 80018da:	2101      	movs	r1, #1
 80018dc:	fa01 f303 	lsl.w	r3, r1, r3
 80018e0:	b25b      	sxtb	r3, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	b25b      	sxtb	r3, r3
 80018e6:	4013      	ands	r3, r2
 80018e8:	b25b      	sxtb	r3, r3
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	4b0b      	ldr	r3, [pc, #44]	; (800191c <CAN_UDS_Set_IO_test+0x90>)
 80018ee:	721a      	strb	r2, [r3, #8]
 80018f0:	e002      	b.n	80018f8 <CAN_UDS_Set_IO_test+0x6c>


	else

		digital_IO_state.Byte_status_IO =  event;
 80018f2:	4a0a      	ldr	r2, [pc, #40]	; (800191c <CAN_UDS_Set_IO_test+0x90>)
 80018f4:	79bb      	ldrb	r3, [r7, #6]
 80018f6:	7213      	strb	r3, [r2, #8]


	if (CAN_UDS_Diagnostic_Req_Send(&message, OBD2_CMD_WRITE, P99_group,
 80018f8:	2304      	movs	r3, #4
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	2309      	movs	r3, #9
 80018fe:	2299      	movs	r2, #153	; 0x99
 8001900:	212e      	movs	r1, #46	; 0x2e
 8001902:	4807      	ldr	r0, [pc, #28]	; (8001920 <CAN_UDS_Set_IO_test+0x94>)
 8001904:	f7ff fa64 	bl	8000dd0 <CAN_UDS_Diagnostic_Req_Send>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <CAN_UDS_Set_IO_test+0x86>
	        Get_Set_digital_IO_state, 4))   // 2e
	        {
		return true;
 800190e:	2301      	movs	r3, #1
 8001910:	e000      	b.n	8001914 <CAN_UDS_Set_IO_test+0x88>

	}

	return false;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	200063d0 	.word	0x200063d0
 8001920:	2000633c 	.word	0x2000633c

08001924 <CAN_UDS_Diagnostic_Response_Wait>:


bool CAN_UDS_Diagnostic_Response_Wait(DiagnosticResponse *resp, uint32_t cmd , uint32_t timeout) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b08a      	sub	sp, #40	; 0x28
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]


  //  status_t status;
    resp->success = false;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2200      	movs	r2, #0
 8001934:	70da      	strb	r2, [r3, #3]
    can_message_t handle = {
 8001936:	f107 0310 	add.w	r3, r7, #16
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	60da      	str	r2, [r3, #12]
 8001944:	611a      	str	r2, [r3, #16]
  					   .cs = RxHeader.ExtId,//0U,
  					   .id = RxHeader.StdId,//0x778,
 8001946:	4b26      	ldr	r3, [pc, #152]	; (80019e0 <CAN_UDS_Diagnostic_Response_Wait+0xbc>)
 8001948:	681b      	ldr	r3, [r3, #0]
    can_message_t handle = {
 800194a:	617b      	str	r3, [r7, #20]
  					   .length = RxHeader.DLC,// 8,
 800194c:	4b24      	ldr	r3, [pc, #144]	; (80019e0 <CAN_UDS_Diagnostic_Response_Wait+0xbc>)
 800194e:	691b      	ldr	r3, [r3, #16]
    can_message_t handle = {
 8001950:	b2db      	uxtb	r3, r3
 8001952:	f887 3020 	strb.w	r3, [r7, #32]
  					   .cs = RxHeader.ExtId,//0U,
 8001956:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <CAN_UDS_Diagnostic_Response_Wait+0xbc>)
 8001958:	685b      	ldr	r3, [r3, #4]
    can_message_t handle = {
 800195a:	b2db      	uxtb	r3, r3
 800195c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  					  };

    uint32_t timer_start = xTaskGetTickCount();
 8001960:	f007 f8c8 	bl	8008af4 <xTaskGetTickCount>
 8001964:	6278      	str	r0, [r7, #36]	; 0x24

	do {
		vTaskDelay(3);
 8001966:	2003      	movs	r0, #3
 8001968:	f006 ff74 	bl	8008854 <vTaskDelay>

	   if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, handle.data) == HAL_OK)
 800196c:	f107 0310 	add.w	r3, r7, #16
 8001970:	3308      	adds	r3, #8
 8001972:	4a1b      	ldr	r2, [pc, #108]	; (80019e0 <CAN_UDS_Diagnostic_Response_Wait+0xbc>)
 8001974:	2100      	movs	r1, #0
 8001976:	481b      	ldr	r0, [pc, #108]	; (80019e4 <CAN_UDS_Diagnostic_Response_Wait+0xc0>)
 8001978:	f002 ff7e 	bl	8004878 <HAL_CAN_GetRxMessage>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d120      	bne.n	80019c4 <CAN_UDS_Diagnostic_Response_Wait+0xa0>
		    {
 	  if((resp->arbitration_id == cmd))
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	429a      	cmp	r2, r3
 800198a:	d109      	bne.n	80019a0 <CAN_UDS_Diagnostic_Response_Wait+0x7c>
			  	{
			  		resp->attempts = 0;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2200      	movs	r2, #0
 8001990:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
			  		resp->success = true;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2201      	movs	r2, #1
 8001998:	70da      	strb	r2, [r3, #3]
			  		return resp->success;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	78db      	ldrb	r3, [r3, #3]
 800199e:	e01b      	b.n	80019d8 <CAN_UDS_Diagnostic_Response_Wait+0xb4>
			  				}
			  if((resp->flow == true) & (cmd == PCI_FLOW_CONTROL_FRAME)  )
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	7b5a      	ldrb	r2, [r3, #13]
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	2b30      	cmp	r3, #48	; 0x30
 80019a8:	bf0c      	ite	eq
 80019aa:	2301      	moveq	r3, #1
 80019ac:	2300      	movne	r3, #0
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	4013      	ands	r3, r2
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d005      	beq.n	80019c4 <CAN_UDS_Diagnostic_Response_Wait+0xa0>
			  {
				  resp->success = true;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2201      	movs	r2, #1
 80019bc:	70da      	strb	r2, [r3, #3]
				  return resp->success;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	78db      	ldrb	r3, [r3, #3]
 80019c2:	e009      	b.n	80019d8 <CAN_UDS_Diagnostic_Response_Wait+0xb4>

	        }



	} while ((xTaskGetTickCount() - timer_start) < timeout);
 80019c4:	f007 f896 	bl	8008af4 <xTaskGetTickCount>
 80019c8:	4602      	mov	r2, r0
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d8c8      	bhi.n	8001966 <CAN_UDS_Diagnostic_Response_Wait+0x42>

	return (resp->success);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	78db      	ldrb	r3, [r3, #3]

}
 80019d8:	4618      	mov	r0, r3
 80019da:	3728      	adds	r7, #40	; 0x28
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20006438 	.word	0x20006438
 80019e4:	20006c18 	.word	0x20006c18

080019e8 <DefaultCFGx01>:


void DefaultCFGx01(/*sys_config *cfg*/)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0

	                 TxHeader.StdId = 0x768;
 80019ec:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <DefaultCFGx01+0x60>)
 80019ee:	f44f 62ed 	mov.w	r2, #1896	; 0x768
 80019f2:	601a      	str	r2, [r3, #0]
				 	  TxHeader.ExtId = 0;
 80019f4:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <DefaultCFGx01+0x60>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	605a      	str	r2, [r3, #4]
				 	  TxHeader.RTR = CAN_RTR_DATA; //CAN_RTR_REMOTE
 80019fa:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <DefaultCFGx01+0x60>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	60da      	str	r2, [r3, #12]
				 	  TxHeader.IDE = CAN_ID_STD;   // CAN_ID_EXT
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <DefaultCFGx01+0x60>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
				 	  TxHeader.DLC = 8;
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <DefaultCFGx01+0x60>)
 8001a08:	2208      	movs	r2, #8
 8001a0a:	611a      	str	r2, [r3, #16]
				 	  TxHeader.TransmitGlobalTime = 0;
 8001a0c:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <DefaultCFGx01+0x60>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	751a      	strb	r2, [r3, #20]

				 	  RxHeader.StdId = 0x778;
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <DefaultCFGx01+0x64>)
 8001a14:	f44f 62ef 	mov.w	r2, #1912	; 0x778
 8001a18:	601a      	str	r2, [r3, #0]
				 	  RxHeader.ExtId = 0;
 8001a1a:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <DefaultCFGx01+0x64>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	605a      	str	r2, [r3, #4]
				 	  RxHeader.RTR = CAN_RTR_DATA; //CAN_RTR_REMOTE
 8001a20:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <DefaultCFGx01+0x64>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	60da      	str	r2, [r3, #12]
				 	  RxHeader.IDE = CAN_ID_STD;   // CAN_ID_EXT
 8001a26:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <DefaultCFGx01+0x64>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	609a      	str	r2, [r3, #8]
				 	  RxHeader.DLC = 8;
 8001a2c:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <DefaultCFGx01+0x64>)
 8001a2e:	2208      	movs	r2, #8
 8001a30:	611a      	str	r2, [r3, #16]
				 	  request.BS=1;
 8001a32:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <DefaultCFGx01+0x68>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	645a      	str	r2, [r3, #68]	; 0x44
				      request.STmin = 0;
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <DefaultCFGx01+0x68>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	641a      	str	r2, [r3, #64]	; 0x40




}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	20006420 	.word	0x20006420
 8001a4c:	20006438 	.word	0x20006438
 8001a50:	20006384 	.word	0x20006384

08001a54 <get_uint32>:
					*(lpDestBuf++) = (unsigned char)((ulVal >> 24) & 0xFF);
				}
			}

		 uint32_t get_uint32( const unsigned char* lpBuf, _Bool endian)
			{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	70fb      	strb	r3, [r7, #3]
			uint32_t	ulVal = 0L;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
				if (endian) // big endian
 8001a64:	78fb      	ldrb	r3, [r7, #3]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d024      	beq.n	8001ab4 <get_uint32+0x60>
				{
					ulVal |= *lpBuf;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	60fb      	str	r3, [r7, #12]
					ulVal <<= 8;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	021b      	lsls	r3, r3, #8
 8001a7a:	60fb      	str	r3, [r7, #12]
					ulVal |= *(lpBuf + 1);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]
					ulVal <<= 8;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	021b      	lsls	r3, r3, #8
 8001a8e:	60fb      	str	r3, [r7, #12]
					ulVal |= *(lpBuf + 2);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3302      	adds	r3, #2
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	461a      	mov	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	60fb      	str	r3, [r7, #12]
					ulVal <<= 8;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	021b      	lsls	r3, r3, #8
 8001aa2:	60fb      	str	r3, [r7, #12]
					ulVal |= *(lpBuf + 3);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3303      	adds	r3, #3
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	e023      	b.n	8001afc <get_uint32+0xa8>
				}
				else            // litle endian
				{
					ulVal |= *(lpBuf + 3);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3303      	adds	r3, #3
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	461a      	mov	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	60fb      	str	r3, [r7, #12]
					ulVal <<= 8;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	021b      	lsls	r3, r3, #8
 8001ac6:	60fb      	str	r3, [r7, #12]
					ulVal |= *(lpBuf + 2);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3302      	adds	r3, #2
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	60fb      	str	r3, [r7, #12]
					ulVal <<= 8;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	021b      	lsls	r3, r3, #8
 8001ada:	60fb      	str	r3, [r7, #12]
					ulVal |= *(lpBuf + 1);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	60fb      	str	r3, [r7, #12]
					ulVal <<= 8;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	021b      	lsls	r3, r3, #8
 8001aee:	60fb      	str	r3, [r7, #12]
					ulVal |= *lpBuf;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	60fb      	str	r3, [r7, #12]
				}
				return ulVal ;
 8001afc:	68fb      	ldr	r3, [r7, #12]
			}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3714      	adds	r7, #20
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <Validate_Config>:


		 bool Validate_Config(uint32_t val, uint32_t min, uint32_t max){
 8001b0a:	b480      	push	{r7}
 8001b0c:	b087      	sub	sp, #28
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	60f8      	str	r0, [r7, #12]
 8001b12:	60b9      	str	r1, [r7, #8]
 8001b14:	607a      	str	r2, [r7, #4]
			 bool res = false;
 8001b16:	2300      	movs	r3, #0
 8001b18:	75fb      	strb	r3, [r7, #23]
			res = (val < max && val > min) ? true : false ;
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d205      	bcs.n	8001b2e <Validate_Config+0x24>
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d901      	bls.n	8001b2e <Validate_Config+0x24>
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e000      	b.n	8001b30 <Validate_Config+0x26>
 8001b2e:	2300      	movs	r3, #0
 8001b30:	75fb      	strb	r3, [r7, #23]
 8001b32:	7dfb      	ldrb	r3, [r7, #23]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	75fb      	strb	r3, [r7, #23]

				 return res;
 8001b3a:	7dfb      	ldrb	r3, [r7, #23]

		 }
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	371c      	adds	r7, #28
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <Test_Audio_Rec>:

	 bool Test_Audio_Rec(uint8_t timer) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af02      	add	r7, sp, #8
 8001b4e:	4603      	mov	r3, r0
 8001b50:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(SPK_ON_Port, SPK_ON, GPIO_PIN_RESET);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2120      	movs	r1, #32
 8001b56:	4815      	ldr	r0, [pc, #84]	; (8001bac <Test_Audio_Rec+0x64>)
 8001b58:	f003 fc4c 	bl	80053f4 <HAL_GPIO_WritePin>


   	Can_state.state = Get_Microphone_Record;
 8001b5c:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <Test_Audio_Rec+0x68>)
 8001b5e:	220c      	movs	r2, #12
 8001b60:	721a      	strb	r2, [r3, #8]

	if (CAN_UDS_Diagnostic_Req_Send(&message, OBD2_CMD_ROUTINE, 0x01, 0x0, 6))
 8001b62:	2306      	movs	r3, #6
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	2300      	movs	r3, #0
 8001b68:	2201      	movs	r2, #1
 8001b6a:	2131      	movs	r1, #49	; 0x31
 8001b6c:	4811      	ldr	r0, [pc, #68]	; (8001bb4 <Test_Audio_Rec+0x6c>)
 8001b6e:	f7ff f92f 	bl	8000dd0 <CAN_UDS_Diagnostic_Req_Send>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d013      	beq.n	8001ba0 <Test_Audio_Rec+0x58>
	{
     	if (HAL_DAC_Start(&hdac, DAC_CHANNEL_1) != HAL_OK) {
 8001b78:	2100      	movs	r1, #0
 8001b7a:	480f      	ldr	r0, [pc, #60]	; (8001bb8 <Test_Audio_Rec+0x70>)
 8001b7c:	f003 f892 	bl	8004ca4 <HAL_DAC_Start>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <Test_Audio_Rec+0x42>

			Error_Handler();}
 8001b86:	f000 fead 	bl	80028e4 <Error_Handler>




		Play_Audio(timer,/* 100 + Can_state.num */100 );
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	2164      	movs	r1, #100	; 0x64
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f000 fb96 	bl	80022c0 <Play_Audio>
		// 31  !!

		HAL_DAC_Stop(&hdac, DAC_CHANNEL_1);
 8001b94:	2100      	movs	r1, #0
 8001b96:	4808      	ldr	r0, [pc, #32]	; (8001bb8 <Test_Audio_Rec+0x70>)
 8001b98:	f003 f8d6 	bl	8004d48 <HAL_DAC_Stop>

       return true;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e000      	b.n	8001ba2 <Test_Audio_Rec+0x5a>

	}

	else
        return false;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40020000 	.word	0x40020000
 8001bb0:	20006284 	.word	0x20006284
 8001bb4:	2000633c 	.word	0x2000633c
 8001bb8:	20006b64 	.word	0x20006b64

08001bbc <Test_Audio_Play>:


	 bool Test_Audio_Play(uint8_t timer) {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af02      	add	r7, sp, #8
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]


		Can_state.state = Play_Microphone_Record;
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <Test_Audio_Play+0x44>)
 8001bc8:	2211      	movs	r2, #17
 8001bca:	721a      	strb	r2, [r3, #8]
		   if (CAN_UDS_Diagnostic_Req_Send(&message, OBD2_CMD_ROUTINE, 0x01, 0x0, 5)) ///{	// 31  !!
 8001bcc:	2305      	movs	r3, #5
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	2131      	movs	r1, #49	; 0x31
 8001bd6:	480b      	ldr	r0, [pc, #44]	; (8001c04 <Test_Audio_Play+0x48>)
 8001bd8:	f7ff f8fa 	bl	8000dd0 <CAN_UDS_Diagnostic_Req_Send>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d009      	beq.n	8001bf6 <Test_Audio_Play+0x3a>
			   {

			   vTaskDelay(2300);
 8001be2:	f640 00fc 	movw	r0, #2300	; 0x8fc
 8001be6:	f006 fe35 	bl	8008854 <vTaskDelay>
			   InOutADC_Data_Fast(&hadc3, 1);
 8001bea:	2101      	movs	r1, #1
 8001bec:	4806      	ldr	r0, [pc, #24]	; (8001c08 <Test_Audio_Play+0x4c>)
 8001bee:	f7fe fdb1 	bl	8000754 <InOutADC_Data_Fast>

			   return true;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <Test_Audio_Play+0x3c>
			//   else return false;

		//}


	  return false;
 8001bf6:	2300      	movs	r3, #0
	}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20006284 	.word	0x20006284
 8001c04:	2000633c 	.word	0x2000633c
 8001c08:	20006cc4 	.word	0x20006cc4

08001c0c <Check_AVT04_Test>:

	 bool Check_AVT04_Test(){
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0

	 if( Can_state.start_test_cmd22 == false)
 8001c10:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <Check_AVT04_Test+0x2c>)
 8001c12:	78db      	ldrb	r3, [r3, #3]
 8001c14:	f083 0301 	eor.w	r3, r3, #1
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d009      	beq.n	8001c32 <Check_AVT04_Test+0x26>
	 	 	{
	 	 		Can_state.state = 0;
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <Check_AVT04_Test+0x2c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	721a      	strb	r2, [r3, #8]
	 	 		memset(&Can_state.txbuf[0] , 0 , sizeof(Can_state.txbuf));
 8001c24:	2264      	movs	r2, #100	; 0x64
 8001c26:	2100      	movs	r1, #0
 8001c28:	4804      	ldr	r0, [pc, #16]	; (8001c3c <Check_AVT04_Test+0x30>)
 8001c2a:	f009 fa0d 	bl	800b048 <memset>
	 	 		//vTaskDelay(5000);
	 	 		return false;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e000      	b.n	8001c34 <Check_AVT04_Test+0x28>

	 	 	}
	 else return true;
 8001c32:	2301      	movs	r3, #1
	 }
 8001c34:	4618      	mov	r0, r3
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20006284 	.word	0x20006284
 8001c3c:	200062b9 	.word	0x200062b9

08001c40 <HW_test>:

	 bool HW_test(void)
	 {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0

	 	for(int test = 0 ; test <= 10; test ++)
 8001c46:	2300      	movs	r3, #0
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	e021      	b.n	8001c90 <HW_test+0x50>
	 	{
	 		Power_Monitor();
 8001c4c:	f000 f82a 	bl	8001ca4 <Power_Monitor>
	 		//if(Can_state.start_test_cmd22 == false)   return false;
	 		if(Check_AVT04_Test() == true){
 8001c50:	f7ff ffdc 	bl	8001c0c <Check_AVT04_Test>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d015      	beq.n	8001c86 <HW_test+0x46>

	 		 if(!GPIO_IO_check( test, 0))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2100      	movs	r1, #0
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff fa5f 	bl	8001124 <GPIO_IO_check>
 8001c66:	4603      	mov	r3, r0
 8001c68:	f083 0301 	eor.w	r3, r3, #1
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00b      	beq.n	8001c8a <HW_test+0x4a>
	 			 Can_state.err |= ( 1 << test );
 8001c72:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <HW_test+0x60>)
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	2101      	movs	r1, #1
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	4a07      	ldr	r2, [pc, #28]	; (8001ca0 <HW_test+0x60>)
 8001c82:	61d3      	str	r3, [r2, #28]
 8001c84:	e001      	b.n	8001c8a <HW_test+0x4a>

	 		}
	 		else return false;
 8001c86:	2300      	movs	r3, #0
 8001c88:	e006      	b.n	8001c98 <HW_test+0x58>
	 	for(int test = 0 ; test <= 10; test ++)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b0a      	cmp	r3, #10
 8001c94:	ddda      	ble.n	8001c4c <HW_test+0xc>
	 	}

	       return true;
 8001c96:	2301      	movs	r3, #1
	 	}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20006284 	.word	0x20006284

08001ca4 <Power_Monitor>:



	bool  Power_Monitor(void)
	 {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
		Check_AVT04_Test();
 8001ca8:	f7ff ffb0 	bl	8001c0c <Check_AVT04_Test>



		if( (Button_read()== true) && (Can_state.power_is_on == false) )
 8001cac:	f000 f83c 	bl	8001d28 <Button_read>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d010      	beq.n	8001cd8 <Power_Monitor+0x34>
 8001cb6:	4b19      	ldr	r3, [pc, #100]	; (8001d1c <Power_Monitor+0x78>)
 8001cb8:	785b      	ldrb	r3, [r3, #1]
 8001cba:	f083 0301 	eor.w	r3, r3, #1
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d009      	beq.n	8001cd8 <Power_Monitor+0x34>

		{
			Can_state.power_is_on = true;
 8001cc4:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <Power_Monitor+0x78>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	705a      	strb	r2, [r3, #1]
			Can_state.power_up = true;
 8001cca:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <Power_Monitor+0x78>)
 8001ccc:	2201      	movs	r2, #1
 8001cce:	709a      	strb	r2, [r3, #2]
			//Can_state.state = 0;
			ConsoleWrite (&cmd_next_block[0],    sizeof(cmd_next_block) );
 8001cd0:	2111      	movs	r1, #17
 8001cd2:	4813      	ldr	r0, [pc, #76]	; (8001d20 <Power_Monitor+0x7c>)
 8001cd4:	f7ff f826 	bl	8000d24 <ConsoleWrite>

		}



		if((Button_read()== false)   && (Can_state.power_is_on == true))
 8001cd8:	f000 f826 	bl	8001d28 <Button_read>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	f083 0301 	eor.w	r3, r3, #1
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d015      	beq.n	8001d14 <Power_Monitor+0x70>
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <Power_Monitor+0x78>)
 8001cea:	785b      	ldrb	r3, [r3, #1]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d011      	beq.n	8001d14 <Power_Monitor+0x70>
				{
			 			Can_state.power_is_on = false;
 8001cf0:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <Power_Monitor+0x78>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	705a      	strb	r2, [r3, #1]
			 			Can_state.power_up = false;
 8001cf6:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <Power_Monitor+0x78>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	709a      	strb	r2, [r3, #2]
			 			Can_state.state = 0;
 8001cfc:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <Power_Monitor+0x78>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	721a      	strb	r2, [r3, #8]
			 			Can_state.start_test_cmd22 = 0;
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <Power_Monitor+0x78>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	70da      	strb	r2, [r3, #3]
			 			ConsoleWrite (&cmd_finished_block[0],    sizeof(cmd_finished_block) );
 8001d08:	2115      	movs	r1, #21
 8001d0a:	4806      	ldr	r0, [pc, #24]	; (8001d24 <Power_Monitor+0x80>)
 8001d0c:	f7ff f80a 	bl	8000d24 <ConsoleWrite>
			 			Init_Pins();
 8001d10:	f001 f8f8 	bl	8002f04 <Init_Pins>
			 		}
	 		 return Can_state.power_is_on;
 8001d14:	4b01      	ldr	r3, [pc, #4]	; (8001d1c <Power_Monitor+0x78>)
 8001d16:	785b      	ldrb	r3, [r3, #1]
	 	//	else return false;
	 }
 8001d18:	4618      	mov	r0, r3
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20006284 	.word	0x20006284
 8001d20:	2000003c 	.word	0x2000003c
 8001d24:	20000050 	.word	0x20000050

08001d28 <Button_read>:

	bool  Button_read(void)
	{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0

			if(HAL_GPIO_ReadPin(BUTTON_ISNT_ON_Port, BUTTON_ISNT_ON) == GPIO_PIN_SET)
 8001d2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d30:	4805      	ldr	r0, [pc, #20]	; (8001d48 <Button_read+0x20>)
 8001d32:	f003 fb47 	bl	80053c4 <HAL_GPIO_ReadPin>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d101      	bne.n	8001d40 <Button_read+0x18>
					 return true;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e000      	b.n	8001d42 <Button_read+0x1a>
			else
				return true;//false;
 8001d40:	2301      	movs	r3, #1


	}
 8001d42:	4618      	mov	r0, r3
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40021000 	.word	0x40021000

08001d4c <GSM_GPS_Get_Networks>:
 uint32_t GSM_GPS_Get_Networks(uint32_t timeout , uint8_t cmd)
 {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af02      	add	r7, sp, #8
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	70fb      	strb	r3, [r7, #3]
	uint32_t  timer_network_scan = 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60fb      	str	r3, [r7, #12]
	timer_network_scan = xTaskGetTickCount();
 8001d5c:	f006 feca 	bl	8008af4 <xTaskGetTickCount>
 8001d60:	60f8      	str	r0, [r7, #12]

				do {

					vTaskDelay(TIMEOUT_1s);
 8001d62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d66:	f006 fd75 	bl	8008854 <vTaskDelay>
					if(Check_AVT04_Test() == false)
 8001d6a:	f7ff ff4f 	bl	8001c0c <Check_AVT04_Test>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	f083 0301 	eor.w	r3, r3, #1
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <GSM_GPS_Get_Networks+0x32>
							   return 0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	e029      	b.n	8001dd2 <GSM_GPS_Get_Networks+0x86>
					if (CAN_UDS_Diagnostic_Req_Send(&message, OBD2_CMD_READ, P99_group,  /*Check_number_networks*/cmd,   3)) {   // 31  !!
 8001d7e:	78fb      	ldrb	r3, [r7, #3]
 8001d80:	2203      	movs	r2, #3
 8001d82:	9200      	str	r2, [sp, #0]
 8001d84:	2299      	movs	r2, #153	; 0x99
 8001d86:	2122      	movs	r1, #34	; 0x22
 8001d88:	4814      	ldr	r0, [pc, #80]	; (8001ddc <GSM_GPS_Get_Networks+0x90>)
 8001d8a:	f7ff f821 	bl	8000dd0 <CAN_UDS_Diagnostic_Req_Send>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d015      	beq.n	8001dc0 <GSM_GPS_Get_Networks+0x74>
						if ((cmd == Check_number_networks) && (MicNet.GSM_network != 0x0))
 8001d94:	78fb      	ldrb	r3, [r7, #3]
 8001d96:	2b10      	cmp	r3, #16
 8001d98:	d106      	bne.n	8001da8 <GSM_GPS_Get_Networks+0x5c>
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <GSM_GPS_Get_Networks+0x94>)
 8001d9c:	7b1b      	ldrb	r3, [r3, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d002      	beq.n	8001da8 <GSM_GPS_Get_Networks+0x5c>

								return MicNet.GSM_network;
 8001da2:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <GSM_GPS_Get_Networks+0x94>)
 8001da4:	7b1b      	ldrb	r3, [r3, #12]
 8001da6:	e014      	b.n	8001dd2 <GSM_GPS_Get_Networks+0x86>


							if((cmd == Check_GNSS_fix) && Config.GNSS_fix !=0)
 8001da8:	78fb      	ldrb	r3, [r7, #3]
 8001daa:	2b11      	cmp	r3, #17
 8001dac:	d108      	bne.n	8001dc0 <GSM_GPS_Get_Networks+0x74>
 8001dae:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <GSM_GPS_Get_Networks+0x98>)
 8001db0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <GSM_GPS_Get_Networks+0x74>
							return Config.GNSS_fix;
 8001db8:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <GSM_GPS_Get_Networks+0x98>)
 8001dba:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001dbe:	e008      	b.n	8001dd2 <GSM_GPS_Get_Networks+0x86>
					}

				} while ((xTaskGetTickCount() - timer_network_scan) < timeout);
 8001dc0:	f006 fe98 	bl	8008af4 <xTaskGetTickCount>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d8c8      	bhi.n	8001d62 <GSM_GPS_Get_Networks+0x16>
				return 0;
 8001dd0:	2300      	movs	r3, #0
 }
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	2000633c 	.word	0x2000633c
 8001de0:	20006d78 	.word	0x20006d78
 8001de4:	20006d98 	.word	0x20006d98

08001de8 <AVT_cmd_Send>:
	bool AVT_cmd_Send(uint32_t cmd)
	{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	4b51      	ldr	r3, [pc, #324]	; (8001f38 <AVT_cmd_Send+0x150>)
 8001df2:	681b      	ldr	r3, [r3, #0]
		uint32_t uOffs;
		bool res;
		memcpy(&Can_state.txbuf[0], AVT_cmd_res, sizeof(AVT_cmd_res));
 8001df4:	4a51      	ldr	r2, [pc, #324]	; (8001f3c <AVT_cmd_Send+0x154>)
 8001df6:	f8c2 3035 	str.w	r3, [r2, #53]	; 0x35
		uOffs = 3;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	613b      	str	r3, [r7, #16]
		uint32_t cmd_str= 0x30 +cmd;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	3330      	adds	r3, #48	; 0x30
 8001e02:	60fb      	str	r3, [r7, #12]
		memcpy(&Can_state.txbuf[uOffs ], &(cmd_str), 1);
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	3330      	adds	r3, #48	; 0x30
 8001e08:	4a4c      	ldr	r2, [pc, #304]	; (8001f3c <AVT_cmd_Send+0x154>)
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3305      	adds	r3, #5
 8001e0e:	7b3a      	ldrb	r2, [r7, #12]
 8001e10:	701a      	strb	r2, [r3, #0]
		uOffs += 1;
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	3301      	adds	r3, #1
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b03      	cmp	r3, #3
 8001e1c:	f200 8087 	bhi.w	8001f2e <AVT_cmd_Send+0x146>
 8001e20:	a201      	add	r2, pc, #4	; (adr r2, 8001e28 <AVT_cmd_Send+0x40>)
 8001e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e26:	bf00      	nop
 8001e28:	08001e39 	.word	0x08001e39
 8001e2c:	08001e65 	.word	0x08001e65
 8001e30:	08001e8b 	.word	0x08001e8b
 8001e34:	08001ec9 	.word	0x08001ec9
		switch (cmd)
	{
		case AVT_HW_Cmd:
		memcpy(&Config.SRN[0], &Can_state.SRN[0] , 16 );
 8001e38:	2210      	movs	r2, #16
 8001e3a:	4941      	ldr	r1, [pc, #260]	; (8001f40 <AVT_cmd_Send+0x158>)
 8001e3c:	4841      	ldr	r0, [pc, #260]	; (8001f44 <AVT_cmd_Send+0x15c>)
 8001e3e:	f009 f8f5 	bl	800b02c <memcpy>

		memcpy(&Can_state.txbuf[uOffs ], &Config, sizeof(Config));
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	3330      	adds	r3, #48	; 0x30
 8001e46:	4a3d      	ldr	r2, [pc, #244]	; (8001f3c <AVT_cmd_Send+0x154>)
 8001e48:	4413      	add	r3, r2
 8001e4a:	3305      	adds	r3, #5
 8001e4c:	2258      	movs	r2, #88	; 0x58
 8001e4e:	493e      	ldr	r1, [pc, #248]	; (8001f48 <AVT_cmd_Send+0x160>)
 8001e50:	4618      	mov	r0, r3
 8001e52:	f009 f8eb 	bl	800b02c <memcpy>
		res = ConsoleWrite (&Can_state.txbuf[0],  sizeof(Config) + 4);
 8001e56:	215c      	movs	r1, #92	; 0x5c
 8001e58:	483c      	ldr	r0, [pc, #240]	; (8001f4c <AVT_cmd_Send+0x164>)
 8001e5a:	f7fe ff63 	bl	8000d24 <ConsoleWrite>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	75fb      	strb	r3, [r7, #23]
		break;
 8001e62:	e064      	b.n	8001f2e <AVT_cmd_Send+0x146>
		case AVT_GSM_Cmd:

		memcpy(&Can_state.txbuf[uOffs], &MicNet.GSM_network, 1);
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	3330      	adds	r3, #48	; 0x30
 8001e68:	4a34      	ldr	r2, [pc, #208]	; (8001f3c <AVT_cmd_Send+0x154>)
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3305      	adds	r3, #5
 8001e6e:	4a38      	ldr	r2, [pc, #224]	; (8001f50 <AVT_cmd_Send+0x168>)
 8001e70:	7b12      	ldrb	r2, [r2, #12]
 8001e72:	701a      	strb	r2, [r3, #0]
		uOffs +=1;
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	3301      	adds	r3, #1
 8001e78:	613b      	str	r3, [r7, #16]
							//HAL_UART_Transmit(&huart3, &Can_state.txbuf[0], 4, 100);
		res =  ConsoleWrite (&Can_state.txbuf[0], uOffs);
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4833      	ldr	r0, [pc, #204]	; (8001f4c <AVT_cmd_Send+0x164>)
 8001e80:	f7fe ff50 	bl	8000d24 <ConsoleWrite>
 8001e84:	4603      	mov	r3, r0
 8001e86:	75fb      	strb	r3, [r7, #23]
				   break;
 8001e88:	e051      	b.n	8001f2e <AVT_cmd_Send+0x146>

		case AVT_GPS_Cmd:


			memcpy(&Can_state.txbuf[uOffs + 2], &Config.GNSS_fix, 1);
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	3302      	adds	r3, #2
 8001e8e:	3330      	adds	r3, #48	; 0x30
 8001e90:	4a2a      	ldr	r2, [pc, #168]	; (8001f3c <AVT_cmd_Send+0x154>)
 8001e92:	4413      	add	r3, r2
 8001e94:	3305      	adds	r3, #5
 8001e96:	4a2c      	ldr	r2, [pc, #176]	; (8001f48 <AVT_cmd_Send+0x160>)
 8001e98:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 8001e9c:	701a      	strb	r2, [r3, #0]
			memcpy(&Can_state.txbuf[uOffs + 3], &Config.Sat_num, 1);
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	3303      	adds	r3, #3
 8001ea2:	3330      	adds	r3, #48	; 0x30
 8001ea4:	4a25      	ldr	r2, [pc, #148]	; (8001f3c <AVT_cmd_Send+0x154>)
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3305      	adds	r3, #5
 8001eaa:	4a27      	ldr	r2, [pc, #156]	; (8001f48 <AVT_cmd_Send+0x160>)
 8001eac:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 8001eb0:	701a      	strb	r2, [r3, #0]
			uOffs += 4;
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	613b      	str	r3, [r7, #16]
			res =  ConsoleWrite (&Can_state.txbuf[0], uOffs);
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4823      	ldr	r0, [pc, #140]	; (8001f4c <AVT_cmd_Send+0x164>)
 8001ebe:	f7fe ff31 	bl	8000d24 <ConsoleWrite>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	75fb      	strb	r3, [r7, #23]

			   break;
 8001ec6:	e032      	b.n	8001f2e <AVT_cmd_Send+0x146>



		case  AVT_Audio_Cmd:
			  // memcpy(&Can_state.txbuf[0], "Sound", 5);
		    	 memcpy(&Can_state.txbuf[uOffs], &fft_pResult.estimate, 1);
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	3330      	adds	r3, #48	; 0x30
 8001ecc:	4a1b      	ldr	r2, [pc, #108]	; (8001f3c <AVT_cmd_Send+0x154>)
 8001ece:	4413      	add	r3, r2
 8001ed0:	3305      	adds	r3, #5
 8001ed2:	4a20      	ldr	r2, [pc, #128]	; (8001f54 <AVT_cmd_Send+0x16c>)
 8001ed4:	f892 2424 	ldrb.w	r2, [r2, #1060]	; 0x424
 8001ed8:	701a      	strb	r2, [r3, #0]
		     	 memcpy(&Can_state.txbuf[uOffs + 1], &fft_pResult.f1, 4);
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	3301      	adds	r3, #1
 8001ede:	3330      	adds	r3, #48	; 0x30
 8001ee0:	4a16      	ldr	r2, [pc, #88]	; (8001f3c <AVT_cmd_Send+0x154>)
 8001ee2:	4413      	add	r3, r2
 8001ee4:	3305      	adds	r3, #5
 8001ee6:	4a1b      	ldr	r2, [pc, #108]	; (8001f54 <AVT_cmd_Send+0x16c>)
 8001ee8:	f8d2 241c 	ldr.w	r2, [r2, #1052]	; 0x41c
 8001eec:	601a      	str	r2, [r3, #0]
		    	   uOffs += 5;
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	3305      	adds	r3, #5
 8001ef2:	613b      	str	r3, [r7, #16]

		    	 memcpy(&Can_state.txbuf[uOffs ], &fft_pResult.mute_adc, 4);
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	3330      	adds	r3, #48	; 0x30
 8001ef8:	4a10      	ldr	r2, [pc, #64]	; (8001f3c <AVT_cmd_Send+0x154>)
 8001efa:	4413      	add	r3, r2
 8001efc:	3305      	adds	r3, #5
 8001efe:	4a15      	ldr	r2, [pc, #84]	; (8001f54 <AVT_cmd_Send+0x16c>)
 8001f00:	f8d2 2428 	ldr.w	r2, [r2, #1064]	; 0x428
 8001f04:	601a      	str	r2, [r3, #0]

			   uOffs += 4;
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	3304      	adds	r3, #4
 8001f0a:	613b      	str	r3, [r7, #16]

			   memcpy(&Can_state.txbuf[uOffs ], &Config.VBat, 2);
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	3330      	adds	r3, #48	; 0x30
 8001f10:	4a0a      	ldr	r2, [pc, #40]	; (8001f3c <AVT_cmd_Send+0x154>)
 8001f12:	4413      	add	r3, r2
 8001f14:	3305      	adds	r3, #5
 8001f16:	4a0c      	ldr	r2, [pc, #48]	; (8001f48 <AVT_cmd_Send+0x160>)
 8001f18:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8001f1a:	801a      	strh	r2, [r3, #0]
			   uOffs += 2;
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	3302      	adds	r3, #2
 8001f20:	613b      	str	r3, [r7, #16]
			    ConsoleWrite (&Can_state.txbuf[0], uOffs);
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4619      	mov	r1, r3
 8001f26:	4809      	ldr	r0, [pc, #36]	; (8001f4c <AVT_cmd_Send+0x164>)
 8001f28:	f7fe fefc 	bl	8000d24 <ConsoleWrite>
			    break;
 8001f2c:	bf00      	nop

	}
		return res;
 8001f2e:	7dfb      	ldrb	r3, [r7, #23]
	}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20000068 	.word	0x20000068
 8001f3c:	20006284 	.word	0x20006284
 8001f40:	200062a9 	.word	0x200062a9
 8001f44:	20006dde 	.word	0x20006dde
 8001f48:	20006d98 	.word	0x20006d98
 8001f4c:	200062b9 	.word	0x200062b9
 8001f50:	20006d78 	.word	0x20006d78
 8001f54:	20005da4 	.word	0x20005da4

08001f58 <HAL_GPIO_EXTI_Callback>:




	void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	80fb      	strh	r3, [r7, #6]
	   if(GPIO_Pin == GPIO_PIN_13) // если прерывание поступило от ножки PA9
 8001f62:	88fb      	ldrh	r3, [r7, #6]
 8001f64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f68:	d103      	bne.n	8001f72 <HAL_GPIO_EXTI_Callback+0x1a>
	   {
			ConsoleWrite (&cmd_finished_block[0],    sizeof(cmd_finished_block) );
 8001f6a:	2115      	movs	r1, #21
 8001f6c:	4803      	ldr	r0, [pc, #12]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x24>)
 8001f6e:	f7fe fed9 	bl	8000d24 <ConsoleWrite>


	   }
	}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000050 	.word	0x20000050

08001f80 <ustrlen>:
      1353, 1449, 1546, 1645, 1745, 1845, 1946, 2047
  };


 size_t ustrlen(const char *s)
 {
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
     assert_param(s);

     //
     // Initialize the length.
     //
     len = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60fb      	str	r3, [r7, #12]

     //
     // Step throug the string looking for a zero character (marking its end).
     //
     while(s[len])
 8001f8c:	e002      	b.n	8001f94 <ustrlen+0x14>
     {
         //
         // Zero not found so move on to the next character.
         //
         len++;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	3301      	adds	r3, #1
 8001f92:	60fb      	str	r3, [r7, #12]
     while(s[len])
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	4413      	add	r3, r2
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1f6      	bne.n	8001f8e <ustrlen+0xe>
     }

     return(len);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 }
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <SearchStr>:

 char *SearchStr(char *s1, int32_t l1, char *s2) {
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b088      	sub	sp, #32
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
     char chr1, chr2;
     uint32_t l2;

     if(l1 <= 0) return 0;
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	dc01      	bgt.n	8001fc4 <SearchStr+0x16>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	e077      	b.n	80020b4 <SearchStr+0x106>
     l2 = ustrlen(s2);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7ff ffdb 	bl	8001f80 <ustrlen>
 8001fca:	6178      	str	r0, [r7, #20]
     while (l1 > 0) {
 8001fcc:	e06e      	b.n	80020ac <SearchStr+0xfe>
         chr1 = (((*s1 >= 'A') && (*s1 <= 'Z')) ? (*s1 + ('a' - 'A')) : *s1);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b40      	cmp	r3, #64	; 0x40
 8001fd4:	d908      	bls.n	8001fe8 <SearchStr+0x3a>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b5a      	cmp	r3, #90	; 0x5a
 8001fdc:	d804      	bhi.n	8001fe8 <SearchStr+0x3a>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	3320      	adds	r3, #32
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	e001      	b.n	8001fec <SearchStr+0x3e>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	74fb      	strb	r3, [r7, #19]
         chr2 = (((*s2 >= 'A') && (*s2 <= 'Z')) ? (*s2 + ('a' - 'A')) : *s2);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b40      	cmp	r3, #64	; 0x40
 8001ff4:	d908      	bls.n	8002008 <SearchStr+0x5a>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b5a      	cmp	r3, #90	; 0x5a
 8001ffc:	d804      	bhi.n	8002008 <SearchStr+0x5a>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	3320      	adds	r3, #32
 8002004:	b2db      	uxtb	r3, r3
 8002006:	e001      	b.n	800200c <SearchStr+0x5e>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	74bb      	strb	r3, [r7, #18]

         if (chr1 == chr2) {
 800200e:	7cfa      	ldrb	r2, [r7, #19]
 8002010:	7cbb      	ldrb	r3, [r7, #18]
 8002012:	429a      	cmp	r2, r3
 8002014:	d144      	bne.n	80020a0 <SearchStr+0xf2>
             uint16_t cl2 = l2;
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	83fb      	strh	r3, [r7, #30]
             char *cd2 = s2;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	61bb      	str	r3, [r7, #24]
             while ((l1 > 0) && (cl2 > 0)) {
 800201e:	e02f      	b.n	8002080 <SearchStr+0xd2>
                 chr1 = (((*s1 >= 'A') && (*s1 <= 'Z')) ? (*s1 + ('a' - 'A')) : *s1);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b40      	cmp	r3, #64	; 0x40
 8002026:	d908      	bls.n	800203a <SearchStr+0x8c>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b5a      	cmp	r3, #90	; 0x5a
 800202e:	d804      	bhi.n	800203a <SearchStr+0x8c>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	3320      	adds	r3, #32
 8002036:	b2db      	uxtb	r3, r3
 8002038:	e001      	b.n	800203e <SearchStr+0x90>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	74fb      	strb	r3, [r7, #19]
                 chr2 = (((*cd2 >= 'A') && (*cd2 <= 'Z')) ? (*cd2 + ('a' - 'A')) : *cd2);
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b40      	cmp	r3, #64	; 0x40
 8002046:	d908      	bls.n	800205a <SearchStr+0xac>
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b5a      	cmp	r3, #90	; 0x5a
 800204e:	d804      	bhi.n	800205a <SearchStr+0xac>
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	3320      	adds	r3, #32
 8002056:	b2db      	uxtb	r3, r3
 8002058:	e001      	b.n	800205e <SearchStr+0xb0>
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	74bb      	strb	r3, [r7, #18]
                 if (chr1 != chr2) break;
 8002060:	7cfa      	ldrb	r2, [r7, #19]
 8002062:	7cbb      	ldrb	r3, [r7, #18]
 8002064:	429a      	cmp	r2, r3
 8002066:	d112      	bne.n	800208e <SearchStr+0xe0>
                 ++s1;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	3301      	adds	r3, #1
 800206c:	60fb      	str	r3, [r7, #12]
                 --l1;
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	3b01      	subs	r3, #1
 8002072:	60bb      	str	r3, [r7, #8]
                 ++cd2;
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	3301      	adds	r3, #1
 8002078:	61bb      	str	r3, [r7, #24]
                 --cl2;
 800207a:	8bfb      	ldrh	r3, [r7, #30]
 800207c:	3b01      	subs	r3, #1
 800207e:	83fb      	strh	r3, [r7, #30]
             while ((l1 > 0) && (cl2 > 0)) {
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2b00      	cmp	r3, #0
 8002084:	dd04      	ble.n	8002090 <SearchStr+0xe2>
 8002086:	8bfb      	ldrh	r3, [r7, #30]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1c9      	bne.n	8002020 <SearchStr+0x72>
 800208c:	e000      	b.n	8002090 <SearchStr+0xe2>
                 if (chr1 != chr2) break;
 800208e:	bf00      	nop
             }
             if (!cl2) return (s1 - l2);
 8002090:	8bfb      	ldrh	r3, [r7, #30]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10a      	bne.n	80020ac <SearchStr+0xfe>
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	425b      	negs	r3, r3
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	4413      	add	r3, r2
 800209e:	e009      	b.n	80020b4 <SearchStr+0x106>
         } else {
             ++s1;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	3301      	adds	r3, #1
 80020a4:	60fb      	str	r3, [r7, #12]
             --l1;
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	3b01      	subs	r3, #1
 80020aa:	60bb      	str	r3, [r7, #8]
     while (l1 > 0) {
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	dc8d      	bgt.n	8001fce <SearchStr+0x20>
         }
     }
     return (0);
 80020b2:	2300      	movs	r3, #0
 }
 80020b4:	4618      	mov	r0, r3
 80020b6:	3720      	adds	r7, #32
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <Hex_Str>:

 void Hex_Str(unsigned char hex, unsigned char *str) {
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	6039      	str	r1, [r7, #0]
 80020c6:	71fb      	strb	r3, [r7, #7]
     *str++ = Hex[hex >> 4];
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	091b      	lsrs	r3, r3, #4
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	4619      	mov	r1, r3
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	1c5a      	adds	r2, r3, #1
 80020d4:	603a      	str	r2, [r7, #0]
 80020d6:	4a09      	ldr	r2, [pc, #36]	; (80020fc <Hex_Str+0x40>)
 80020d8:	5c52      	ldrb	r2, [r2, r1]
 80020da:	701a      	strb	r2, [r3, #0]
     *str++ = Hex[hex & 0xF];
 80020dc:	79fb      	ldrb	r3, [r7, #7]
 80020de:	f003 020f 	and.w	r2, r3, #15
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	1c59      	adds	r1, r3, #1
 80020e6:	6039      	str	r1, [r7, #0]
 80020e8:	4904      	ldr	r1, [pc, #16]	; (80020fc <Hex_Str+0x40>)
 80020ea:	5c8a      	ldrb	r2, [r1, r2]
 80020ec:	701a      	strb	r2, [r3, #0]
 }
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	0800b278 	.word	0x0800b278

08002100 <Print_Loading>:

 void Print_Loading()
 {
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
	 vTaskDelay(100);
 8002104:	2064      	movs	r0, #100	; 0x64
 8002106:	f006 fba5 	bl	8008854 <vTaskDelay>
	if(Can_state.version == ISNT_M_plus )
 800210a:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <Print_Loading+0x48>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d103      	bne.n	800211a <Print_Loading+0x1a>
			ConsoleWrite (&cmd_wait_start_ISNT_Mplus[0],   sizeof(cmd_wait_start_ISNT_Mplus) );
 8002112:	211b      	movs	r1, #27
 8002114:	480d      	ldr	r0, [pc, #52]	; (800214c <Print_Loading+0x4c>)
 8002116:	f7fe fe05 	bl	8000d24 <ConsoleWrite>
	if(Can_state.version == ISNT_M_min )
 800211a:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <Print_Loading+0x48>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d103      	bne.n	800212a <Print_Loading+0x2a>
		ConsoleWrite (&cmd_wait_start_ISNT_Mmin[0],   sizeof(cmd_wait_start_ISNT_Mmin) );
 8002122:	211b      	movs	r1, #27
 8002124:	480a      	ldr	r0, [pc, #40]	; (8002150 <Print_Loading+0x50>)
 8002126:	f7fe fdfd 	bl	8000d24 <ConsoleWrite>
	if(Can_state.version == AVT04)
 800212a:	4b07      	ldr	r3, [pc, #28]	; (8002148 <Print_Loading+0x48>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b02      	cmp	r3, #2
 8002130:	d104      	bne.n	800213c <Print_Loading+0x3c>
	   ConsoleWrite (&cmd_wait_start_AVT04[0],   sizeof(cmd_wait_start_AVT04) );
 8002132:	2119      	movs	r1, #25
 8002134:	4807      	ldr	r0, [pc, #28]	; (8002154 <Print_Loading+0x54>)
 8002136:	f7fe fdf5 	bl	8000d24 <ConsoleWrite>
	else
		  ConsoleWrite (&cmd_wait_start_ISNT24[0],   sizeof(cmd_wait_start_ISNT24) );
 }
 800213a:	e003      	b.n	8002144 <Print_Loading+0x44>
		  ConsoleWrite (&cmd_wait_start_ISNT24[0],   sizeof(cmd_wait_start_ISNT24) );
 800213c:	211d      	movs	r1, #29
 800213e:	4806      	ldr	r0, [pc, #24]	; (8002158 <Print_Loading+0x58>)
 8002140:	f7fe fdf0 	bl	8000d24 <ConsoleWrite>
 }
 8002144:	bf00      	nop
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20006284 	.word	0x20006284
 800214c:	20000094 	.word	0x20000094
 8002150:	20000078 	.word	0x20000078
 8002154:	200000b0 	.word	0x200000b0
 8002158:	200000cc 	.word	0x200000cc

0800215c <RS232_Task>:

 void RS232_Task(void const * argument) {
 800215c:	b580      	push	{r7, lr}
 800215e:	b09e      	sub	sp, #120	; 0x78
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 	//request.succes = true;

   uint8_t rxbuf[100];

   char *str , str_s;
   uint8_t offs = 0x7;
 8002164:	2307      	movs	r3, #7
 8002166:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
   HAL_UART_Receive_IT(&huart3, &rxbuf[0], 5);
 800216a:	f107 0308 	add.w	r3, r7, #8
 800216e:	2205      	movs	r2, #5
 8002170:	4619      	mov	r1, r3
 8002172:	484c      	ldr	r0, [pc, #304]	; (80022a4 <RS232_Task+0x148>)
 8002174:	f004 fa3b 	bl	80065ee <HAL_UART_Receive_IT>

   cons.gate_audio = xSemaphoreCreateRecursiveMutex();
 8002178:	2004      	movs	r0, #4
 800217a:	f005 fc8e 	bl	8007a9a <xQueueCreateMutex>
 800217e:	4603      	mov	r3, r0
 8002180:	4a49      	ldr	r2, [pc, #292]	; (80022a8 <RS232_Task+0x14c>)
 8002182:	6053      	str	r3, [r2, #4]

 	for (;;) {


 		if(!Can_state.test_audio)
 8002184:	4b49      	ldr	r3, [pc, #292]	; (80022ac <RS232_Task+0x150>)
 8002186:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800218a:	f083 0301 	eor.w	r3, r3, #1
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d006      	beq.n	80021a2 <RS232_Task+0x46>
 		 xSemaphoreTake(cons.gate_audio, portMAX_DELAY);
 8002194:	4b44      	ldr	r3, [pc, #272]	; (80022a8 <RS232_Task+0x14c>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f04f 31ff 	mov.w	r1, #4294967295
 800219c:	4618      	mov	r0, r3
 800219e:	f005 ff0f 	bl	8007fc0 <xQueueSemaphoreTake>
 	//	{
                memset(rxbuf, 0 , sizeof(rxbuf));
 80021a2:	f107 0308 	add.w	r3, r7, #8
 80021a6:	2264      	movs	r2, #100	; 0x64
 80021a8:	2100      	movs	r1, #0
 80021aa:	4618      	mov	r0, r3
 80021ac:	f008 ff4c 	bl	800b048 <memset>


 			     HAL_UART_Receive(&huart3, &rxbuf[0], 10, 300);
 80021b0:	f107 0108 	add.w	r1, r7, #8
 80021b4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80021b8:	220a      	movs	r2, #10
 80021ba:	483a      	ldr	r0, [pc, #232]	; (80022a4 <RS232_Task+0x148>)
 80021bc:	f004 f975 	bl	80064aa <HAL_UART_Receive>


 		         str = strstr((char *)rxbuf, cmd_vcp_start);
 80021c0:	f107 0308 	add.w	r3, r7, #8
 80021c4:	493a      	ldr	r1, [pc, #232]	; (80022b0 <RS232_Task+0x154>)
 80021c6:	4618      	mov	r0, r3
 80021c8:	f008 ffb0 	bl	800b12c <strstr>
 80021cc:	6738      	str	r0, [r7, #112]	; 0x70
 				if (str) {
 80021ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d040      	beq.n	8002256 <RS232_Task+0xfa>

 					 Can_state.version = *(str + offs) - 0x30;
 80021d4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80021d8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80021da:	4413      	add	r3, r2
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	3b30      	subs	r3, #48	; 0x30
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	4b32      	ldr	r3, [pc, #200]	; (80022ac <RS232_Task+0x150>)
 80021e4:	701a      	strb	r2, [r3, #0]
 					if(Can_state.version > ISNT_24)  Can_state.version = ISNT_M_plus;
 80021e6:	4b31      	ldr	r3, [pc, #196]	; (80022ac <RS232_Task+0x150>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b03      	cmp	r3, #3
 80021ec:	d902      	bls.n	80021f4 <RS232_Task+0x98>
 80021ee:	4b2f      	ldr	r3, [pc, #188]	; (80022ac <RS232_Task+0x150>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	701a      	strb	r2, [r3, #0]
 					Can_state.start_test_cmd22 = false;
 80021f4:	4b2d      	ldr	r3, [pc, #180]	; (80022ac <RS232_Task+0x150>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	70da      	strb	r2, [r3, #3]
 					Can_state.state = Start_Test;
 80021fa:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <RS232_Task+0x150>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	721a      	strb	r2, [r3, #8]
 				    Can_state.err  = 0;
 8002200:	4b2a      	ldr	r3, [pc, #168]	; (80022ac <RS232_Task+0x150>)
 8002202:	2200      	movs	r2, #0
 8002204:	61da      	str	r2, [r3, #28]



 		  		   	memset(&Config, 0,sizeof(Config));
 8002206:	2258      	movs	r2, #88	; 0x58
 8002208:	2100      	movs	r1, #0
 800220a:	482a      	ldr	r0, [pc, #168]	; (80022b4 <RS232_Task+0x158>)
 800220c:	f008 ff1c 	bl	800b048 <memset>
 					memset(Can_state.txbuf , 0 , sizeof(Can_state.txbuf));
 8002210:	2264      	movs	r2, #100	; 0x64
 8002212:	2100      	movs	r1, #0
 8002214:	4828      	ldr	r0, [pc, #160]	; (80022b8 <RS232_Task+0x15c>)
 8002216:	f008 ff17 	bl	800b048 <memset>
 					vTaskDelay(TIMEOUT_1s);
 800221a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800221e:	f006 fb19 	bl	8008854 <vTaskDelay>
 					Init_Pins();
 8002222:	f000 fe6f 	bl	8002f04 <Init_Pins>
 				//	vTaskDelay(TIMEOUT_1s);
 					vTaskDelay(50);
 8002226:	2032      	movs	r0, #50	; 0x32
 8002228:	f006 fb14 	bl	8008854 <vTaskDelay>
 					  Print_Loading();
 800222c:	f7ff ff68 	bl	8002100 <Print_Loading>
 					  memset(rxbuf, 0 , sizeof(rxbuf));
 8002230:	f107 0308 	add.w	r3, r7, #8
 8002234:	2264      	movs	r2, #100	; 0x64
 8002236:	2100      	movs	r1, #0
 8002238:	4618      	mov	r0, r3
 800223a:	f008 ff05 	bl	800b048 <memset>
        			vTaskDelay(50);
 800223e:	2032      	movs	r0, #50	; 0x32
 8002240:	f006 fb08 	bl	8008854 <vTaskDelay>
        			Can_state.start_test_cmd22 = true;
 8002244:	4b19      	ldr	r3, [pc, #100]	; (80022ac <RS232_Task+0x150>)
 8002246:	2201      	movs	r2, #1
 8002248:	70da      	strb	r2, [r3, #3]
        		 	Can_state.state = Start_Test;
 800224a:	4b18      	ldr	r3, [pc, #96]	; (80022ac <RS232_Task+0x150>)
 800224c:	2200      	movs	r2, #0
 800224e:	721a      	strb	r2, [r3, #8]
        		 	Can_state.err  = 0;
 8002250:	4b16      	ldr	r3, [pc, #88]	; (80022ac <RS232_Task+0x150>)
 8002252:	2200      	movs	r2, #0
 8002254:	61da      	str	r2, [r3, #28]

				}
 				str_s = SearchStr((char*) rxbuf, 1, cmd_end_test);
 8002256:	f107 0308 	add.w	r3, r7, #8
 800225a:	4a18      	ldr	r2, [pc, #96]	; (80022bc <RS232_Task+0x160>)
 800225c:	2101      	movs	r1, #1
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff fea5 	bl	8001fae <SearchStr>
 8002264:	4603      	mov	r3, r0
 8002266:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 				 		if (str_s) {
 800226a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00d      	beq.n	800228e <RS232_Task+0x132>

 				  	Can_state.start_test_cmd22 = false;
 8002272:	4b0e      	ldr	r3, [pc, #56]	; (80022ac <RS232_Task+0x150>)
 8002274:	2200      	movs	r2, #0
 8002276:	70da      	strb	r2, [r3, #3]
 				//	 vTaskDelay(500);
 			     	 Can_state.state = Start_Test ;
 8002278:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <RS232_Task+0x150>)
 800227a:	2200      	movs	r2, #0
 800227c:	721a      	strb	r2, [r3, #8]
 				     Can_state.err  = 0;
 800227e:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <RS232_Task+0x150>)
 8002280:	2200      	movs	r2, #0
 8002282:	61da      	str	r2, [r3, #28]
 				     memset(&Can_state.txbuf[0] , 0 , sizeof(Can_state.txbuf));
 8002284:	2264      	movs	r2, #100	; 0x64
 8002286:	2100      	movs	r1, #0
 8002288:	480b      	ldr	r0, [pc, #44]	; (80022b8 <RS232_Task+0x15c>)
 800228a:	f008 fedd 	bl	800b048 <memset>

 				 						}

 	      xSemaphoreGive(cons.gate_audio);
 800228e:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <RS232_Task+0x14c>)
 8002290:	6858      	ldr	r0, [r3, #4]
 8002292:	2300      	movs	r3, #0
 8002294:	2200      	movs	r2, #0
 8002296:	2100      	movs	r1, #0
 8002298:	f005 fc18 	bl	8007acc <xQueueGenericSend>
 				vTaskDelay(50);
 800229c:	2032      	movs	r0, #50	; 0x32
 800229e:	f006 fad9 	bl	8008854 <vTaskDelay>
 		if(!Can_state.test_audio)
 80022a2:	e76f      	b.n	8002184 <RS232_Task+0x28>
 80022a4:	2000652c 	.word	0x2000652c
 80022a8:	20006510 	.word	0x20006510
 80022ac:	20006284 	.word	0x20006284
 80022b0:	2000006c 	.word	0x2000006c
 80022b4:	20006d98 	.word	0x20006d98
 80022b8:	200062b9 	.word	0x200062b9
 80022bc:	20000074 	.word	0x20000074

080022c0 <Play_Audio>:

 	}


 void  Play_Audio(uint32_t sec , uint32_t freq)
    {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
	  int wave = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
	  uint32_t amp;
	  int audio_routine_scan = xTaskGetTickCount();
 80022ce:	f006 fc11 	bl	8008af4 <xTaskGetTickCount>
 80022d2:	4603      	mov	r3, r0
 80022d4:	60bb      	str	r3, [r7, #8]
	  xSemaphoreTake(cons.gate_audio, portMAX_DELAY);
 80022d6:	4b27      	ldr	r3, [pc, #156]	; (8002374 <Play_Audio+0xb4>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f04f 31ff 	mov.w	r1, #4294967295
 80022de:	4618      	mov	r0, r3
 80022e0:	f005 fe6e 	bl	8007fc0 <xQueueSemaphoreTake>

	  Can_state.t1 =0;
 80022e4:	4b24      	ldr	r3, [pc, #144]	; (8002378 <Play_Audio+0xb8>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	611a      	str	r2, [r3, #16]
	  timer1_ch =0;
 80022ea:	4b24      	ldr	r3, [pc, #144]	; (800237c <Play_Audio+0xbc>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]

	 				do {

	 					for(wave = 0 ; wave < 128 ; wave++){
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	e023      	b.n	800233e <Play_Audio+0x7e>
	 					  if(Can_state.version == AVT04)
 80022f6:	4b20      	ldr	r3, [pc, #128]	; (8002378 <Play_Audio+0xb8>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d106      	bne.n	800230c <Play_Audio+0x4c>
	 						  amp = (uint32_t)(Wave_LUT[wave] / AVT04_AUDIO_COEFF)  ;
 80022fe:	4a20      	ldr	r2, [pc, #128]	; (8002380 <Play_Audio+0xc0>)
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002306:	095b      	lsrs	r3, r3, #5
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	e005      	b.n	8002318 <Play_Audio+0x58>
	 						else
	 							amp = (uint32_t)(Wave_LUT[wave] / ISNT_AUDIO_COEFF)  ; /////////////// 16
 800230c:	4a1c      	ldr	r2, [pc, #112]	; (8002380 <Play_Audio+0xc0>)
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002314:	091b      	lsrs	r3, r3, #4
 8002316:	613b      	str	r3, [r7, #16]
	 						HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, amp );
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	2200      	movs	r2, #0
 800231c:	2100      	movs	r1, #0
 800231e:	4819      	ldr	r0, [pc, #100]	; (8002384 <Play_Audio+0xc4>)
 8002320:	f002 fd89 	bl	8004e36 <HAL_DAC_SetValue>

	 					   for(int nop = 0 ; nop < freq; nop++);
 8002324:	2300      	movs	r3, #0
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	e002      	b.n	8002330 <Play_Audio+0x70>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	3301      	adds	r3, #1
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d8f8      	bhi.n	800232a <Play_Audio+0x6a>
	 					for(wave = 0 ; wave < 128 ; wave++){
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	3301      	adds	r3, #1
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	2b7f      	cmp	r3, #127	; 0x7f
 8002342:	ddd8      	ble.n	80022f6 <Play_Audio+0x36>

	 				          	}
	 				}while ((xTaskGetTickCount() - audio_routine_scan) < sec *1000);
 8002344:	f006 fbd6 	bl	8008af4 <xTaskGetTickCount>
 8002348:	4602      	mov	r2, r0
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	1ad2      	subs	r2, r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002354:	fb01 f303 	mul.w	r3, r1, r3
 8002358:	429a      	cmp	r2, r3
 800235a:	d3c9      	bcc.n	80022f0 <Play_Audio+0x30>
	  xSemaphoreGive(cons.gate_audio);
 800235c:	4b05      	ldr	r3, [pc, #20]	; (8002374 <Play_Audio+0xb4>)
 800235e:	6858      	ldr	r0, [r3, #4]
 8002360:	2300      	movs	r3, #0
 8002362:	2200      	movs	r2, #0
 8002364:	2100      	movs	r1, #0
 8002366:	f005 fbb1 	bl	8007acc <xQueueGenericSend>
    }
 800236a:	bf00      	nop
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20006510 	.word	0x20006510
 8002378:	20006284 	.word	0x20006284
 800237c:	20006d58 	.word	0x20006d58
 8002380:	200000ec 	.word	0x200000ec
 8002384:	20006b64 	.word	0x20006b64

08002388 <InOutADC_Data>:


   uint32_t   InOutADC_Data(ADC_HandleTypeDef *hadc, uint32_t num)
      {
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]

	if ((num == 2) && (hadc->Instance == ADC2) ) {
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	2b02      	cmp	r3, #2
 8002396:	d126      	bne.n	80023e6 <InOutADC_Data+0x5e>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a20      	ldr	r2, [pc, #128]	; (8002420 <InOutADC_Data+0x98>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d121      	bne.n	80023e6 <InOutADC_Data+0x5e>

		MX_ADC2_Init(ADC_CHANNEL_13);
 80023a2:	200d      	movs	r0, #13
 80023a4:	f000 fbba 	bl	8002b1c <MX_ADC2_Init>
		vTaskDelay(100);
 80023a8:	2064      	movs	r0, #100	; 0x64
 80023aa:	f006 fa53 	bl	8008854 <vTaskDelay>
		HAL_ADC_Start(hadc);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f001 fb66 	bl	8003a80 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(hadc, 100);
 80023b4:	2164      	movs	r1, #100	; 0x64
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f001 fc67 	bl	8003c8a <HAL_ADC_PollForConversion>
		//  ADC_chan.aInputs[1] = HAL_ADC_GetValue(hadc);
		ADC_chan.aInputs[num] = HAL_ADC_GetValue(hadc);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f001 fcef 	bl	8003da0 <HAL_ADC_GetValue>
 80023c2:	4602      	mov	r2, r0
 80023c4:	4917      	ldr	r1, [pc, #92]	; (8002424 <InOutADC_Data+0x9c>)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	3302      	adds	r3, #2
 80023ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		fft_pResult.mute_adc = ADC_chan.aInputs[2];
 80023ce:	4b15      	ldr	r3, [pc, #84]	; (8002424 <InOutADC_Data+0x9c>)
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	4a15      	ldr	r2, [pc, #84]	; (8002428 <InOutADC_Data+0xa0>)
 80023d4:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
		HAL_ADC_Stop(hadc);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f001 fc23 	bl	8003c24 <HAL_ADC_Stop>

		MX_ADC2_Init(ADC_CHANNEL_10);
 80023de:	200a      	movs	r0, #10
 80023e0:	f000 fb9c 	bl	8002b1c <MX_ADC2_Init>
 80023e4:	e012      	b.n	800240c <InOutADC_Data+0x84>
	} else

	{
		HAL_ADC_Start(hadc);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f001 fb4a 	bl	8003a80 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(hadc, 100);
 80023ec:	2164      	movs	r1, #100	; 0x64
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f001 fc4b 	bl	8003c8a <HAL_ADC_PollForConversion>
		ADC_chan.aInputs[num] = HAL_ADC_GetValue(hadc);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f001 fcd3 	bl	8003da0 <HAL_ADC_GetValue>
 80023fa:	4602      	mov	r2, r0
 80023fc:	4909      	ldr	r1, [pc, #36]	; (8002424 <InOutADC_Data+0x9c>)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	3302      	adds	r3, #2
 8002402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		HAL_ADC_Stop(hadc);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f001 fc0c 	bl	8003c24 <HAL_ADC_Stop>
	}
	return ADC_chan.aInputs[num];
 800240c:	4a05      	ldr	r2, [pc, #20]	; (8002424 <InOutADC_Data+0x9c>)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	3302      	adds	r3, #2
 8002412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

      }
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40012100 	.word	0x40012100
 8002424:	20006454 	.word	0x20006454
 8002428:	20005da4 	.word	0x20005da4

0800242c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8002430:	f001 fa7c 	bl	800392c <HAL_Init>


  /* USER CODE BEGIN Init */
  SystemClock_Config();
 8002434:	f000 f83c 	bl	80024b0 <SystemClock_Config>
  /* USER CODE END Init */
  MX_GPIO_Init();
 8002438:	f000 f94a 	bl	80026d0 <MX_GPIO_Init>
  /* Configure the system clock */
   MX_CAN1_Init();
 800243c:	f000 f8cc 	bl	80025d8 <MX_CAN1_Init>

    MX_USART3_UART_Init();
 8002440:	f000 f91c 	bl	800267c <MX_USART3_UART_Init>
//  MX_USB_OTG_FS_PCD_Init();
  /* USER CODE BEGIN 2 */



    MX_ADC1_Init();
 8002444:	f000 fb18 	bl	8002a78 <MX_ADC1_Init>
    MX_ADC2_Init(ADC_CHANNEL_10);
 8002448:	200a      	movs	r0, #10
 800244a:	f000 fb67 	bl	8002b1c <MX_ADC2_Init>
    MX_ADC3_Init(ADC_CHANNEL_15);
 800244e:	200f      	movs	r0, #15
 8002450:	f000 fbb8 	bl	8002bc4 <MX_ADC3_Init>
    hdac.Instance = DAC;  //   TIM6_Config();
 8002454:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <main+0x64>)
 8002456:	4a0f      	ldr	r2, [pc, #60]	; (8002494 <main+0x68>)
 8002458:	601a      	str	r2, [r3, #0]

   DefaultCFGx01(/*sys_config *cfg*/);
 800245a:	f7ff fac5 	bl	80019e8 <DefaultCFGx01>


	Init_Pins();
 800245e:	f000 fd51 	bl	8002f04 <Init_Pins>
  // HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);

   MX_DAC_Init();
 8002462:	f000 f88f 	bl	8002584 <MX_DAC_Init>
  /* USER CODE END 2 */
  RS232TaskHandle = osThreadNew(RS232_Task, NULL, &RS232Task_attributes);
 8002466:	4a0c      	ldr	r2, [pc, #48]	; (8002498 <main+0x6c>)
 8002468:	2100      	movs	r1, #0
 800246a:	480c      	ldr	r0, [pc, #48]	; (800249c <main+0x70>)
 800246c:	f005 f844 	bl	80074f8 <osThreadNew>
 8002470:	4603      	mov	r3, r0
 8002472:	4a0b      	ldr	r2, [pc, #44]	; (80024a0 <main+0x74>)
 8002474:	6013      	str	r3, [r2, #0]
  CanTaskHandle = osThreadNew(Can_Task, NULL, &CanTask_attributes);
 8002476:	4a0b      	ldr	r2, [pc, #44]	; (80024a4 <main+0x78>)
 8002478:	2100      	movs	r1, #0
 800247a:	480b      	ldr	r0, [pc, #44]	; (80024a8 <main+0x7c>)
 800247c:	f005 f83c 	bl	80074f8 <osThreadNew>
 8002480:	4603      	mov	r3, r0
 8002482:	4a0a      	ldr	r2, [pc, #40]	; (80024ac <main+0x80>)
 8002484:	6013      	str	r3, [r2, #0]




  /* Init scheduler */
  osKernelInitialize();
 8002486:	f004 ffed 	bl	8007464 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800248a:	f005 f80f 	bl	80074ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800248e:	e7fe      	b.n	800248e <main+0x62>
 8002490:	20006b64 	.word	0x20006b64
 8002494:	40007400 	.word	0x40007400
 8002498:	0800b2b0 	.word	0x0800b2b0
 800249c:	0800215d 	.word	0x0800215d
 80024a0:	20006c78 	.word	0x20006c78
 80024a4:	0800b28c 	.word	0x0800b28c
 80024a8:	080007ed 	.word	0x080007ed
 80024ac:	20006528 	.word	0x20006528

080024b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b094      	sub	sp, #80	; 0x50
 80024b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024b6:	f107 0320 	add.w	r3, r7, #32
 80024ba:	2230      	movs	r2, #48	; 0x30
 80024bc:	2100      	movs	r1, #0
 80024be:	4618      	mov	r0, r3
 80024c0:	f008 fdc2 	bl	800b048 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024c4:	f107 030c 	add.w	r3, r7, #12
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	60da      	str	r2, [r3, #12]
 80024d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024d4:	2300      	movs	r3, #0
 80024d6:	60bb      	str	r3, [r7, #8]
 80024d8:	4b28      	ldr	r3, [pc, #160]	; (800257c <SystemClock_Config+0xcc>)
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	4a27      	ldr	r2, [pc, #156]	; (800257c <SystemClock_Config+0xcc>)
 80024de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e2:	6413      	str	r3, [r2, #64]	; 0x40
 80024e4:	4b25      	ldr	r3, [pc, #148]	; (800257c <SystemClock_Config+0xcc>)
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024f0:	2300      	movs	r3, #0
 80024f2:	607b      	str	r3, [r7, #4]
 80024f4:	4b22      	ldr	r3, [pc, #136]	; (8002580 <SystemClock_Config+0xd0>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a21      	ldr	r2, [pc, #132]	; (8002580 <SystemClock_Config+0xd0>)
 80024fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024fe:	6013      	str	r3, [r2, #0]
 8002500:	4b1f      	ldr	r3, [pc, #124]	; (8002580 <SystemClock_Config+0xd0>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002508:	607b      	str	r3, [r7, #4]
 800250a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800250c:	2301      	movs	r3, #1
 800250e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002510:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002516:	2302      	movs	r3, #2
 8002518:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800251a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800251e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002520:	2304      	movs	r3, #4
 8002522:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002524:	23a8      	movs	r3, #168	; 0xa8
 8002526:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002528:	2302      	movs	r3, #2
 800252a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800252c:	2307      	movs	r3, #7
 800252e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002530:	f107 0320 	add.w	r3, r7, #32
 8002534:	4618      	mov	r0, r3
 8002536:	f002 ff8f 	bl	8005458 <HAL_RCC_OscConfig>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002540:	f000 f9d0 	bl	80028e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002544:	230f      	movs	r3, #15
 8002546:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002548:	2302      	movs	r3, #2
 800254a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002550:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002554:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002556:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800255a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800255c:	f107 030c 	add.w	r3, r7, #12
 8002560:	2105      	movs	r1, #5
 8002562:	4618      	mov	r0, r3
 8002564:	f003 f9f0 	bl	8005948 <HAL_RCC_ClockConfig>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800256e:	f000 f9b9 	bl	80028e4 <Error_Handler>
  }
}
 8002572:	bf00      	nop
 8002574:	3750      	adds	r7, #80	; 0x50
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40023800 	.word	0x40023800
 8002580:	40007000 	.word	0x40007000

08002584 <MX_DAC_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
 void MX_DAC_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800258a:	463b      	mov	r3, r7
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002592:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <MX_DAC_Init+0x4c>)
 8002594:	4a0f      	ldr	r2, [pc, #60]	; (80025d4 <MX_DAC_Init+0x50>)
 8002596:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002598:	480d      	ldr	r0, [pc, #52]	; (80025d0 <MX_DAC_Init+0x4c>)
 800259a:	f002 fb61 	bl	8004c60 <HAL_DAC_Init>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80025a4:	f000 f99e 	bl	80028e4 <Error_Handler>
  }

   sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80025a8:	2300      	movs	r3, #0
 80025aa:	603b      	str	r3, [r7, #0]
   sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80025ac:	2302      	movs	r3, #2
 80025ae:	607b      	str	r3, [r7, #4]
   if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80025b0:	463b      	mov	r3, r7
 80025b2:	2200      	movs	r2, #0
 80025b4:	4619      	mov	r1, r3
 80025b6:	4806      	ldr	r0, [pc, #24]	; (80025d0 <MX_DAC_Init+0x4c>)
 80025b8:	f002 fc6c 	bl	8004e94 <HAL_DAC_ConfigChannel>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_DAC_Init+0x42>
   {
     Error_Handler();
 80025c2:	f000 f98f 	bl	80028e4 <Error_Handler>
  }*/
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20006b64 	.word	0x20006b64
 80025d4:	40007400 	.word	0x40007400

080025d8 <MX_CAN1_Init>:
static void MX_CAN1_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08a      	sub	sp, #40	; 0x28
 80025dc:	af00      	add	r7, sp, #0

	  hcan1.Instance = CAN1;
 80025de:	4b25      	ldr	r3, [pc, #148]	; (8002674 <MX_CAN1_Init+0x9c>)
 80025e0:	4a25      	ldr	r2, [pc, #148]	; (8002678 <MX_CAN1_Init+0xa0>)
 80025e2:	601a      	str	r2, [r3, #0]
	  hcan1.Init.Prescaler = 7;//42 Mhz  pll/4
 80025e4:	4b23      	ldr	r3, [pc, #140]	; (8002674 <MX_CAN1_Init+0x9c>)
 80025e6:	2207      	movs	r2, #7
 80025e8:	605a      	str	r2, [r3, #4]
	  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80025ea:	4b22      	ldr	r3, [pc, #136]	; (8002674 <MX_CAN1_Init+0x9c>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	609a      	str	r2, [r3, #8]
	  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80025f0:	4b20      	ldr	r3, [pc, #128]	; (8002674 <MX_CAN1_Init+0x9c>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	60da      	str	r2, [r3, #12]
	  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;//
 80025f6:	4b1f      	ldr	r3, [pc, #124]	; (8002674 <MX_CAN1_Init+0x9c>)
 80025f8:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80025fc:	611a      	str	r2, [r3, #16]
	  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ; //CAN_BS2_2TQ;
 80025fe:	4b1d      	ldr	r3, [pc, #116]	; (8002674 <MX_CAN1_Init+0x9c>)
 8002600:	2200      	movs	r2, #0
 8002602:	615a      	str	r2, [r3, #20]


	  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002604:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <MX_CAN1_Init+0x9c>)
 8002606:	2200      	movs	r2, #0
 8002608:	761a      	strb	r2, [r3, #24]
	  hcan1.Init.AutoBusOff = DISABLE;
 800260a:	4b1a      	ldr	r3, [pc, #104]	; (8002674 <MX_CAN1_Init+0x9c>)
 800260c:	2200      	movs	r2, #0
 800260e:	765a      	strb	r2, [r3, #25]
	  hcan1.Init.AutoWakeUp = DISABLE;
 8002610:	4b18      	ldr	r3, [pc, #96]	; (8002674 <MX_CAN1_Init+0x9c>)
 8002612:	2200      	movs	r2, #0
 8002614:	769a      	strb	r2, [r3, #26]
	  hcan1.Init.AutoRetransmission = DISABLE;
 8002616:	4b17      	ldr	r3, [pc, #92]	; (8002674 <MX_CAN1_Init+0x9c>)
 8002618:	2200      	movs	r2, #0
 800261a:	76da      	strb	r2, [r3, #27]
	  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800261c:	4b15      	ldr	r3, [pc, #84]	; (8002674 <MX_CAN1_Init+0x9c>)
 800261e:	2200      	movs	r2, #0
 8002620:	771a      	strb	r2, [r3, #28]
	  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002622:	4b14      	ldr	r3, [pc, #80]	; (8002674 <MX_CAN1_Init+0x9c>)
 8002624:	2200      	movs	r2, #0
 8002626:	775a      	strb	r2, [r3, #29]
	  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002628:	4812      	ldr	r0, [pc, #72]	; (8002674 <MX_CAN1_Init+0x9c>)
 800262a:	f001 fdf5 	bl	8004218 <HAL_CAN_Init>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_CAN1_Init+0x60>
	  {
	    Error_Handler();
 8002634:	f000 f956 	bl	80028e4 <Error_Handler>
	  }
	  CAN_FilterTypeDef canFilterConfig;
	   canFilterConfig.FilterBank = 0;
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]
	   canFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800263c:	2300      	movs	r3, #0
 800263e:	61bb      	str	r3, [r7, #24]
	   canFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002640:	2301      	movs	r3, #1
 8002642:	61fb      	str	r3, [r7, #28]
	   canFilterConfig.FilterIdHigh = 0x0000;
 8002644:	2300      	movs	r3, #0
 8002646:	603b      	str	r3, [r7, #0]
	   canFilterConfig.FilterIdLow = 0x0000;
 8002648:	2300      	movs	r3, #0
 800264a:	607b      	str	r3, [r7, #4]
	   canFilterConfig.FilterMaskIdHigh = 0x0000;
 800264c:	2300      	movs	r3, #0
 800264e:	60bb      	str	r3, [r7, #8]
	   canFilterConfig.FilterMaskIdLow = 0x0000;
 8002650:	2300      	movs	r3, #0
 8002652:	60fb      	str	r3, [r7, #12]
	   canFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002654:	2300      	movs	r3, #0
 8002656:	613b      	str	r3, [r7, #16]
	   canFilterConfig.FilterActivation = ENABLE;
 8002658:	2301      	movs	r3, #1
 800265a:	623b      	str	r3, [r7, #32]
	   canFilterConfig.SlaveStartFilterBank = 14;
 800265c:	230e      	movs	r3, #14
 800265e:	627b      	str	r3, [r7, #36]	; 0x24
	   HAL_CAN_ConfigFilter(&hcan1, &canFilterConfig);
 8002660:	463b      	mov	r3, r7
 8002662:	4619      	mov	r1, r3
 8002664:	4803      	ldr	r0, [pc, #12]	; (8002674 <MX_CAN1_Init+0x9c>)
 8002666:	f001 fed3 	bl	8004410 <HAL_CAN_ConfigFilter>
}
 800266a:	bf00      	nop
 800266c:	3728      	adds	r7, #40	; 0x28
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20006c18 	.word	0x20006c18
 8002678:	40006400 	.word	0x40006400

0800267c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002680:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <MX_USART3_UART_Init+0x4c>)
 8002682:	4a12      	ldr	r2, [pc, #72]	; (80026cc <MX_USART3_UART_Init+0x50>)
 8002684:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002686:	4b10      	ldr	r3, [pc, #64]	; (80026c8 <MX_USART3_UART_Init+0x4c>)
 8002688:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800268c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800268e:	4b0e      	ldr	r3, [pc, #56]	; (80026c8 <MX_USART3_UART_Init+0x4c>)
 8002690:	2200      	movs	r2, #0
 8002692:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002694:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <MX_USART3_UART_Init+0x4c>)
 8002696:	2200      	movs	r2, #0
 8002698:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800269a:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <MX_USART3_UART_Init+0x4c>)
 800269c:	2200      	movs	r2, #0
 800269e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026a0:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <MX_USART3_UART_Init+0x4c>)
 80026a2:	220c      	movs	r2, #12
 80026a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026a6:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <MX_USART3_UART_Init+0x4c>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80026ac:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <MX_USART3_UART_Init+0x4c>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80026b2:	4805      	ldr	r0, [pc, #20]	; (80026c8 <MX_USART3_UART_Init+0x4c>)
 80026b4:	f003 fe1a 	bl	80062ec <HAL_UART_Init>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80026be:	f000 f911 	bl	80028e4 <Error_Handler>

  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	2000652c 	.word	0x2000652c
 80026cc:	40004800 	.word	0x40004800

080026d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08c      	sub	sp, #48	; 0x30
 80026d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d6:	f107 031c 	add.w	r3, r7, #28
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	605a      	str	r2, [r3, #4]
 80026e0:	609a      	str	r2, [r3, #8]
 80026e2:	60da      	str	r2, [r3, #12]
 80026e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	61bb      	str	r3, [r7, #24]
 80026ea:	4b6e      	ldr	r3, [pc, #440]	; (80028a4 <MX_GPIO_Init+0x1d4>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	4a6d      	ldr	r2, [pc, #436]	; (80028a4 <MX_GPIO_Init+0x1d4>)
 80026f0:	f043 0304 	orr.w	r3, r3, #4
 80026f4:	6313      	str	r3, [r2, #48]	; 0x30
 80026f6:	4b6b      	ldr	r3, [pc, #428]	; (80028a4 <MX_GPIO_Init+0x1d4>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	61bb      	str	r3, [r7, #24]
 8002700:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	4b67      	ldr	r3, [pc, #412]	; (80028a4 <MX_GPIO_Init+0x1d4>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	4a66      	ldr	r2, [pc, #408]	; (80028a4 <MX_GPIO_Init+0x1d4>)
 800270c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002710:	6313      	str	r3, [r2, #48]	; 0x30
 8002712:	4b64      	ldr	r3, [pc, #400]	; (80028a4 <MX_GPIO_Init+0x1d4>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	4b60      	ldr	r3, [pc, #384]	; (80028a4 <MX_GPIO_Init+0x1d4>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	4a5f      	ldr	r2, [pc, #380]	; (80028a4 <MX_GPIO_Init+0x1d4>)
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	6313      	str	r3, [r2, #48]	; 0x30
 800272e:	4b5d      	ldr	r3, [pc, #372]	; (80028a4 <MX_GPIO_Init+0x1d4>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	4b59      	ldr	r3, [pc, #356]	; (80028a4 <MX_GPIO_Init+0x1d4>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	4a58      	ldr	r2, [pc, #352]	; (80028a4 <MX_GPIO_Init+0x1d4>)
 8002744:	f043 0302 	orr.w	r3, r3, #2
 8002748:	6313      	str	r3, [r2, #48]	; 0x30
 800274a:	4b56      	ldr	r3, [pc, #344]	; (80028a4 <MX_GPIO_Init+0x1d4>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	4b52      	ldr	r3, [pc, #328]	; (80028a4 <MX_GPIO_Init+0x1d4>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	4a51      	ldr	r2, [pc, #324]	; (80028a4 <MX_GPIO_Init+0x1d4>)
 8002760:	f043 0308 	orr.w	r3, r3, #8
 8002764:	6313      	str	r3, [r2, #48]	; 0x30
 8002766:	4b4f      	ldr	r3, [pc, #316]	; (80028a4 <MX_GPIO_Init+0x1d4>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	60bb      	str	r3, [r7, #8]
 8002770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	607b      	str	r3, [r7, #4]
 8002776:	4b4b      	ldr	r3, [pc, #300]	; (80028a4 <MX_GPIO_Init+0x1d4>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	4a4a      	ldr	r2, [pc, #296]	; (80028a4 <MX_GPIO_Init+0x1d4>)
 800277c:	f043 0310 	orr.w	r3, r3, #16
 8002780:	6313      	str	r3, [r2, #48]	; 0x30
 8002782:	4b48      	ldr	r3, [pc, #288]	; (80028a4 <MX_GPIO_Init+0x1d4>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	f003 0310 	and.w	r3, r3, #16
 800278a:	607b      	str	r3, [r7, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	603b      	str	r3, [r7, #0]
 8002792:	4b44      	ldr	r3, [pc, #272]	; (80028a4 <MX_GPIO_Init+0x1d4>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	4a43      	ldr	r2, [pc, #268]	; (80028a4 <MX_GPIO_Init+0x1d4>)
 8002798:	f043 0320 	orr.w	r3, r3, #32
 800279c:	6313      	str	r3, [r2, #48]	; 0x30
 800279e:	4b41      	ldr	r3, [pc, #260]	; (80028a4 <MX_GPIO_Init+0x1d4>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	f003 0320 	and.w	r3, r3, #32
 80027a6:	603b      	str	r3, [r7, #0]
 80027a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80027aa:	2200      	movs	r2, #0
 80027ac:	f244 0181 	movw	r1, #16513	; 0x4081
 80027b0:	483d      	ldr	r0, [pc, #244]	; (80028a8 <MX_GPIO_Init+0x1d8>)
 80027b2:	f002 fe1f 	bl	80053f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA,   MIC_ON | SPK_ON, GPIO_PIN_RESET);
 80027b6:	2200      	movs	r2, #0
 80027b8:	2160      	movs	r1, #96	; 0x60
 80027ba:	483c      	ldr	r0, [pc, #240]	; (80028ac <MX_GPIO_Init+0x1dc>)
 80027bc:	f002 fe1a 	bl	80053f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD,  LOW_VOL_ON | LOW_CUR_ON, GPIO_PIN_SET);
 80027c0:	2201      	movs	r2, #1
 80027c2:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80027c6:	483a      	ldr	r0, [pc, #232]	; (80028b0 <MX_GPIO_Init+0x1e0>)
 80027c8:	f002 fe14 	bl	80053f4 <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */

  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80027cc:	f244 0381 	movw	r3, #16513	; 0x4081
 80027d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027d2:	2301      	movs	r3, #1
 80027d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80027d6:	2302      	movs	r3, #2
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027da:	2300      	movs	r3, #0
 80027dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027de:	f107 031c 	add.w	r3, r7, #28
 80027e2:	4619      	mov	r1, r3
 80027e4:	4830      	ldr	r0, [pc, #192]	; (80028a8 <MX_GPIO_Init+0x1d8>)
 80027e6:	f002 fc41 	bl	800506c <HAL_GPIO_Init>


   GPIO_InitStruct.Pin =  MIC_ON | SPK_ON;    //A5, A6 , A7
 80027ea:	2360      	movs	r3, #96	; 0x60
 80027ec:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ee:	2301      	movs	r3, #1
 80027f0:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027f2:	2301      	movs	r3, #1
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f6:	2300      	movs	r3, #0
 80027f8:	62bb      	str	r3, [r7, #40]	; 0x28
   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027fa:	f107 031c 	add.w	r3, r7, #28
 80027fe:	4619      	mov	r1, r3
 8002800:	482a      	ldr	r0, [pc, #168]	; (80028ac <MX_GPIO_Init+0x1dc>)
 8002802:	f002 fc33 	bl	800506c <HAL_GPIO_Init>


     GPIO_InitStruct.Pin = LOW_VOL_ON | LOW_CUR_ON ;    // D14 , D 15
 8002806:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800280a:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800280c:	2301      	movs	r3, #1
 800280e:	623b      	str	r3, [r7, #32]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002810:	2301      	movs	r3, #1
 8002812:	627b      	str	r3, [r7, #36]	; 0x24
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002814:	2300      	movs	r3, #0
 8002816:	62bb      	str	r3, [r7, #40]	; 0x28
      HAL_GPIO_Init(LOW_VOL_ON_Port, &GPIO_InitStruct);
 8002818:	f107 031c 	add.w	r3, r7, #28
 800281c:	4619      	mov	r1, r3
 800281e:	4824      	ldr	r0, [pc, #144]	; (80028b0 <MX_GPIO_Init+0x1e0>)
 8002820:	f002 fc24 	bl	800506c <HAL_GPIO_Init>

           GPIO_InitStruct.Pin = SOS_ON | BUT_CUR_ON ;   // PE9, PE11
 8002824:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002828:	61fb      	str	r3, [r7, #28]
         GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800282a:	2301      	movs	r3, #1
 800282c:	623b      	str	r3, [r7, #32]
         GPIO_InitStruct.Pull = GPIO_PULLUP;
 800282e:	2301      	movs	r3, #1
 8002830:	627b      	str	r3, [r7, #36]	; 0x24
         GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002832:	2300      	movs	r3, #0
 8002834:	62bb      	str	r3, [r7, #40]	; 0x28
         HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002836:	f107 031c 	add.w	r3, r7, #28
 800283a:	4619      	mov	r1, r3
 800283c:	481d      	ldr	r0, [pc, #116]	; (80028b4 <MX_GPIO_Init+0x1e4>)
 800283e:	f002 fc15 	bl	800506c <HAL_GPIO_Init>



     GPIO_InitStruct.Pin = KL15_ON |PW_ON |MUTE_CTRL;   // PF12 , PF14
 8002842:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002846:	61fb      	str	r3, [r7, #28]
     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002848:	2301      	movs	r3, #1
 800284a:	623b      	str	r3, [r7, #32]
     GPIO_InitStruct.Pull = GPIO_PULLUP;
 800284c:	2301      	movs	r3, #1
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002850:	2300      	movs	r3, #0
 8002852:	62bb      	str	r3, [r7, #40]	; 0x28
     HAL_GPIO_Init(KL15_ON_Port, &GPIO_InitStruct);
 8002854:	f107 031c 	add.w	r3, r7, #28
 8002858:	4619      	mov	r1, r3
 800285a:	4817      	ldr	r0, [pc, #92]	; (80028b8 <MX_GPIO_Init+0x1e8>)
 800285c:	f002 fc06 	bl	800506c <HAL_GPIO_Init>



         GPIO_InitStruct.Pin = GPIO_PIN_7;   // PC3
 8002860:	2380      	movs	r3, #128	; 0x80
 8002862:	61fb      	str	r3, [r7, #28]
         GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002864:	2301      	movs	r3, #1
 8002866:	623b      	str	r3, [r7, #32]
         GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002868:	2301      	movs	r3, #1
 800286a:	627b      	str	r3, [r7, #36]	; 0x24
         GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800286c:	2300      	movs	r3, #0
 800286e:	62bb      	str	r3, [r7, #40]	; 0x28
         HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002870:	f107 031c 	add.w	r3, r7, #28
 8002874:	4619      	mov	r1, r3
 8002876:	480d      	ldr	r0, [pc, #52]	; (80028ac <MX_GPIO_Init+0x1dc>)
 8002878:	f002 fbf8 	bl	800506c <HAL_GPIO_Init>

         GPIO_InitStruct.Pin = BUTTON_ON ;   // PC13
 800287c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002880:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002882:	2300      	movs	r3, #0
 8002884:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002886:	2300      	movs	r3, #0
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288a:	2300      	movs	r3, #0
 800288c:	62bb      	str	r3, [r7, #40]	; 0x28
        HAL_GPIO_Init(BUTTON_ON_Port, &GPIO_InitStruct);
 800288e:	f107 031c 	add.w	r3, r7, #28
 8002892:	4619      	mov	r1, r3
 8002894:	4809      	ldr	r0, [pc, #36]	; (80028bc <MX_GPIO_Init+0x1ec>)
 8002896:	f002 fbe9 	bl	800506c <HAL_GPIO_Init>
          HAL_GPIO_Init(BUTTON_ISNT_ON_Port, &GPIO_InitStruct);


           HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
           HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);*/
}
 800289a:	bf00      	nop
 800289c:	3730      	adds	r7, #48	; 0x30
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40023800 	.word	0x40023800
 80028a8:	40020400 	.word	0x40020400
 80028ac:	40020000 	.word	0x40020000
 80028b0:	40020c00 	.word	0x40020c00
 80028b4:	40021000 	.word	0x40021000
 80028b8:	40021400 	.word	0x40021400
 80028bc:	40020800 	.word	0x40020800

080028c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
 if (htim->Instance == TIM1) {
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a04      	ldr	r2, [pc, #16]	; (80028e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d101      	bne.n	80028d6 <HAL_TIM_PeriodElapsedCallback+0x16>
   HAL_IncTick();
 80028d2:	f001 f84d 	bl	8003970 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40010000 	.word	0x40010000

080028e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028e8:	b672      	cpsid	i
}
 80028ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028ec:	e7fe      	b.n	80028ec <Error_Handler+0x8>
	...

080028f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	607b      	str	r3, [r7, #4]
 80028fa:	4b12      	ldr	r3, [pc, #72]	; (8002944 <HAL_MspInit+0x54>)
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	4a11      	ldr	r2, [pc, #68]	; (8002944 <HAL_MspInit+0x54>)
 8002900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002904:	6453      	str	r3, [r2, #68]	; 0x44
 8002906:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <HAL_MspInit+0x54>)
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800290e:	607b      	str	r3, [r7, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	603b      	str	r3, [r7, #0]
 8002916:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <HAL_MspInit+0x54>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	4a0a      	ldr	r2, [pc, #40]	; (8002944 <HAL_MspInit+0x54>)
 800291c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002920:	6413      	str	r3, [r2, #64]	; 0x40
 8002922:	4b08      	ldr	r3, [pc, #32]	; (8002944 <HAL_MspInit+0x54>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292a:	603b      	str	r3, [r7, #0]
 800292c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800292e:	2200      	movs	r2, #0
 8002930:	210f      	movs	r1, #15
 8002932:	f06f 0001 	mvn.w	r0, #1
 8002936:	f002 f969 	bl	8004c0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40023800 	.word	0x40023800

08002948 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08a      	sub	sp, #40	; 0x28
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002950:	f107 0314 	add.w	r3, r7, #20
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a19      	ldr	r2, [pc, #100]	; (80029cc <HAL_CAN_MspInit+0x84>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d12b      	bne.n	80029c2 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	613b      	str	r3, [r7, #16]
 800296e:	4b18      	ldr	r3, [pc, #96]	; (80029d0 <HAL_CAN_MspInit+0x88>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	4a17      	ldr	r2, [pc, #92]	; (80029d0 <HAL_CAN_MspInit+0x88>)
 8002974:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002978:	6413      	str	r3, [r2, #64]	; 0x40
 800297a:	4b15      	ldr	r3, [pc, #84]	; (80029d0 <HAL_CAN_MspInit+0x88>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002982:	613b      	str	r3, [r7, #16]
 8002984:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <HAL_CAN_MspInit+0x88>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	4a10      	ldr	r2, [pc, #64]	; (80029d0 <HAL_CAN_MspInit+0x88>)
 8002990:	f043 0308 	orr.w	r3, r3, #8
 8002994:	6313      	str	r3, [r2, #48]	; 0x30
 8002996:	4b0e      	ldr	r3, [pc, #56]	; (80029d0 <HAL_CAN_MspInit+0x88>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80029a2:	2303      	movs	r3, #3
 80029a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a6:	2302      	movs	r3, #2
 80029a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ae:	2303      	movs	r3, #3
 80029b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80029b2:	2309      	movs	r3, #9
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029b6:	f107 0314 	add.w	r3, r7, #20
 80029ba:	4619      	mov	r1, r3
 80029bc:	4805      	ldr	r0, [pc, #20]	; (80029d4 <HAL_CAN_MspInit+0x8c>)
 80029be:	f002 fb55 	bl	800506c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80029c2:	bf00      	nop
 80029c4:	3728      	adds	r7, #40	; 0x28
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40006400 	.word	0x40006400
 80029d0:	40023800 	.word	0x40023800
 80029d4:	40020c00 	.word	0x40020c00

080029d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08a      	sub	sp, #40	; 0x28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e0:	f107 0314 	add.w	r3, r7, #20
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	605a      	str	r2, [r3, #4]
 80029ea:	609a      	str	r2, [r3, #8]
 80029ec:	60da      	str	r2, [r3, #12]
 80029ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a1d      	ldr	r2, [pc, #116]	; (8002a6c <HAL_UART_MspInit+0x94>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d134      	bne.n	8002a64 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	613b      	str	r3, [r7, #16]
 80029fe:	4b1c      	ldr	r3, [pc, #112]	; (8002a70 <HAL_UART_MspInit+0x98>)
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	4a1b      	ldr	r2, [pc, #108]	; (8002a70 <HAL_UART_MspInit+0x98>)
 8002a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a08:	6413      	str	r3, [r2, #64]	; 0x40
 8002a0a:	4b19      	ldr	r3, [pc, #100]	; (8002a70 <HAL_UART_MspInit+0x98>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a12:	613b      	str	r3, [r7, #16]
 8002a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	4b15      	ldr	r3, [pc, #84]	; (8002a70 <HAL_UART_MspInit+0x98>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	4a14      	ldr	r2, [pc, #80]	; (8002a70 <HAL_UART_MspInit+0x98>)
 8002a20:	f043 0308 	orr.w	r3, r3, #8
 8002a24:	6313      	str	r3, [r2, #48]	; 0x30
 8002a26:	4b12      	ldr	r3, [pc, #72]	; (8002a70 <HAL_UART_MspInit+0x98>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002a32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a40:	2303      	movs	r3, #3
 8002a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a44:	2307      	movs	r3, #7
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a48:	f107 0314 	add.w	r3, r7, #20
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4809      	ldr	r0, [pc, #36]	; (8002a74 <HAL_UART_MspInit+0x9c>)
 8002a50:	f002 fb0c 	bl	800506c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002a54:	2200      	movs	r2, #0
 8002a56:	2105      	movs	r1, #5
 8002a58:	2027      	movs	r0, #39	; 0x27
 8002a5a:	f002 f8d7 	bl	8004c0c <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002a5e:	2027      	movs	r0, #39	; 0x27
 8002a60:	f002 f8f0 	bl	8004c44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002a64:	bf00      	nop
 8002a66:	3728      	adds	r7, #40	; 0x28
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40004800 	.word	0x40004800
 8002a70:	40023800 	.word	0x40023800
 8002a74:	40020c00 	.word	0x40020c00

08002a78 <MX_ADC1_Init>:

}


 void MX_ADC1_Init(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002a7e:	463b      	mov	r3, r7
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	609a      	str	r2, [r3, #8]
 8002a88:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002a8a:	4b21      	ldr	r3, [pc, #132]	; (8002b10 <MX_ADC1_Init+0x98>)
 8002a8c:	4a21      	ldr	r2, [pc, #132]	; (8002b14 <MX_ADC1_Init+0x9c>)
 8002a8e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002a90:	4b1f      	ldr	r3, [pc, #124]	; (8002b10 <MX_ADC1_Init+0x98>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002a96:	4b1e      	ldr	r3, [pc, #120]	; (8002b10 <MX_ADC1_Init+0x98>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002a9c:	4b1c      	ldr	r3, [pc, #112]	; (8002b10 <MX_ADC1_Init+0x98>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002aa2:	4b1b      	ldr	r3, [pc, #108]	; (8002b10 <MX_ADC1_Init+0x98>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002aa8:	4b19      	ldr	r3, [pc, #100]	; (8002b10 <MX_ADC1_Init+0x98>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ab0:	4b17      	ldr	r3, [pc, #92]	; (8002b10 <MX_ADC1_Init+0x98>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ab6:	4b16      	ldr	r3, [pc, #88]	; (8002b10 <MX_ADC1_Init+0x98>)
 8002ab8:	4a17      	ldr	r2, [pc, #92]	; (8002b18 <MX_ADC1_Init+0xa0>)
 8002aba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002abc:	4b14      	ldr	r3, [pc, #80]	; (8002b10 <MX_ADC1_Init+0x98>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002ac2:	4b13      	ldr	r3, [pc, #76]	; (8002b10 <MX_ADC1_Init+0x98>)
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002ac8:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <MX_ADC1_Init+0x98>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ad0:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <MX_ADC1_Init+0x98>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002ad6:	480e      	ldr	r0, [pc, #56]	; (8002b10 <MX_ADC1_Init+0x98>)
 8002ad8:	f000 ff8e 	bl	80039f8 <HAL_ADC_Init>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002ae2:	f7ff feff 	bl	80028e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002aea:	2301      	movs	r3, #1
 8002aec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002aee:	2300      	movs	r3, #0
 8002af0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002af2:	463b      	mov	r3, r7
 8002af4:	4619      	mov	r1, r3
 8002af6:	4806      	ldr	r0, [pc, #24]	; (8002b10 <MX_ADC1_Init+0x98>)
 8002af8:	f001 f960 	bl	8003dbc <HAL_ADC_ConfigChannel>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002b02:	f7ff feef 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002b06:	bf00      	nop
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20006a7c 	.word	0x20006a7c
 8002b14:	40012000 	.word	0x40012000
 8002b18:	0f000001 	.word	0x0f000001

08002b1c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
 void MX_ADC2_Init(uint32_t num)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002b24:	f107 0308 	add.w	r3, r7, #8
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	605a      	str	r2, [r3, #4]
 8002b2e:	609a      	str	r2, [r3, #8]
 8002b30:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002b32:	4b21      	ldr	r3, [pc, #132]	; (8002bb8 <MX_ADC2_Init+0x9c>)
 8002b34:	4a21      	ldr	r2, [pc, #132]	; (8002bbc <MX_ADC2_Init+0xa0>)
 8002b36:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002b38:	4b1f      	ldr	r3, [pc, #124]	; (8002bb8 <MX_ADC2_Init+0x9c>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002b3e:	4b1e      	ldr	r3, [pc, #120]	; (8002bb8 <MX_ADC2_Init+0x9c>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode =  DISABLE;
 8002b44:	4b1c      	ldr	r3, [pc, #112]	; (8002bb8 <MX_ADC2_Init+0x9c>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002b4a:	4b1b      	ldr	r3, [pc, #108]	; (8002bb8 <MX_ADC2_Init+0x9c>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002b50:	4b19      	ldr	r3, [pc, #100]	; (8002bb8 <MX_ADC2_Init+0x9c>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b58:	4b17      	ldr	r3, [pc, #92]	; (8002bb8 <MX_ADC2_Init+0x9c>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b5e:	4b16      	ldr	r3, [pc, #88]	; (8002bb8 <MX_ADC2_Init+0x9c>)
 8002b60:	4a17      	ldr	r2, [pc, #92]	; (8002bc0 <MX_ADC2_Init+0xa4>)
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b64:	4b14      	ldr	r3, [pc, #80]	; (8002bb8 <MX_ADC2_Init+0x9c>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002b6a:	4b13      	ldr	r3, [pc, #76]	; (8002bb8 <MX_ADC2_Init+0x9c>)
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002b70:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <MX_ADC2_Init+0x9c>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b78:	4b0f      	ldr	r3, [pc, #60]	; (8002bb8 <MX_ADC2_Init+0x9c>)
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002b7e:	480e      	ldr	r0, [pc, #56]	; (8002bb8 <MX_ADC2_Init+0x9c>)
 8002b80:	f000 ff3a 	bl	80039f8 <HAL_ADC_Init>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8002b8a:	f7ff feab 	bl	80028e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = /*ADC_CHANNEL_10;*/num;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 8002b92:	2301      	movs	r3, #1
 8002b94:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002b96:	2300      	movs	r3, #0
 8002b98:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002b9a:	f107 0308 	add.w	r3, r7, #8
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4805      	ldr	r0, [pc, #20]	; (8002bb8 <MX_ADC2_Init+0x9c>)
 8002ba2:	f001 f90b 	bl	8003dbc <HAL_ADC_ConfigChannel>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8002bac:	f7ff fe9a 	bl	80028e4 <Error_Handler>

  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002bb0:	bf00      	nop
 8002bb2:	3718      	adds	r7, #24
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	20006c7c 	.word	0x20006c7c
 8002bbc:	40012100 	.word	0x40012100
 8002bc0:	0f000001 	.word	0x0f000001

08002bc4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
 void MX_ADC3_Init(uint32_t num)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002bcc:	f107 0308 	add.w	r3, r7, #8
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8002bda:	4b25      	ldr	r3, [pc, #148]	; (8002c70 <MX_ADC3_Init+0xac>)
 8002bdc:	4a25      	ldr	r2, [pc, #148]	; (8002c74 <MX_ADC3_Init+0xb0>)
 8002bde:	601a      	str	r2, [r3, #0]
 // hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;

  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002be0:	4b23      	ldr	r3, [pc, #140]	; (8002c70 <MX_ADC3_Init+0xac>)
 8002be2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002be6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002be8:	4b21      	ldr	r3, [pc, #132]	; (8002c70 <MX_ADC3_Init+0xac>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8002bee:	4b20      	ldr	r3, [pc, #128]	; (8002c70 <MX_ADC3_Init+0xac>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	611a      	str	r2, [r3, #16]
//  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.ContinuousConvMode = ENABLE;
 8002bf4:	4b1e      	ldr	r3, [pc, #120]	; (8002c70 <MX_ADC3_Init+0xac>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002bfa:	4b1d      	ldr	r3, [pc, #116]	; (8002c70 <MX_ADC3_Init+0xac>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c02:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <MX_ADC3_Init+0xac>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c08:	4b19      	ldr	r3, [pc, #100]	; (8002c70 <MX_ADC3_Init+0xac>)
 8002c0a:	4a1b      	ldr	r2, [pc, #108]	; (8002c78 <MX_ADC3_Init+0xb4>)
 8002c0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c0e:	4b18      	ldr	r3, [pc, #96]	; (8002c70 <MX_ADC3_Init+0xac>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002c14:	4b16      	ldr	r3, [pc, #88]	; (8002c70 <MX_ADC3_Init+0xac>)
 8002c16:	2201      	movs	r2, #1
 8002c18:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002c1a:	4b15      	ldr	r3, [pc, #84]	; (8002c70 <MX_ADC3_Init+0xac>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c22:	4b13      	ldr	r3, [pc, #76]	; (8002c70 <MX_ADC3_Init+0xac>)
 8002c24:	2201      	movs	r2, #1
 8002c26:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002c28:	4811      	ldr	r0, [pc, #68]	; (8002c70 <MX_ADC3_Init+0xac>)
 8002c2a:	f000 fee5 	bl	80039f8 <HAL_ADC_Init>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 8002c34:	f7ff fe56 	bl	80028e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = num;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	60fb      	str	r3, [r7, #12]
  if(num == 9)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b09      	cmp	r3, #9
 8002c44:	d102      	bne.n	8002c4c <MX_ADC3_Init+0x88>
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES ;
 8002c46:	2307      	movs	r3, #7
 8002c48:	613b      	str	r3, [r7, #16]
 8002c4a:	e001      	b.n	8002c50 <MX_ADC3_Init+0x8c>
  else
      sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	613b      	str	r3, [r7, #16]

  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002c50:	f107 0308 	add.w	r3, r7, #8
 8002c54:	4619      	mov	r1, r3
 8002c56:	4806      	ldr	r0, [pc, #24]	; (8002c70 <MX_ADC3_Init+0xac>)
 8002c58:	f001 f8b0 	bl	8003dbc <HAL_ADC_ConfigChannel>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <MX_ADC3_Init+0xa2>
  {
    Error_Handler();
 8002c62:	f7ff fe3f 	bl	80028e4 <Error_Handler>
  }




}
 8002c66:	bf00      	nop
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	20006cc4 	.word	0x20006cc4
 8002c74:	40012200 	.word	0x40012200
 8002c78:	0f000001 	.word	0x0f000001

08002c7c <HAL_ADC_MspInit>:



void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b090      	sub	sp, #64	; 0x40
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	605a      	str	r2, [r3, #4]
 8002c8e:	609a      	str	r2, [r3, #8]
 8002c90:	60da      	str	r2, [r3, #12]
 8002c92:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a5f      	ldr	r2, [pc, #380]	; (8002e18 <HAL_ADC_MspInit+0x19c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d142      	bne.n	8002d24 <HAL_ADC_MspInit+0xa8>
  {
	   __HAL_RCC_ADC1_CLK_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ca2:	4b5e      	ldr	r3, [pc, #376]	; (8002e1c <HAL_ADC_MspInit+0x1a0>)
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca6:	4a5d      	ldr	r2, [pc, #372]	; (8002e1c <HAL_ADC_MspInit+0x1a0>)
 8002ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cac:	6453      	str	r3, [r2, #68]	; 0x44
 8002cae:	4b5b      	ldr	r3, [pc, #364]	; (8002e1c <HAL_ADC_MspInit+0x1a0>)
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cba:	2300      	movs	r3, #0
 8002cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cbe:	4b57      	ldr	r3, [pc, #348]	; (8002e1c <HAL_ADC_MspInit+0x1a0>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	4a56      	ldr	r2, [pc, #344]	; (8002e1c <HAL_ADC_MspInit+0x1a0>)
 8002cc4:	f043 0301 	orr.w	r3, r3, #1
 8002cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cca:	4b54      	ldr	r3, [pc, #336]	; (8002e1c <HAL_ADC_MspInit+0x1a0>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	623b      	str	r3, [r7, #32]
 8002cda:	4b50      	ldr	r3, [pc, #320]	; (8002e1c <HAL_ADC_MspInit+0x1a0>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	4a4f      	ldr	r2, [pc, #316]	; (8002e1c <HAL_ADC_MspInit+0x1a0>)
 8002ce0:	f043 0302 	orr.w	r3, r3, #2
 8002ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce6:	4b4d      	ldr	r3, [pc, #308]	; (8002e1c <HAL_ADC_MspInit+0x1a0>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	623b      	str	r3, [r7, #32]
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
	    /**ADC1 GPIO Configuration
	    PA3     ------> ADC1_IN3
	    PB1     ------> ADC1_IN9
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002cf2:	2308      	movs	r3, #8
 8002cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	633b      	str	r3, [r7, #48]	; 0x30
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	637b      	str	r3, [r7, #52]	; 0x34
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d02:	4619      	mov	r1, r3
 8002d04:	4846      	ldr	r0, [pc, #280]	; (8002e20 <HAL_ADC_MspInit+0x1a4>)
 8002d06:	f002 f9b1 	bl	800506c <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	633b      	str	r3, [r7, #48]	; 0x30
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d12:	2300      	movs	r3, #0
 8002d14:	637b      	str	r3, [r7, #52]	; 0x34
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4841      	ldr	r0, [pc, #260]	; (8002e24 <HAL_ADC_MspInit+0x1a8>)
 8002d1e:	f002 f9a5 	bl	800506c <HAL_GPIO_Init>



  }

}
 8002d22:	e074      	b.n	8002e0e <HAL_ADC_MspInit+0x192>
  else if(hadc->Instance==ADC2)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a3f      	ldr	r2, [pc, #252]	; (8002e28 <HAL_ADC_MspInit+0x1ac>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d142      	bne.n	8002db4 <HAL_ADC_MspInit+0x138>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61fb      	str	r3, [r7, #28]
 8002d32:	4b3a      	ldr	r3, [pc, #232]	; (8002e1c <HAL_ADC_MspInit+0x1a0>)
 8002d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d36:	4a39      	ldr	r2, [pc, #228]	; (8002e1c <HAL_ADC_MspInit+0x1a0>)
 8002d38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d3e:	4b37      	ldr	r3, [pc, #220]	; (8002e1c <HAL_ADC_MspInit+0x1a0>)
 8002d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d46:	61fb      	str	r3, [r7, #28]
 8002d48:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61bb      	str	r3, [r7, #24]
 8002d4e:	4b33      	ldr	r3, [pc, #204]	; (8002e1c <HAL_ADC_MspInit+0x1a0>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	4a32      	ldr	r2, [pc, #200]	; (8002e1c <HAL_ADC_MspInit+0x1a0>)
 8002d54:	f043 0304 	orr.w	r3, r3, #4
 8002d58:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5a:	4b30      	ldr	r3, [pc, #192]	; (8002e1c <HAL_ADC_MspInit+0x1a0>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	f003 0304 	and.w	r3, r3, #4
 8002d62:	61bb      	str	r3, [r7, #24]
 8002d64:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d66:	2301      	movs	r3, #1
 8002d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d76:	4619      	mov	r1, r3
 8002d78:	482c      	ldr	r0, [pc, #176]	; (8002e2c <HAL_ADC_MspInit+0x1b0>)
 8002d7a:	f002 f977 	bl	800506c <HAL_GPIO_Init>
       __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]
 8002d82:	4b26      	ldr	r3, [pc, #152]	; (8002e1c <HAL_ADC_MspInit+0x1a0>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	4a25      	ldr	r2, [pc, #148]	; (8002e1c <HAL_ADC_MspInit+0x1a0>)
 8002d88:	f043 0304 	orr.w	r3, r3, #4
 8002d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d8e:	4b23      	ldr	r3, [pc, #140]	; (8002e1c <HAL_ADC_MspInit+0x1a0>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	697b      	ldr	r3, [r7, #20]
         GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d9a:	2308      	movs	r3, #8
 8002d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
         GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	633b      	str	r3, [r7, #48]	; 0x30
         GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	637b      	str	r3, [r7, #52]	; 0x34
         HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002da6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002daa:	4619      	mov	r1, r3
 8002dac:	481f      	ldr	r0, [pc, #124]	; (8002e2c <HAL_ADC_MspInit+0x1b0>)
 8002dae:	f002 f95d 	bl	800506c <HAL_GPIO_Init>
}
 8002db2:	e02c      	b.n	8002e0e <HAL_ADC_MspInit+0x192>
  else if(hadc->Instance==ADC3)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a1d      	ldr	r2, [pc, #116]	; (8002e30 <HAL_ADC_MspInit+0x1b4>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d127      	bne.n	8002e0e <HAL_ADC_MspInit+0x192>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	613b      	str	r3, [r7, #16]
 8002dc2:	4b16      	ldr	r3, [pc, #88]	; (8002e1c <HAL_ADC_MspInit+0x1a0>)
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc6:	4a15      	ldr	r2, [pc, #84]	; (8002e1c <HAL_ADC_MspInit+0x1a0>)
 8002dc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8002dce:	4b13      	ldr	r3, [pc, #76]	; (8002e1c <HAL_ADC_MspInit+0x1a0>)
 8002dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd6:	613b      	str	r3, [r7, #16]
 8002dd8:	693b      	ldr	r3, [r7, #16]
       __HAL_RCC_GPIOF_CLK_ENABLE();
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	4b0f      	ldr	r3, [pc, #60]	; (8002e1c <HAL_ADC_MspInit+0x1a0>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	4a0e      	ldr	r2, [pc, #56]	; (8002e1c <HAL_ADC_MspInit+0x1a0>)
 8002de4:	f043 0320 	orr.w	r3, r3, #32
 8002de8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dea:	4b0c      	ldr	r3, [pc, #48]	; (8002e1c <HAL_ADC_MspInit+0x1a0>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	f003 0320 	and.w	r3, r3, #32
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	68fb      	ldr	r3, [r7, #12]
       GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_5 ;
 8002df6:	2328      	movs	r3, #40	; 0x28
 8002df8:	62fb      	str	r3, [r7, #44]	; 0x2c
       GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	633b      	str	r3, [r7, #48]	; 0x30
       GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	637b      	str	r3, [r7, #52]	; 0x34
       HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e06:	4619      	mov	r1, r3
 8002e08:	480a      	ldr	r0, [pc, #40]	; (8002e34 <HAL_ADC_MspInit+0x1b8>)
 8002e0a:	f002 f92f 	bl	800506c <HAL_GPIO_Init>
}
 8002e0e:	bf00      	nop
 8002e10:	3740      	adds	r7, #64	; 0x40
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40012000 	.word	0x40012000
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	40020000 	.word	0x40020000
 8002e24:	40020400 	.word	0x40020400
 8002e28:	40012100 	.word	0x40012100
 8002e2c:	40020800 	.word	0x40020800
 8002e30:	40012200 	.word	0x40012200
 8002e34:	40021400 	.word	0x40021400

08002e38 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* TIM6 Periph clock enable */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002e40:	2300      	movs	r3, #0
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	4b08      	ldr	r3, [pc, #32]	; (8002e68 <HAL_TIM_Base_MspInit+0x30>)
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	4a07      	ldr	r2, [pc, #28]	; (8002e68 <HAL_TIM_Base_MspInit+0x30>)
 8002e4a:	f043 0310 	orr.w	r3, r3, #16
 8002e4e:	6413      	str	r3, [r2, #64]	; 0x40
 8002e50:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <HAL_TIM_Base_MspInit+0x30>)
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	f003 0310 	and.w	r3, r3, #16
 8002e58:	60fb      	str	r3, [r7, #12]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
}
 8002e5c:	bf00      	nop
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	40023800 	.word	0x40023800

08002e6c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08a      	sub	sp, #40	; 0x28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e74:	f107 0314 	add.w	r3, r7, #20
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	60da      	str	r2, [r3, #12]
 8002e82:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a1b      	ldr	r2, [pc, #108]	; (8002ef8 <HAL_DAC_MspInit+0x8c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d12f      	bne.n	8002eee <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	613b      	str	r3, [r7, #16]
 8002e92:	4b1a      	ldr	r3, [pc, #104]	; (8002efc <HAL_DAC_MspInit+0x90>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	4a19      	ldr	r2, [pc, #100]	; (8002efc <HAL_DAC_MspInit+0x90>)
 8002e98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e9e:	4b17      	ldr	r3, [pc, #92]	; (8002efc <HAL_DAC_MspInit+0x90>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ea6:	613b      	str	r3, [r7, #16]
 8002ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	4b13      	ldr	r3, [pc, #76]	; (8002efc <HAL_DAC_MspInit+0x90>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	4a12      	ldr	r2, [pc, #72]	; (8002efc <HAL_DAC_MspInit+0x90>)
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eba:	4b10      	ldr	r3, [pc, #64]	; (8002efc <HAL_DAC_MspInit+0x90>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
   // __HAL_RCC_GPIOF_CLK_ENABLE();
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002ec6:	2310      	movs	r3, #16
 8002ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed2:	f107 0314 	add.w	r3, r7, #20
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4809      	ldr	r0, [pc, #36]	; (8002f00 <HAL_DAC_MspInit+0x94>)
 8002eda:	f002 f8c7 	bl	800506c <HAL_GPIO_Init>


    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002ede:	2200      	movs	r2, #0
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	2036      	movs	r0, #54	; 0x36
 8002ee4:	f001 fe92 	bl	8004c0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ee8:	2036      	movs	r0, #54	; 0x36
 8002eea:	f001 feab 	bl	8004c44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002eee:	bf00      	nop
 8002ef0:	3728      	adds	r7, #40	; 0x28
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40007400 	.word	0x40007400
 8002efc:	40023800 	.word	0x40023800
 8002f00:	40020000 	.word	0x40020000

08002f04 <Init_Pins>:
void Init_Pins(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0


     	 HAL_GPIO_WritePin(PW_ON_Port, PW_ON, GPIO_PIN_RESET);
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f0e:	4835      	ldr	r0, [pc, #212]	; (8002fe4 <Init_Pins+0xe0>)
 8002f10:	f002 fa70 	bl	80053f4 <HAL_GPIO_WritePin>
	     //#ifdef   V_2BW
	    if(Can_state.version == AVT04){
 8002f14:	4b34      	ldr	r3, [pc, #208]	; (8002fe8 <Init_Pins+0xe4>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d128      	bne.n	8002f6e <Init_Pins+0x6a>
	    //     	HAL_GPIO_WritePin(PW_ON_Port, PW_ON, GPIO_PIN_RESET);
	    	//	 HAL_GPIO_WritePin(KL15_ON_Port, KL15_ON, GPIO_PIN_RESET);

	    		 HAL_GPIO_WritePin(LOW_VOL_ON_Port, LOW_VOL_ON, GPIO_PIN_SET);
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f22:	4832      	ldr	r0, [pc, #200]	; (8002fec <Init_Pins+0xe8>)
 8002f24:	f002 fa66 	bl	80053f4 <HAL_GPIO_WritePin>
	    		  HAL_GPIO_WritePin(LOW_CUR_Port, LOW_CUR_ON, GPIO_PIN_SET);
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f2e:	482f      	ldr	r0, [pc, #188]	; (8002fec <Init_Pins+0xe8>)
 8002f30:	f002 fa60 	bl	80053f4 <HAL_GPIO_WritePin>
	    			 HAL_GPIO_WritePin( BUT_CUR_ON_Port,  BUT_CUR_ON, GPIO_PIN_RESET);  // off
 8002f34:	2200      	movs	r2, #0
 8002f36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f3a:	482d      	ldr	r0, [pc, #180]	; (8002ff0 <Init_Pins+0xec>)
 8002f3c:	f002 fa5a 	bl	80053f4 <HAL_GPIO_WritePin>
	    		 HAL_GPIO_WritePin(MIC_ON_Port, MIC_ON, GPIO_PIN_SET);
 8002f40:	2201      	movs	r2, #1
 8002f42:	2140      	movs	r1, #64	; 0x40
 8002f44:	482b      	ldr	r0, [pc, #172]	; (8002ff4 <Init_Pins+0xf0>)
 8002f46:	f002 fa55 	bl	80053f4 <HAL_GPIO_WritePin>
	    		 HAL_GPIO_WritePin(SPK_ON_Port, SPK_ON, GPIO_PIN_SET);
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	2120      	movs	r1, #32
 8002f4e:	4829      	ldr	r0, [pc, #164]	; (8002ff4 <Init_Pins+0xf0>)
 8002f50:	f002 fa50 	bl	80053f4 <HAL_GPIO_WritePin>
	    		 HAL_GPIO_WritePin(MUTE_CTRL_Port, MUTE_CTRL, GPIO_PIN_RESET); // on
 8002f54:	2200      	movs	r2, #0
 8002f56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f5a:	4822      	ldr	r0, [pc, #136]	; (8002fe4 <Init_Pins+0xe0>)
 8002f5c:	f002 fa4a 	bl	80053f4 <HAL_GPIO_WritePin>
	    		   HAL_GPIO_WritePin(SOS_ON_Port, SOS_ON, GPIO_PIN_SET);
 8002f60:	2201      	movs	r2, #1
 8002f62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f66:	4822      	ldr	r0, [pc, #136]	; (8002ff0 <Init_Pins+0xec>)
 8002f68:	f002 fa44 	bl	80053f4 <HAL_GPIO_WritePin>
 8002f6c:	e031      	b.n	8002fd2 <Init_Pins+0xce>
	    			// HAL_GPIO_WritePin(MUTE_CTRL_Port, MUTE_CTRL, GPIO_PIN_SET); // on

	    }

	    else{
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8002f6e:	2201      	movs	r2, #1
 8002f70:	2180      	movs	r1, #128	; 0x80
 8002f72:	4820      	ldr	r0, [pc, #128]	; (8002ff4 <Init_Pins+0xf0>)
 8002f74:	f002 fa3e 	bl	80053f4 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(KL15_ON_Port, KL15_ON, GPIO_PIN_SET);   // on
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f7e:	4819      	ldr	r0, [pc, #100]	; (8002fe4 <Init_Pins+0xe0>)
 8002f80:	f002 fa38 	bl	80053f4 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(LOW_VOL_ON_Port, LOW_VOL_ON, GPIO_PIN_SET); //off
 8002f84:	2201      	movs	r2, #1
 8002f86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f8a:	4818      	ldr	r0, [pc, #96]	; (8002fec <Init_Pins+0xe8>)
 8002f8c:	f002 fa32 	bl	80053f4 <HAL_GPIO_WritePin>
		// HAL_GPIO_WritePin(MIC_ON_Port, MIC_ON, GPIO_PIN_RESET);
		 HAL_GPIO_WritePin(MIC_ON_Port, MIC_ON, GPIO_PIN_SET);  // off
 8002f90:	2201      	movs	r2, #1
 8002f92:	2140      	movs	r1, #64	; 0x40
 8002f94:	4817      	ldr	r0, [pc, #92]	; (8002ff4 <Init_Pins+0xf0>)
 8002f96:	f002 fa2d 	bl	80053f4 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin( BUT_CUR_ON_Port,  BUT_CUR_ON, GPIO_PIN_SET);  // off
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002fa0:	4813      	ldr	r0, [pc, #76]	; (8002ff0 <Init_Pins+0xec>)
 8002fa2:	f002 fa27 	bl	80053f4 <HAL_GPIO_WritePin>

	//	 HAL_GPIO_WritePin(MUTE_CTRL_Port, MUTE_CTRL, GPIO_PIN_SET); // on
		 if(Can_state.version == ISNT_M_plus)
 8002fa6:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <Init_Pins+0xe4>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d106      	bne.n	8002fbc <Init_Pins+0xb8>
			 HAL_GPIO_WritePin(MUTE_CTRL_Port, MUTE_CTRL, GPIO_PIN_RESET); // on
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002fb4:	480b      	ldr	r0, [pc, #44]	; (8002fe4 <Init_Pins+0xe0>)
 8002fb6:	f002 fa1d 	bl	80053f4 <HAL_GPIO_WritePin>
 8002fba:	e005      	b.n	8002fc8 <Init_Pins+0xc4>
		 else
			 HAL_GPIO_WritePin(MUTE_CTRL_Port, MUTE_CTRL, GPIO_PIN_SET); // on
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002fc2:	4808      	ldr	r0, [pc, #32]	; (8002fe4 <Init_Pins+0xe0>)
 8002fc4:	f002 fa16 	bl	80053f4 <HAL_GPIO_WritePin>

		 HAL_GPIO_WritePin(SPK_ON_Port, SPK_ON, GPIO_PIN_SET); // on
 8002fc8:	2201      	movs	r2, #1
 8002fca:	2120      	movs	r1, #32
 8002fcc:	4809      	ldr	r0, [pc, #36]	; (8002ff4 <Init_Pins+0xf0>)
 8002fce:	f002 fa11 	bl	80053f4 <HAL_GPIO_WritePin>
		//  HAL_GPIO_WritePin(LOW_CUR_Port, LOW_CUR_ON, GPIO_PIN_SET);

	//	 HAL_GPIO_WritePin(MIC_ON_Port, MIC_ON, GPIO_PIN_SET);
		// HAL_GPIO_WritePin(SPK_ON_Port, SPK_ON, GPIO_PIN_SET);

		   HAL_GPIO_WritePin(SOS_ON_Port, SOS_ON, GPIO_PIN_RESET);  //
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fd8:	4805      	ldr	r0, [pc, #20]	; (8002ff0 <Init_Pins+0xec>)
 8002fda:	f002 fa0b 	bl	80053f4 <HAL_GPIO_WritePin>



	}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40021400 	.word	0x40021400
 8002fe8:	20006284 	.word	0x20006284
 8002fec:	40020c00 	.word	0x40020c00
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	40020000 	.word	0x40020000

08002ff8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08c      	sub	sp, #48	; 0x30
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003000:	2300      	movs	r3, #0
 8003002:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003008:	2300      	movs	r3, #0
 800300a:	60bb      	str	r3, [r7, #8]
 800300c:	4b2f      	ldr	r3, [pc, #188]	; (80030cc <HAL_InitTick+0xd4>)
 800300e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003010:	4a2e      	ldr	r2, [pc, #184]	; (80030cc <HAL_InitTick+0xd4>)
 8003012:	f043 0301 	orr.w	r3, r3, #1
 8003016:	6453      	str	r3, [r2, #68]	; 0x44
 8003018:	4b2c      	ldr	r3, [pc, #176]	; (80030cc <HAL_InitTick+0xd4>)
 800301a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	60bb      	str	r3, [r7, #8]
 8003022:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003024:	f107 020c 	add.w	r2, r7, #12
 8003028:	f107 0310 	add.w	r3, r7, #16
 800302c:	4611      	mov	r1, r2
 800302e:	4618      	mov	r0, r3
 8003030:	f002 fe86 	bl	8005d40 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003034:	f002 fe70 	bl	8005d18 <HAL_RCC_GetPCLK2Freq>
 8003038:	4603      	mov	r3, r0
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800303e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003040:	4a23      	ldr	r2, [pc, #140]	; (80030d0 <HAL_InitTick+0xd8>)
 8003042:	fba2 2303 	umull	r2, r3, r2, r3
 8003046:	0c9b      	lsrs	r3, r3, #18
 8003048:	3b01      	subs	r3, #1
 800304a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800304c:	4b21      	ldr	r3, [pc, #132]	; (80030d4 <HAL_InitTick+0xdc>)
 800304e:	4a22      	ldr	r2, [pc, #136]	; (80030d8 <HAL_InitTick+0xe0>)
 8003050:	601a      	str	r2, [r3, #0]
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
//  htim1.Init.Period = (1000000U / 1000U) - 1U;
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003052:	4b20      	ldr	r3, [pc, #128]	; (80030d4 <HAL_InitTick+0xdc>)
 8003054:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003058:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800305a:	4a1e      	ldr	r2, [pc, #120]	; (80030d4 <HAL_InitTick+0xdc>)
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003060:	4b1c      	ldr	r3, [pc, #112]	; (80030d4 <HAL_InitTick+0xdc>)
 8003062:	2200      	movs	r2, #0
 8003064:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003066:	4b1b      	ldr	r3, [pc, #108]	; (80030d4 <HAL_InitTick+0xdc>)
 8003068:	2200      	movs	r2, #0
 800306a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800306c:	4b19      	ldr	r3, [pc, #100]	; (80030d4 <HAL_InitTick+0xdc>)
 800306e:	2200      	movs	r2, #0
 8003070:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003072:	4818      	ldr	r0, [pc, #96]	; (80030d4 <HAL_InitTick+0xdc>)
 8003074:	f002 fe96 	bl	8005da4 <HAL_TIM_Base_Init>
 8003078:	4603      	mov	r3, r0
 800307a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800307e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003082:	2b00      	cmp	r3, #0
 8003084:	d11b      	bne.n	80030be <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003086:	4813      	ldr	r0, [pc, #76]	; (80030d4 <HAL_InitTick+0xdc>)
 8003088:	f002 fedc 	bl	8005e44 <HAL_TIM_Base_Start_IT>
 800308c:	4603      	mov	r3, r0
 800308e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003092:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003096:	2b00      	cmp	r3, #0
 8003098:	d111      	bne.n	80030be <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800309a:	2019      	movs	r0, #25
 800309c:	f001 fdd2 	bl	8004c44 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b0f      	cmp	r3, #15
 80030a4:	d808      	bhi.n	80030b8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80030a6:	2200      	movs	r2, #0
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	2019      	movs	r0, #25
 80030ac:	f001 fdae 	bl	8004c0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030b0:	4a0a      	ldr	r2, [pc, #40]	; (80030dc <HAL_InitTick+0xe4>)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	e002      	b.n	80030be <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80030be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3730      	adds	r7, #48	; 0x30
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40023800 	.word	0x40023800
 80030d0:	431bde83 	.word	0x431bde83
 80030d4:	20006d0c 	.word	0x20006d0c
 80030d8:	40010000 	.word	0x40010000
 80030dc:	200002f0 	.word	0x200002f0

080030e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030e4:	e7fe      	b.n	80030e4 <NMI_Handler+0x4>

080030e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030e6:	b480      	push	{r7}
 80030e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030ea:	e7fe      	b.n	80030ea <HardFault_Handler+0x4>

080030ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030f0:	e7fe      	b.n	80030f0 <MemManage_Handler+0x4>

080030f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030f2:	b480      	push	{r7}
 80030f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030f6:	e7fe      	b.n	80030f6 <BusFault_Handler+0x4>

080030f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030fc:	e7fe      	b.n	80030fc <UsageFault_Handler+0x4>

080030fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030fe:	b480      	push	{r7}
 8003100:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003102:	bf00      	nop
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */

  HAL_TIM_IRQHandler(&htim1);
 8003110:	4802      	ldr	r0, [pc, #8]	; (800311c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003112:	f002 ff07 	bl	8005f24 <HAL_TIM_IRQHandler>
 // timer1_ch +=1;
 // Can_state.t1 +=1;
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	20006d0c 	.word	0x20006d0c

08003120 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8003124:	4802      	ldr	r0, [pc, #8]	; (8003130 <TIM6_DAC_IRQHandler+0x10>)
 8003126:	f001 fe2c 	bl	8004d82 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800312a:	bf00      	nop
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	20006b64 	.word	0x20006b64

08003134 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003138:	4802      	ldr	r0, [pc, #8]	; (8003144 <USART3_IRQHandler+0x10>)
 800313a:	f003 fa89 	bl	8006650 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800313e:	bf00      	nop
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	2000652c 	.word	0x2000652c

08003148 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0

  HAL_GPIO_EXTI_IRQHandler(BUTTON_ISNT_ON);
 800314c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003150:	f002 f96a 	bl	8005428 <HAL_GPIO_EXTI_IRQHandler>

}
 8003154:	bf00      	nop
 8003156:	bd80      	pop	{r7, pc}

08003158 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800315c:	4b06      	ldr	r3, [pc, #24]	; (8003178 <SystemInit+0x20>)
 800315e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003162:	4a05      	ldr	r2, [pc, #20]	; (8003178 <SystemInit+0x20>)
 8003164:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003168:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800316c:	bf00      	nop
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	e000ed00 	.word	0xe000ed00

0800317c <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group>:
// bcm_mic_r Microphone_ADC;          //9
Set_r Config;


uint32_t CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group(  uint8_t *ptr, DiagnosticResponse* resp, uint8_t group, uint8_t cmd  )
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	4611      	mov	r1, r2
 8003188:	461a      	mov	r2, r3
 800318a:	460b      	mov	r3, r1
 800318c:	71fb      	strb	r3, [r7, #7]
 800318e:	4613      	mov	r3, r2
 8003190:	71bb      	strb	r3, [r7, #6]
	 uint32_t offset = 0;
 8003192:	2300      	movs	r3, #0
 8003194:	617b      	str	r3, [r7, #20]
	 uint8_t sat_glonass;


   if( group == 0x4 ){
 8003196:	79fb      	ldrb	r3, [r7, #7]
 8003198:	2b04      	cmp	r3, #4
 800319a:	d111      	bne.n	80031c0 <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x44>

		 switch(cmd)
 800319c:	79bb      	ldrb	r3, [r7, #6]
 800319e:	2b08      	cmp	r3, #8
 80031a0:	d00b      	beq.n	80031ba <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x3e>
 80031a2:	2b11      	cmp	r3, #17
 80031a4:	d10e      	bne.n	80031c4 <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x48>
		 {
		 case	0x11: //(Get_GSM_IMEI + 1) :					// 0x22  0x04  0x11

			 memcpy(&Config.GSM_IMEI[0], (ptr + (CMD62_OFFSET)), 8 );
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	3303      	adds	r3, #3
 80031aa:	2208      	movs	r2, #8
 80031ac:	4619      	mov	r1, r3
 80031ae:	4872      	ldr	r0, [pc, #456]	; (8003378 <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x1fc>)
 80031b0:	f007 ff3c 	bl	800b02c <memcpy>
			     offset = 8;
 80031b4:	2308      	movs	r3, #8
 80031b6:	617b      	str	r3, [r7, #20]

							 break;
 80031b8:	e005      	b.n	80031c6 <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x4a>

		case	0x08://Get_activate_block:					// 0x22  0x04  0x8

		//	Config.activate = *(ptr + (CMD62_OFFSET ));
			 				 	 offset = 1;
 80031ba:	2301      	movs	r3, #1
 80031bc:	617b      	str	r3, [r7, #20]

			 					 break;
 80031be:	e002      	b.n	80031c6 <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x4a>
			 default:
					break;

		 }
   }
 80031c0:	bf00      	nop
 80031c2:	e000      	b.n	80031c6 <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x4a>
					break;
 80031c4:	bf00      	nop
   if((group == 0xF1))
 80031c6:	79fb      	ldrb	r3, [r7, #7]
 80031c8:	2bf1      	cmp	r3, #241	; 0xf1
 80031ca:	d10a      	bne.n	80031e2 <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x66>
		   {
	   memcpy(&Can_state.SRN[0], (ptr + (CMD62_OFFSET)), 16 );
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	3303      	adds	r3, #3
 80031d0:	2210      	movs	r2, #16
 80031d2:	4619      	mov	r1, r3
 80031d4:	4869      	ldr	r0, [pc, #420]	; (800337c <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x200>)
 80031d6:	f007 ff29 	bl	800b02c <memcpy>
	  						 	 offset = 16;
 80031da:	2310      	movs	r3, #16
 80031dc:	617b      	str	r3, [r7, #20]
	  						 	 return offset;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	e0c5      	b.n	800336e <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x1f2>
		   }
   if((group == 0x99) ||(group == 0xFD) ){
 80031e2:	79fb      	ldrb	r3, [r7, #7]
 80031e4:	2b99      	cmp	r3, #153	; 0x99
 80031e6:	d003      	beq.n	80031f0 <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x74>
 80031e8:	79fb      	ldrb	r3, [r7, #7]
 80031ea:	2bfd      	cmp	r3, #253	; 0xfd
 80031ec:	f040 80b5 	bne.w	800335a <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x1de>
	 switch(cmd)
 80031f0:	79bb      	ldrb	r3, [r7, #6]
 80031f2:	3b01      	subs	r3, #1
 80031f4:	2b12      	cmp	r3, #18
 80031f6:	f200 80b2 	bhi.w	800335e <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x1e2>
 80031fa:	a201      	add	r2, pc, #4	; (adr r2, 8003200 <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x84>)
 80031fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003200:	0800324d 	.word	0x0800324d
 8003204:	0800325d 	.word	0x0800325d
 8003208:	0800326d 	.word	0x0800326d
 800320c:	08003281 	.word	0x08003281
 8003210:	0800335f 	.word	0x0800335f
 8003214:	08003295 	.word	0x08003295
 8003218:	080032ad 	.word	0x080032ad
 800321c:	080032c5 	.word	0x080032c5
 8003220:	080032fb 	.word	0x080032fb
 8003224:	0800335f 	.word	0x0800335f
 8003228:	0800335f 	.word	0x0800335f
 800322c:	0800335f 	.word	0x0800335f
 8003230:	0800335f 	.word	0x0800335f
 8003234:	0800335f 	.word	0x0800335f
 8003238:	0800335f 	.word	0x0800335f
 800323c:	08003315 	.word	0x08003315
 8003240:	08003323 	.word	0x08003323
 8003244:	08003333 	.word	0x08003333
 8003248:	080032dd 	.word	0x080032dd


	 case Get_Who_Am_I_Accelerometer:		  //	 0x01  //Enhancing the color difference signal U of the rear view camera


			Config.Acell_whoami = *(ptr + (CMD62_OFFSET ));
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	78da      	ldrb	r2, [r3, #3]
 8003250:	4b4b      	ldr	r3, [pc, #300]	; (8003380 <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x204>)
 8003252:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			offset = 1;
 8003256:	2301      	movs	r3, #1
 8003258:	617b      	str	r3, [r7, #20]

		 break;
 800325a:	e081      	b.n	8003360 <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x1e4>

	 case Get_Who_Am_I_AudioCodec:        // 0x22  0x99 0x02


		 	Config.ACodec_whoami = *(ptr + (CMD62_OFFSET ));
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	78da      	ldrb	r2, [r3, #3]
 8003260:	4b47      	ldr	r3, [pc, #284]	; (8003380 <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x204>)
 8003262:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		 	 offset = 1;
 8003266:	2301      	movs	r3, #1
 8003268:	617b      	str	r3, [r7, #20]


		 break;
 800326a:	e079      	b.n	8003360 <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x1e4>


	 case  Get_SIM_ICCID :         // 0x22  0xFD 0x03
		 memcpy(&Config.ICCID[0], (ptr + (CMD62_OFFSET )), 8 );
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	3303      	adds	r3, #3
 8003270:	2208      	movs	r2, #8
 8003272:	4619      	mov	r1, r3
 8003274:	4843      	ldr	r0, [pc, #268]	; (8003384 <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x208>)
 8003276:	f007 fed9 	bl	800b02c <memcpy>
	 	 offset = 8;
 800327a:	2308      	movs	r3, #8
 800327c:	617b      	str	r3, [r7, #20]
		 break;
 800327e:	e06f      	b.n	8003360 <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x1e4>


	 case	Get_SIM_IMSI:					// 0x22  0x99 0x04

		 memcpy(&Config.IMSI[0], (ptr + (CMD62_OFFSET)), 8 );
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	3303      	adds	r3, #3
 8003284:	2208      	movs	r2, #8
 8003286:	4619      	mov	r1, r3
 8003288:	483f      	ldr	r0, [pc, #252]	; (8003388 <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x20c>)
 800328a:	f007 fecf 	bl	800b02c <memcpy>
			 	 offset = 8;
 800328e:	2308      	movs	r3, #8
 8003290:	617b      	str	r3, [r7, #20]

				 break;
 8003292:	e065      	b.n	8003360 <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x1e4>
		 break;

	 case   (Get_Microphone_ADC ) :         // 0x22 0x99 0x06


		 Config.mic_adc =   get_uint32(ptr + CMD62_OFFSET,   true);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	3303      	adds	r3, #3
 8003298:	2101      	movs	r1, #1
 800329a:	4618      	mov	r0, r3
 800329c:	f7fe fbda 	bl	8001a54 <get_uint32>
 80032a0:	4603      	mov	r3, r0
 80032a2:	4a37      	ldr	r2, [pc, #220]	; (8003380 <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x204>)
 80032a4:	6113      	str	r3, [r2, #16]

		  offset = 4;
 80032a6:	2304      	movs	r3, #4
 80032a8:	617b      	str	r3, [r7, #20]

		  break;
 80032aa:	e059      	b.n	8003360 <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x1e4>

  	 case (Get_KL30_ADC  ):  // 0x22 0x99 0x07

		 Config.kl30 =  get_uint32(ptr + CMD62_OFFSET,   true);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	3303      	adds	r3, #3
 80032b0:	2101      	movs	r1, #1
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fe fbce 	bl	8001a54 <get_uint32>
 80032b8:	4603      	mov	r3, r0
 80032ba:	4a31      	ldr	r2, [pc, #196]	; (8003380 <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x204>)
 80032bc:	6013      	str	r3, [r2, #0]
				  offset = 4;
 80032be:	2304      	movs	r3, #4
 80032c0:	617b      	str	r3, [r7, #20]

		 		break;
 80032c2:	e04d      	b.n	8003360 <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x1e4>
	   case (Get_BATTERY_ADC) :                       // 0x22 0x99 0x08

   //    Config.batt_adc = *ptr;
		 Config.batt_adc  = get_uint32(ptr + CMD62_OFFSET,   true);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	3303      	adds	r3, #3
 80032c8:	2101      	movs	r1, #1
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fe fbc2 	bl	8001a54 <get_uint32>
 80032d0:	4603      	mov	r3, r0
 80032d2:	4a2b      	ldr	r2, [pc, #172]	; (8003380 <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x204>)
 80032d4:	6153      	str	r3, [r2, #20]
		  offset = 4;
 80032d6:	2304      	movs	r3, #4
 80032d8:	617b      	str	r3, [r7, #20]

		break;
 80032da:	e041      	b.n	8003360 <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x1e4>



	    case (Get_VBAT) :
	    	Config.VBat =    *(ptr + (CMD62_OFFSET )) << 8
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	3303      	adds	r3, #3
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	021b      	lsls	r3, r3, #8
	    	               | *(ptr + (CMD62_OFFSET + 1 ));
 80032e4:	b21a      	sxth	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	3304      	adds	r3, #4
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	b21b      	sxth	r3, r3
 80032ee:	4313      	orrs	r3, r2
 80032f0:	b21b      	sxth	r3, r3
 80032f2:	b29a      	uxth	r2, r3
	    	Config.VBat =    *(ptr + (CMD62_OFFSET )) << 8
 80032f4:	4b22      	ldr	r3, [pc, #136]	; (8003380 <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x204>)
 80032f6:	851a      	strh	r2, [r3, #40]	; 0x28
	    break;
 80032f8:	e032      	b.n	8003360 <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x1e4>

	 case (Get_Set_digital_IO_state ) :   // 0x22 0x99 0x09
		 Config.IO_sos_state =  *(ptr + (CMD62_OFFSET ));
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	78da      	ldrb	r2, [r3, #3]
 80032fe:	4b20      	ldr	r3, [pc, #128]	; (8003380 <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x204>)
 8003300:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		 Config.IO_ign_state =  *(ptr + (CMD62_OFFSET + 1));
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	791a      	ldrb	r2, [r3, #4]
 8003308:	4b1d      	ldr	r3, [pc, #116]	; (8003380 <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x204>)
 800330a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		 offset = 2;
 800330e:	2302      	movs	r3, #2
 8003310:	617b      	str	r3, [r7, #20]
     break;
 8003312:	e025      	b.n	8003360 <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x1e4>



  	  case 0x10:					// 0x22  0x99 0x11

		MicNet.GSM_network = *(ptr + (CMD62_OFFSET));
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	78da      	ldrb	r2, [r3, #3]
 8003318:	4b1c      	ldr	r3, [pc, #112]	; (800338c <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x210>)
 800331a:	731a      	strb	r2, [r3, #12]
		  offset = 1;
 800331c:	2301      	movs	r3, #1
 800331e:	617b      	str	r3, [r7, #20]

				break;
 8003320:	e01e      	b.n	8003360 <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x1e4>

	  case Check_GNSS_fix:					// 0x22  0x99 0x11

			Config.GNSS_fix = *(ptr + (CMD62_OFFSET));
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	78da      	ldrb	r2, [r3, #3]
 8003326:	4b16      	ldr	r3, [pc, #88]	; (8003380 <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x204>)
 8003328:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			offset = 1;
 800332c:	2301      	movs	r3, #1
 800332e:	617b      	str	r3, [r7, #20]

			break;
 8003330:	e016      	b.n	8003360 <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x1e4>

		case Check_Satellites:					// 0x22  0x99 0x12

			Config.Sat_num = *(ptr + (CMD62_OFFSET));
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	78da      	ldrb	r2, [r3, #3]
 8003336:	4b12      	ldr	r3, [pc, #72]	; (8003380 <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x204>)
 8003338:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			sat_glonass = *(ptr + (CMD62_OFFSET + 1));
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	791b      	ldrb	r3, [r3, #4]
 8003340:	74fb      	strb	r3, [r7, #19]
			Config.Sat_num += sat_glonass;
 8003342:	4b0f      	ldr	r3, [pc, #60]	; (8003380 <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x204>)
 8003344:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8003348:	7cfb      	ldrb	r3, [r7, #19]
 800334a:	4413      	add	r3, r2
 800334c:	b2da      	uxtb	r2, r3
 800334e:	4b0c      	ldr	r3, [pc, #48]	; (8003380 <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x204>)
 8003350:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			offset = 1;
 8003354:	2301      	movs	r3, #1
 8003356:	617b      	str	r3, [r7, #20]

			break;
 8003358:	e002      	b.n	8003360 <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x1e4>

	 default:
		break;

  	 }
   }
 800335a:	bf00      	nop
 800335c:	e000      	b.n	8003360 <CAN_UDS_Diagnostic_Positive_Response_Single_Data_Read_99_Group+0x1e4>
		break;
 800335e:	bf00      	nop
	  resp->mode = PCI_SINGLE;
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2200      	movs	r2, #0
 8003364:	731a      	strb	r2, [r3, #12]
	     resp->multi_frame = false;
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2200      	movs	r2, #0
 800336a:	711a      	strb	r2, [r3, #4]
	     return offset;
 800336c:	697b      	ldr	r3, [r7, #20]


	}
 800336e:	4618      	mov	r0, r3
 8003370:	3718      	adds	r7, #24
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	20006dd6 	.word	0x20006dd6
 800337c:	200062a9 	.word	0x200062a9
 8003380:	20006d98 	.word	0x20006d98
 8003384:	20006dc6 	.word	0x20006dc6
 8003388:	20006dce 	.word	0x20006dce
 800338c:	20006d78 	.word	0x20006d78

08003390 <CAN_UDS_Request_Parse>:
uint8_t combined_payload[64];

bool CAN_UDS_Request_Parse(  IsoTpMessage *mess , can_message_t  *handle ,
					     DiagnosticRequest* request,
						DiagnosticResponse* response ,
						uint32_t arbitration_id) {
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
 800339c:	603b      	str	r3, [r7, #0]



		uint16_t payload_length;

		 mess->completed= false;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

		switch (handle->data[0] & 0xf0) {
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	7a1b      	ldrb	r3, [r3, #8]
 80033aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033ae:	2b30      	cmp	r3, #48	; 0x30
 80033b0:	f000 80c3 	beq.w	800353a <CAN_UDS_Request_Parse+0x1aa>
 80033b4:	2b30      	cmp	r3, #48	; 0x30
 80033b6:	f300 8137 	bgt.w	8003628 <CAN_UDS_Request_Parse+0x298>
 80033ba:	2b20      	cmp	r3, #32
 80033bc:	f000 80c1 	beq.w	8003542 <CAN_UDS_Request_Parse+0x1b2>
 80033c0:	2b20      	cmp	r3, #32
 80033c2:	f300 8131 	bgt.w	8003628 <CAN_UDS_Request_Parse+0x298>
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <CAN_UDS_Request_Parse+0x40>
 80033ca:	2b10      	cmp	r3, #16
 80033cc:	d05a      	beq.n	8003484 <CAN_UDS_Request_Parse+0xf4>
	            break;
	    }
		default: // thread
		//	request.cmd_id = 0;

			break;
 80033ce:	e12b      	b.n	8003628 <CAN_UDS_Request_Parse+0x298>
		request->pid_length = (handle->data[0] & 0x0f);
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	7a1b      	ldrb	r3, [r3, #8]
 80033d4:	f003 030f 	and.w	r3, r3, #15
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f883 2020 	strb.w	r2, [r3, #32]
		if (request->pid_length > 0) {
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00a      	beq.n	8003400 <CAN_UDS_Request_Parse+0x70>
			memcpy(&mess->payload[0], &handle->data[1], request->pid_length);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	1d18      	adds	r0, r3, #4
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	f103 0109 	add.w	r1, r3, #9
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033fa:	461a      	mov	r2, r3
 80033fc:	f007 fe16 	bl	800b02c <memcpy>
		mess->size = request->pid_length;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003406:	b29a      	uxth	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		response->arbitration_id = handle->data[1];
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	7a5b      	ldrb	r3, [r3, #9]
 8003412:	461a      	mov	r2, r3
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	609a      	str	r2, [r3, #8]
	if(response->arbitration_id == (request->arbitration_id + 0x40))     // answer
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	3340      	adds	r3, #64	; 0x40
 8003422:	429a      	cmp	r2, r3
 8003424:	d118      	bne.n	8003458 <CAN_UDS_Request_Parse+0xc8>
		response->subindex = handle->data[2];
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	7a9a      	ldrb	r2, [r3, #10]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	701a      	strb	r2, [r3, #0]
             if(response->subindex == request->subindex)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	781a      	ldrb	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	791b      	ldrb	r3, [r3, #4]
 8003436:	429a      	cmp	r2, r3
 8003438:	d105      	bne.n	8003446 <CAN_UDS_Request_Parse+0xb6>
                 response-> completed = true;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	2201      	movs	r2, #1
 800343e:	709a      	strb	r2, [r3, #2]
                 response->success = true;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	2201      	movs	r2, #1
 8003444:	70da      	strb	r2, [r3, #3]
		      request->cmd_id = handle->data[3];
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	7ada      	ldrb	r2, [r3, #11]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	715a      	strb	r2, [r3, #5]
		      response->cmd_id = request->cmd_id;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	795a      	ldrb	r2, [r3, #5]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	705a      	strb	r2, [r3, #1]
 8003456:	e009      	b.n	800346c <CAN_UDS_Request_Parse+0xdc>
	       response->negative_response_code = handle->data[3];  // 0x3  7F 22 31
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	7ada      	ldrb	r2, [r3, #11]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	749a      	strb	r2, [r3, #18]
		   response-> completed = false;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	2200      	movs	r2, #0
 8003464:	709a      	strb	r2, [r3, #2]
		   response->success = false;
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2200      	movs	r2, #0
 800346a:	70da      	strb	r2, [r3, #3]
	       if(response-> arbitration_id == OBD2_CMD_WRITE)      // if Request arbitration_id = 0x22 we send a Response
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2b2e      	cmp	r3, #46	; 0x2e
 8003472:	d103      	bne.n	800347c <CAN_UDS_Request_Parse+0xec>
              CAN_UDS_Diagnostic_Send(request, response);
 8003474:	6839      	ldr	r1, [r7, #0]
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f8e2 	bl	8003640 <CAN_UDS_Diagnostic_Send>
		request->pct_num = 0;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	609a      	str	r2, [r3, #8]
		break;
 8003482:	e0d4      	b.n	800362e <CAN_UDS_Request_Parse+0x29e>
			request->pct_num = 1;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	609a      	str	r2, [r3, #8]
		payload_length = sizeof(handle->data); //(get_nibble(data, size, 1) << 8) + get_byte(data, size, 1);
 800348a:	2308      	movs	r3, #8
 800348c:	82bb      	strh	r3, [r7, #20]
		request->payload_length = (handle->data[1]);
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	7a5a      	ldrb	r2, [r3, #9]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		if (request->pid_length > 0x8) {
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800349e:	2b08      	cmp	r3, #8
 80034a0:	d908      	bls.n	80034b4 <CAN_UDS_Request_Parse+0x124>
			request->ltimer = xTaskGetTickCount();
 80034a2:	f005 fb27 	bl	8008af4 <xTaskGetTickCount>
 80034a6:	4602      	mov	r2, r0
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	615a      	str	r2, [r3, #20]
			request->succes = false;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		if (payload_length > OUR_MAX_ISO_TP_MESSAGE_SIZE) {
 80034b4:	8abb      	ldrh	r3, [r7, #20]
 80034b6:	2b40      	cmp	r3, #64	; 0x40
 80034b8:	f200 80b8 	bhi.w	800362c <CAN_UDS_Request_Parse+0x29c>
		memcpy(&combined_payload[0], &handle->data[2], CAN_MESSAGE_BYTE_SIZE - 2);
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	330a      	adds	r3, #10
 80034c0:	2206      	movs	r2, #6
 80034c2:	4619      	mov	r1, r3
 80034c4:	485d      	ldr	r0, [pc, #372]	; (800363c <CAN_UDS_Request_Parse+0x2ac>)
 80034c6:	f007 fdb1 	bl	800b02c <memcpy>
		request->receive_buffer = combined_payload;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a5b      	ldr	r2, [pc, #364]	; (800363c <CAN_UDS_Request_Parse+0x2ac>)
 80034ce:	639a      	str	r2, [r3, #56]	; 0x38
		request->received_buffer_size = CAN_MESSAGE_BYTE_SIZE - 2;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2206      	movs	r2, #6
 80034d4:	879a      	strh	r2, [r3, #60]	; 0x3c
		request->incoming_message_size = request->payload_length;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80034dc:	b29a      	uxth	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	87da      	strh	r2, [r3, #62]	; 0x3e
		mess->multi_frame = true;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
		request->completed = false;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		request->succes = false;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		request->arbitration_id = handle->data[2];  //;0x2e
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	7a9b      	ldrb	r3, [r3, #10]
 80034fe:	461a      	mov	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	601a      	str	r2, [r3, #0]
		response->arbitration_id = request->arbitration_id;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	609a      	str	r2, [r3, #8]
		request->subindex = handle->data[3];   //0xa3
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	7ada      	ldrb	r2, [r3, #11]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	711a      	strb	r2, [r3, #4]
		response->subindex = request->subindex;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	791a      	ldrb	r2, [r3, #4]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	701a      	strb	r2, [r3, #0]
		request->cmd_id = handle->data[4];    //04
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	7b1a      	ldrb	r2, [r3, #12]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	715a      	strb	r2, [r3, #5]
		response->cmd_id = request->cmd_id;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	795a      	ldrb	r2, [r3, #5]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	705a      	strb	r2, [r3, #1]
		IVI_Send_Diagnostic_Single_Response(8, FLOW_CONTROL_ON ,1);
 800352c:	2201      	movs	r2, #1
 800352e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003532:	2008      	movs	r0, #8
 8003534:	f000 f950 	bl	80037d8 <IVI_Send_Diagnostic_Single_Response>
			break;
 8003538:	e079      	b.n	800362e <CAN_UDS_Request_Parse+0x29e>
			response->flow = true;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	2201      	movs	r2, #1
 800353e:	735a      	strb	r2, [r3, #13]
			break;
 8003540:	e075      	b.n	800362e <CAN_UDS_Request_Parse+0x29e>
	            uint8_t start_index = request->received_buffer_size;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003546:	75fb      	strb	r3, [r7, #23]
	            uint8_t remaining_bytes = request->incoming_message_size - start_index;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800354c:	b2da      	uxtb	r2, r3
 800354e:	7dfb      	ldrb	r3, [r7, #23]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	75bb      	strb	r3, [r7, #22]
	            mess->multi_frame = true;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	            request->pct_num  +=1;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	1c5a      	adds	r2, r3, #1
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	609a      	str	r2, [r3, #8]
	           if(remaining_bytes > 7) {
 8003566:	7dbb      	ldrb	r3, [r7, #22]
 8003568:	2b07      	cmp	r3, #7
 800356a:	d916      	bls.n	800359a <CAN_UDS_Request_Parse+0x20a>
	                memcpy(&request->receive_buffer[start_index], &handle->data[1], CAN_MESSAGE_BYTE_SIZE - 1);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003570:	7dfb      	ldrb	r3, [r7, #23]
 8003572:	18d0      	adds	r0, r2, r3
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	3309      	adds	r3, #9
 8003578:	2207      	movs	r2, #7
 800357a:	4619      	mov	r1, r3
 800357c:	f007 fd56 	bl	800b02c <memcpy>
	                request->received_buffer_size = start_index + 7;
 8003580:	7dfb      	ldrb	r3, [r7, #23]
 8003582:	b29b      	uxth	r3, r3
 8003584:	3307      	adds	r3, #7
 8003586:	b29a      	uxth	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	879a      	strh	r2, [r3, #60]	; 0x3c
	                IVI_Send_Diagnostic_Single_Response(
 800358c:	2201      	movs	r2, #1
 800358e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003592:	2008      	movs	r0, #8
 8003594:	f000 f920 	bl	80037d8 <IVI_Send_Diagnostic_Single_Response>
	            break;
 8003598:	e049      	b.n	800362e <CAN_UDS_Request_Parse+0x29e>
	                memcpy(&request->receive_buffer[start_index], &handle->data[1], remaining_bytes);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800359e:	7dfb      	ldrb	r3, [r7, #23]
 80035a0:	18d0      	adds	r0, r2, r3
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	3309      	adds	r3, #9
 80035a6:	7dba      	ldrb	r2, [r7, #22]
 80035a8:	4619      	mov	r1, r3
 80035aa:	f007 fd3f 	bl	800b02c <memcpy>
	                request->received_buffer_size = start_index + remaining_bytes;
 80035ae:	7dfb      	ldrb	r3, [r7, #23]
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	7dbb      	ldrb	r3, [r7, #22]
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	4413      	add	r3, r2
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	879a      	strh	r2, [r3, #60]	; 0x3c
	                if(request->received_buffer_size != request->incoming_message_size){
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d00a      	beq.n	80035e0 <CAN_UDS_Request_Parse+0x250>
	                    request->succes = false;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	                    IVI_Send_Diagnostic_Single_Response(8, ANSWER_NO_ON ,1);
 80035d2:	2201      	movs	r2, #1
 80035d4:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 80035d8:	2008      	movs	r0, #8
 80035da:	f000 f8fd 	bl	80037d8 <IVI_Send_Diagnostic_Single_Response>
	            break;
 80035de:	e026      	b.n	800362e <CAN_UDS_Request_Parse+0x29e>
                        mess->size = request->incoming_message_size;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	                    mess->completed = true;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	                    memcpy(&mess->payload[0],  &request->receive_buffer[0], request->incoming_message_size);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	1d18      	adds	r0, r3, #4
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035fe:	461a      	mov	r2, r3
 8003600:	f007 fd14 	bl	800b02c <memcpy>
	                    request->succes = true;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	                    request->completed = true;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	                    request->pct_num = 0;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	609a      	str	r2, [r3, #8]
	                    response->completed = true;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	2201      	movs	r2, #1
 800361e:	709a      	strb	r2, [r3, #2]
	                    response->success = true;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	2201      	movs	r2, #1
 8003624:	70da      	strb	r2, [r3, #3]
	            break;
 8003626:	e002      	b.n	800362e <CAN_UDS_Request_Parse+0x29e>
			break;
 8003628:	bf00      	nop
 800362a:	e000      	b.n	800362e <CAN_UDS_Request_Parse+0x29e>
			break;
 800362c:	bf00      	nop

		}

		return response->success;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	78db      	ldrb	r3, [r3, #3]
//return 1;
	}
 8003632:	4618      	mov	r0, r3
 8003634:	3718      	adds	r7, #24
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	20006df0 	.word	0x20006df0

08003640 <CAN_UDS_Diagnostic_Send>:
status_t CAN_UDS_Diagnostic_Send (
						DiagnosticRequest* req,
						DiagnosticResponse* resp

						)
 {
 8003640:	b580      	push	{r7, lr}
 8003642:	b088      	sub	sp, #32
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
	status_t status;


		 uint8_t start_index = 0;
 800364a:	2300      	movs	r3, #0
 800364c:	77bb      	strb	r3, [r7, #30]
		 uint8_t remaining_bytes = message.size - start_index;
 800364e:	4b5f      	ldr	r3, [pc, #380]	; (80037cc <CAN_UDS_Diagnostic_Send+0x18c>)
 8003650:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003654:	b2da      	uxtb	r2, r3
 8003656:	7fbb      	ldrb	r3, [r7, #30]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	777b      	strb	r3, [r7, #29]

		// resp->mode = PCI_FIRST_FRAME;

		   can_message_t handle = {
 800365c:	f107 0308 	add.w	r3, r7, #8
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	605a      	str	r2, [r3, #4]
 8003666:	609a      	str	r2, [r3, #8]
 8003668:	60da      	str	r2, [r3, #12]
 800366a:	611a      	str	r2, [r3, #16]
				   .cs =  TxHeader.ExtId,//0U,
				  .id =  TxHeader.StdId,//778,
 800366c:	4b58      	ldr	r3, [pc, #352]	; (80037d0 <CAN_UDS_Diagnostic_Send+0x190>)
 800366e:	681b      	ldr	r3, [r3, #0]
		   can_message_t handle = {
 8003670:	60fb      	str	r3, [r7, #12]
				  .length = TxHeader.DLC,
 8003672:	4b57      	ldr	r3, [pc, #348]	; (80037d0 <CAN_UDS_Diagnostic_Send+0x190>)
 8003674:	691b      	ldr	r3, [r3, #16]
		   can_message_t handle = {
 8003676:	b2db      	uxtb	r3, r3
 8003678:	763b      	strb	r3, [r7, #24]
				   .cs =  TxHeader.ExtId,//0U,
 800367a:	4b55      	ldr	r3, [pc, #340]	; (80037d0 <CAN_UDS_Diagnostic_Send+0x190>)
 800367c:	685b      	ldr	r3, [r3, #4]
		   can_message_t handle = {
 800367e:	b2db      	uxtb	r3, r3
 8003680:	76fb      	strb	r3, [r7, #27]
			            };

		memset(handle.data, 0 , sizeof(handle.data));
 8003682:	f107 0308 	add.w	r3, r7, #8
 8003686:	3308      	adds	r3, #8
 8003688:	2208      	movs	r2, #8
 800368a:	2100      	movs	r1, #0
 800368c:	4618      	mov	r0, r3
 800368e:	f007 fcdb 	bl	800b048 <memset>

		switch (resp->mode) {
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	7b1b      	ldrb	r3, [r3, #12]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d002      	beq.n	80036a0 <CAN_UDS_Diagnostic_Send+0x60>
 800369a:	2b10      	cmp	r3, #16
 800369c:	d010      	beq.n	80036c0 <CAN_UDS_Diagnostic_Send+0x80>


				default: // thread
				//resp->cmd_id = 0;

				break;
 800369e:	e08f      	b.n	80037c0 <CAN_UDS_Diagnostic_Send+0x180>
		       memcpy(&handle.data[0], &message.payload[start_index], 8);
 80036a0:	7fbb      	ldrb	r3, [r7, #30]
 80036a2:	4a4a      	ldr	r2, [pc, #296]	; (80037cc <CAN_UDS_Diagnostic_Send+0x18c>)
 80036a4:	4413      	add	r3, r2
 80036a6:	1d19      	adds	r1, r3, #4
 80036a8:	f107 0308 	add.w	r3, r7, #8
 80036ac:	3308      	adds	r3, #8
 80036ae:	2208      	movs	r2, #8
 80036b0:	4618      	mov	r0, r3
 80036b2:	f007 fcbb 	bl	800b02c <memcpy>
					 	      request.succes = true;
 80036b6:	4b47      	ldr	r3, [pc, #284]	; (80037d4 <CAN_UDS_Diagnostic_Send+0x194>)
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
					break;
 80036be:	e07f      	b.n	80037c0 <CAN_UDS_Diagnostic_Send+0x180>
					resp->pct_num = 1;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					memcpy(&handle.data[0], &message.payload[start_index], CAN_MESSAGE_BYTE_SIZE );
 80036c8:	7fbb      	ldrb	r3, [r7, #30]
 80036ca:	4a40      	ldr	r2, [pc, #256]	; (80037cc <CAN_UDS_Diagnostic_Send+0x18c>)
 80036cc:	4413      	add	r3, r2
 80036ce:	1d19      	adds	r1, r3, #4
 80036d0:	f107 0308 	add.w	r3, r7, #8
 80036d4:	3308      	adds	r3, #8
 80036d6:	2208      	movs	r2, #8
 80036d8:	4618      	mov	r0, r3
 80036da:	f007 fca7 	bl	800b02c <memcpy>
					status = IVI_Send_Frame  (  &handle);
 80036de:	f107 0308 	add.w	r3, r7, #8
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7fd fb4e 	bl	8000d84 <IVI_Send_Frame>
 80036e8:	4603      	mov	r3, r0
 80036ea:	77fb      	strb	r3, [r7, #31]
					resp->ltimer = xTaskGetTickCount();
 80036ec:	f005 fa02 	bl	8008af4 <xTaskGetTickCount>
 80036f0:	4602      	mov	r2, r0
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					resp->success = false;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	2200      	movs	r2, #0
 80036fc:	70da      	strb	r2, [r3, #3]
					start_index += CAN_MESSAGE_BYTE_SIZE ;
 80036fe:	7fbb      	ldrb	r3, [r7, #30]
 8003700:	3308      	adds	r3, #8
 8003702:	77bb      	strb	r3, [r7, #30]
					resp->flow = true;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	2201      	movs	r2, #1
 8003708:	735a      	strb	r2, [r3, #13]
					vTaskDelay(request.STmin);
 800370a:	4b32      	ldr	r3, [pc, #200]	; (80037d4 <CAN_UDS_Diagnostic_Send+0x194>)
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	4618      	mov	r0, r3
 8003710:	f005 f8a0 	bl	8008854 <vTaskDelay>
				if(	CAN_UDS_Diagnostic_Response_Wait(resp, PCI_FLOW_CONTROL_FRAME , N_As *1000))
 8003714:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8003718:	2130      	movs	r1, #48	; 0x30
 800371a:	6838      	ldr	r0, [r7, #0]
 800371c:	f7fe f902 	bl	8001924 <CAN_UDS_Diagnostic_Response_Wait>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <CAN_UDS_Diagnostic_Send+0xec>
					resp->mode = PCI_CONSECUTIVE_FRAME;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2220      	movs	r2, #32
 800372a:	731a      	strb	r2, [r3, #12]
						 remaining_bytes = message.size - start_index;
 800372c:	4b27      	ldr	r3, [pc, #156]	; (80037cc <CAN_UDS_Diagnostic_Send+0x18c>)
 800372e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003732:	b2da      	uxtb	r2, r3
 8003734:	7fbb      	ldrb	r3, [r7, #30]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	777b      	strb	r3, [r7, #29]
						handle.data[0]= (0x20 | resp->pct_num );
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	f043 0320 	orr.w	r3, r3, #32
 8003746:	b2db      	uxtb	r3, r3
 8003748:	743b      	strb	r3, [r7, #16]
						memcpy(&handle.data[1], &message.payload[start_index], remaining_bytes);
 800374a:	7fbb      	ldrb	r3, [r7, #30]
 800374c:	4a1f      	ldr	r2, [pc, #124]	; (80037cc <CAN_UDS_Diagnostic_Send+0x18c>)
 800374e:	4413      	add	r3, r2
 8003750:	1d19      	adds	r1, r3, #4
 8003752:	7f7a      	ldrb	r2, [r7, #29]
 8003754:	f107 0308 	add.w	r3, r7, #8
 8003758:	3309      	adds	r3, #9
 800375a:	4618      	mov	r0, r3
 800375c:	f007 fc66 	bl	800b02c <memcpy>
					    status = IVI_Send_Frame  ( &handle);
 8003760:	f107 0308 	add.w	r3, r7, #8
 8003764:	4618      	mov	r0, r3
 8003766:	f7fd fb0d 	bl	8000d84 <IVI_Send_Frame>
 800376a:	4603      	mov	r3, r0
 800376c:	77fb      	strb	r3, [r7, #31]
						start_index += CAN_MESSAGE_BYTE_SIZE - 1;
 800376e:	7fbb      	ldrb	r3, [r7, #30]
 8003770:	3307      	adds	r3, #7
 8003772:	77bb      	strb	r3, [r7, #30]
						resp->success = false;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	2200      	movs	r2, #0
 8003778:	70da      	strb	r2, [r3, #3]
						resp->pct_num +=1;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
						if(resp->pct_num == 0x0f)  resp->pct_num = 0;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800378e:	2b0f      	cmp	r3, #15
 8003790:	d103      	bne.n	800379a <CAN_UDS_Diagnostic_Send+0x15a>
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2200      	movs	r2, #0
 8003796:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
						vTaskDelay(request.STmin);
 800379a:	4b0e      	ldr	r3, [pc, #56]	; (80037d4 <CAN_UDS_Diagnostic_Send+0x194>)
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	4618      	mov	r0, r3
 80037a0:	f005 f858 	bl	8008854 <vTaskDelay>
					while (remaining_bytes > 7);
 80037a4:	7f7b      	ldrb	r3, [r7, #29]
 80037a6:	2b07      	cmp	r3, #7
 80037a8:	d8c0      	bhi.n	800372c <CAN_UDS_Diagnostic_Send+0xec>
			    	resp->success = true;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	2201      	movs	r2, #1
 80037ae:	70da      	strb	r2, [r3, #3]
					resp->completed = true;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	2201      	movs	r2, #1
 80037b4:	709a      	strb	r2, [r3, #2]
					resp->pct_num = 0;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					 break;
 80037be:	bf00      	nop

							/////request.pid_length
		}

return status;
 80037c0:	7ffb      	ldrb	r3, [r7, #31]
	}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3720      	adds	r7, #32
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	2000633c 	.word	0x2000633c
 80037d0:	20006420 	.word	0x20006420
 80037d4:	20006384 	.word	0x20006384

080037d8 <IVI_Send_Diagnostic_Single_Response>:



status_t  IVI_Send_Diagnostic_Single_Response( /*IsoTpMessage *mess,*/
     								 uint32_t dlc, uint32_t event , uint32_t send )
	{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08a      	sub	sp, #40	; 0x28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
	status_t status;

     can_message_t message = {
 80037e4:	f107 0310 	add.w	r3, r7, #16
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	605a      	str	r2, [r3, #4]
 80037ee:	609a      	str	r2, [r3, #8]
 80037f0:	60da      	str	r2, [r3, #12]
 80037f2:	611a      	str	r2, [r3, #16]
    		 .cs =  TxHeader.ExtId,//0U,
    		 .id =  TxHeader.StdId,//778,
 80037f4:	4b35      	ldr	r3, [pc, #212]	; (80038cc <IVI_Send_Diagnostic_Single_Response+0xf4>)
 80037f6:	681b      	ldr	r3, [r3, #0]
     can_message_t message = {
 80037f8:	617b      	str	r3, [r7, #20]
    		 .length = TxHeader.DLC,
 80037fa:	4b34      	ldr	r3, [pc, #208]	; (80038cc <IVI_Send_Diagnostic_Single_Response+0xf4>)
 80037fc:	691b      	ldr	r3, [r3, #16]
     can_message_t message = {
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	f887 3020 	strb.w	r3, [r7, #32]
    		 .cs =  TxHeader.ExtId,//0U,
 8003804:	4b31      	ldr	r3, [pc, #196]	; (80038cc <IVI_Send_Diagnostic_Single_Response+0xf4>)
 8003806:	685b      	ldr	r3, [r3, #4]
     can_message_t message = {
 8003808:	b2db      	uxtb	r3, r3
 800380a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
         		          };

    	   switch (event){
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003814:	d00c      	beq.n	8003830 <IVI_Send_Diagnostic_Single_Response+0x58>
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800381c:	d843      	bhi.n	80038a6 <IVI_Send_Diagnostic_Single_Response+0xce>
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003824:	d02f      	beq.n	8003886 <IVI_Send_Diagnostic_Single_Response+0xae>
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800382c:	d016      	beq.n	800385c <IVI_Send_Diagnostic_Single_Response+0x84>
   	      	 request.succes = true;
           break;

 	      default:

 	      	break;
 800382e:	e03a      	b.n	80038a6 <IVI_Send_Diagnostic_Single_Response+0xce>
 	      	message.data[0] = (0x30 /*| (request.FS & 0xf)*/);
 8003830:	2330      	movs	r3, #48	; 0x30
 8003832:	763b      	strb	r3, [r7, #24]
 	   		message.data[1] = request.BS;
 8003834:	4b26      	ldr	r3, [pc, #152]	; (80038d0 <IVI_Send_Diagnostic_Single_Response+0xf8>)
 8003836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003838:	b2db      	uxtb	r3, r3
 800383a:	767b      	strb	r3, [r7, #25]
 	   		message.data[2] = request.STmin;
 800383c:	4b24      	ldr	r3, [pc, #144]	; (80038d0 <IVI_Send_Diagnostic_Single_Response+0xf8>)
 800383e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003840:	b2db      	uxtb	r3, r3
 8003842:	76bb      	strb	r3, [r7, #26]
 	   		memset(&message.data[3], 0xaa, (message.length - 3));
 8003844:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003848:	3b03      	subs	r3, #3
 800384a:	461a      	mov	r2, r3
 800384c:	f107 0310 	add.w	r3, r7, #16
 8003850:	330b      	adds	r3, #11
 8003852:	21aa      	movs	r1, #170	; 0xaa
 8003854:	4618      	mov	r0, r3
 8003856:	f007 fbf7 	bl	800b048 <memset>
          break;
 800385a:	e025      	b.n	80038a8 <IVI_Send_Diagnostic_Single_Response+0xd0>
 	      message.data[0] =  ((PCI_SINGLE ) | 0x8) ;
 800385c:	2308      	movs	r3, #8
 800385e:	763b      	strb	r3, [r7, #24]
 	      message.data[1] = request.arbitration_id + 0x40; //request.arbitration_id + 0x40;;
 8003860:	4b1b      	ldr	r3, [pc, #108]	; (80038d0 <IVI_Send_Diagnostic_Single_Response+0xf8>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	b2db      	uxtb	r3, r3
 8003866:	3340      	adds	r3, #64	; 0x40
 8003868:	b2db      	uxtb	r3, r3
 800386a:	767b      	strb	r3, [r7, #25]
 	      message.data[2] = request.subindex; //request.arbitration_id + 0x40;
 800386c:	4b18      	ldr	r3, [pc, #96]	; (80038d0 <IVI_Send_Diagnostic_Single_Response+0xf8>)
 800386e:	791b      	ldrb	r3, [r3, #4]
 8003870:	76bb      	strb	r3, [r7, #26]
 	      message.data[3] = request.cmd_id;
 8003872:	4b17      	ldr	r3, [pc, #92]	; (80038d0 <IVI_Send_Diagnostic_Single_Response+0xf8>)
 8003874:	795b      	ldrb	r3, [r3, #5]
 8003876:	76fb      	strb	r3, [r7, #27]
 	      message.data[4] = OBD2_ANSWER_OK;
 8003878:	2300      	movs	r3, #0
 800387a:	773b      	strb	r3, [r7, #28]
 	      request.succes = true;
 800387c:	4b14      	ldr	r3, [pc, #80]	; (80038d0 <IVI_Send_Diagnostic_Single_Response+0xf8>)
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 	      break;
 8003884:	e010      	b.n	80038a8 <IVI_Send_Diagnostic_Single_Response+0xd0>
 	      	  message.data[0] = ((PCI_SINGLE )| 0x8) ;
 8003886:	2308      	movs	r3, #8
 8003888:	763b      	strb	r3, [r7, #24]
 	      	  message.data[1] = request.arbitration_id ;;
 800388a:	4b11      	ldr	r3, [pc, #68]	; (80038d0 <IVI_Send_Diagnostic_Single_Response+0xf8>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	b2db      	uxtb	r3, r3
 8003890:	767b      	strb	r3, [r7, #25]
 	      	  message.data[2] = 0x7F; //request.arbitration_id + 0x40;
 8003892:	237f      	movs	r3, #127	; 0x7f
 8003894:	76bb      	strb	r3, [r7, #26]
 	      	  message.data[3] = response.negative_response_code;
 8003896:	4b0f      	ldr	r3, [pc, #60]	; (80038d4 <IVI_Send_Diagnostic_Single_Response+0xfc>)
 8003898:	7c9b      	ldrb	r3, [r3, #18]
 800389a:	76fb      	strb	r3, [r7, #27]
   	      	 request.succes = true;
 800389c:	4b0c      	ldr	r3, [pc, #48]	; (80038d0 <IVI_Send_Diagnostic_Single_Response+0xf8>)
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
           break;
 80038a4:	e000      	b.n	80038a8 <IVI_Send_Diagnostic_Single_Response+0xd0>
 	      	break;
 80038a6:	bf00      	nop

    	 }
   //  }

     if(send)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d007      	beq.n	80038be <IVI_Send_Diagnostic_Single_Response+0xe6>
          status = IVI_Send_Frame  (  &message);
 80038ae:	f107 0310 	add.w	r3, r7, #16
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fd fa66 	bl	8000d84 <IVI_Send_Frame>
 80038b8:	4603      	mov	r3, r0
 80038ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

return status;
 80038be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
	}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3728      	adds	r7, #40	; 0x28
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20006420 	.word	0x20006420
 80038d0:	20006384 	.word	0x20006384
 80038d4:	200061e0 	.word	0x200061e0

080038d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80038d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003910 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80038dc:	480d      	ldr	r0, [pc, #52]	; (8003914 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80038de:	490e      	ldr	r1, [pc, #56]	; (8003918 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80038e0:	4a0e      	ldr	r2, [pc, #56]	; (800391c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80038e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038e4:	e002      	b.n	80038ec <LoopCopyDataInit>

080038e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038ea:	3304      	adds	r3, #4

080038ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038f0:	d3f9      	bcc.n	80038e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038f2:	4a0b      	ldr	r2, [pc, #44]	; (8003920 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80038f4:	4c0b      	ldr	r4, [pc, #44]	; (8003924 <LoopFillZerobss+0x26>)
  movs r3, #0
 80038f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038f8:	e001      	b.n	80038fe <LoopFillZerobss>

080038fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038fc:	3204      	adds	r2, #4

080038fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003900:	d3fb      	bcc.n	80038fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003902:	f7ff fc29 	bl	8003158 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003906:	f007 fb6b 	bl	800afe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800390a:	f7fe fd8f 	bl	800242c <main>
  bx  lr    
 800390e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003910:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003918:	20000360 	.word	0x20000360
  ldr r2, =_sidata
 800391c:	0801d1b4 	.word	0x0801d1b4
  ldr r2, =_sbss
 8003920:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 8003924:	20006e94 	.word	0x20006e94

08003928 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003928:	e7fe      	b.n	8003928 <ADC_IRQHandler>
	...

0800392c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003930:	4b0e      	ldr	r3, [pc, #56]	; (800396c <HAL_Init+0x40>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a0d      	ldr	r2, [pc, #52]	; (800396c <HAL_Init+0x40>)
 8003936:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800393a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800393c:	4b0b      	ldr	r3, [pc, #44]	; (800396c <HAL_Init+0x40>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a0a      	ldr	r2, [pc, #40]	; (800396c <HAL_Init+0x40>)
 8003942:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003946:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003948:	4b08      	ldr	r3, [pc, #32]	; (800396c <HAL_Init+0x40>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a07      	ldr	r2, [pc, #28]	; (800396c <HAL_Init+0x40>)
 800394e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003952:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003954:	2003      	movs	r0, #3
 8003956:	f001 f94e 	bl	8004bf6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800395a:	200f      	movs	r0, #15
 800395c:	f7ff fb4c 	bl	8002ff8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003960:	f7fe ffc6 	bl	80028f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40023c00 	.word	0x40023c00

08003970 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003974:	4b06      	ldr	r3, [pc, #24]	; (8003990 <HAL_IncTick+0x20>)
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	461a      	mov	r2, r3
 800397a:	4b06      	ldr	r3, [pc, #24]	; (8003994 <HAL_IncTick+0x24>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4413      	add	r3, r2
 8003980:	4a04      	ldr	r2, [pc, #16]	; (8003994 <HAL_IncTick+0x24>)
 8003982:	6013      	str	r3, [r2, #0]
}
 8003984:	bf00      	nop
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	200002f4 	.word	0x200002f4
 8003994:	20006e44 	.word	0x20006e44

08003998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  return uwTick;
 800399c:	4b03      	ldr	r3, [pc, #12]	; (80039ac <HAL_GetTick+0x14>)
 800399e:	681b      	ldr	r3, [r3, #0]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	20006e44 	.word	0x20006e44

080039b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039b8:	f7ff ffee 	bl	8003998 <HAL_GetTick>
 80039bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c8:	d005      	beq.n	80039d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039ca:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <HAL_Delay+0x44>)
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	461a      	mov	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4413      	add	r3, r2
 80039d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039d6:	bf00      	nop
 80039d8:	f7ff ffde 	bl	8003998 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d8f7      	bhi.n	80039d8 <HAL_Delay+0x28>
  {
  }
}
 80039e8:	bf00      	nop
 80039ea:	bf00      	nop
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	200002f4 	.word	0x200002f4

080039f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e033      	b.n	8003a76 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d109      	bne.n	8003a2a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7ff f930 	bl	8002c7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	f003 0310 	and.w	r3, r3, #16
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d118      	bne.n	8003a68 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a3e:	f023 0302 	bic.w	r3, r3, #2
 8003a42:	f043 0202 	orr.w	r2, r3, #2
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 fae8 	bl	8004020 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	f023 0303 	bic.w	r3, r3, #3
 8003a5e:	f043 0201 	orr.w	r2, r3, #1
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	641a      	str	r2, [r3, #64]	; 0x40
 8003a66:	e001      	b.n	8003a6c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
	...

08003a80 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d101      	bne.n	8003a9a <HAL_ADC_Start+0x1a>
 8003a96:	2302      	movs	r3, #2
 8003a98:	e0b2      	b.n	8003c00 <HAL_ADC_Start+0x180>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d018      	beq.n	8003ae2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689a      	ldr	r2, [r3, #8]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f042 0201 	orr.w	r2, r2, #1
 8003abe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ac0:	4b52      	ldr	r3, [pc, #328]	; (8003c0c <HAL_ADC_Start+0x18c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a52      	ldr	r2, [pc, #328]	; (8003c10 <HAL_ADC_Start+0x190>)
 8003ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aca:	0c9a      	lsrs	r2, r3, #18
 8003acc:	4613      	mov	r3, r2
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	4413      	add	r3, r2
 8003ad2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003ad4:	e002      	b.n	8003adc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1f9      	bne.n	8003ad6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d17a      	bne.n	8003be6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003af8:	f023 0301 	bic.w	r3, r3, #1
 8003afc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d007      	beq.n	8003b22 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b1a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b2e:	d106      	bne.n	8003b3e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b34:	f023 0206 	bic.w	r2, r3, #6
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	645a      	str	r2, [r3, #68]	; 0x44
 8003b3c:	e002      	b.n	8003b44 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b4c:	4b31      	ldr	r3, [pc, #196]	; (8003c14 <HAL_ADC_Start+0x194>)
 8003b4e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003b58:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f003 031f 	and.w	r3, r3, #31
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d12a      	bne.n	8003bbc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a2b      	ldr	r2, [pc, #172]	; (8003c18 <HAL_ADC_Start+0x198>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d015      	beq.n	8003b9c <HAL_ADC_Start+0x11c>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a29      	ldr	r2, [pc, #164]	; (8003c1c <HAL_ADC_Start+0x19c>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d105      	bne.n	8003b86 <HAL_ADC_Start+0x106>
 8003b7a:	4b26      	ldr	r3, [pc, #152]	; (8003c14 <HAL_ADC_Start+0x194>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f003 031f 	and.w	r3, r3, #31
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00a      	beq.n	8003b9c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a25      	ldr	r2, [pc, #148]	; (8003c20 <HAL_ADC_Start+0x1a0>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d136      	bne.n	8003bfe <HAL_ADC_Start+0x17e>
 8003b90:	4b20      	ldr	r3, [pc, #128]	; (8003c14 <HAL_ADC_Start+0x194>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f003 0310 	and.w	r3, r3, #16
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d130      	bne.n	8003bfe <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d129      	bne.n	8003bfe <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003bb8:	609a      	str	r2, [r3, #8]
 8003bba:	e020      	b.n	8003bfe <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a15      	ldr	r2, [pc, #84]	; (8003c18 <HAL_ADC_Start+0x198>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d11b      	bne.n	8003bfe <HAL_ADC_Start+0x17e>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d114      	bne.n	8003bfe <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003be2:	609a      	str	r2, [r3, #8]
 8003be4:	e00b      	b.n	8003bfe <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	f043 0210 	orr.w	r2, r3, #16
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf6:	f043 0201 	orr.w	r2, r3, #1
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3714      	adds	r7, #20
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	200002ec 	.word	0x200002ec
 8003c10:	431bde83 	.word	0x431bde83
 8003c14:	40012300 	.word	0x40012300
 8003c18:	40012000 	.word	0x40012000
 8003c1c:	40012100 	.word	0x40012100
 8003c20:	40012200 	.word	0x40012200

08003c24 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d101      	bne.n	8003c3a <HAL_ADC_Stop+0x16>
 8003c36:	2302      	movs	r3, #2
 8003c38:	e021      	b.n	8003c7e <HAL_ADC_Stop+0x5a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 0201 	bic.w	r2, r2, #1
 8003c50:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d109      	bne.n	8003c74 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c64:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c68:	f023 0301 	bic.w	r3, r3, #1
 8003c6c:	f043 0201 	orr.w	r2, r3, #1
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b084      	sub	sp, #16
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
 8003c92:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ca6:	d113      	bne.n	8003cd0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cb6:	d10b      	bne.n	8003cd0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	f043 0220 	orr.w	r2, r3, #32
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e063      	b.n	8003d98 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003cd0:	f7ff fe62 	bl	8003998 <HAL_GetTick>
 8003cd4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003cd6:	e021      	b.n	8003d1c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cde:	d01d      	beq.n	8003d1c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d007      	beq.n	8003cf6 <HAL_ADC_PollForConversion+0x6c>
 8003ce6:	f7ff fe57 	bl	8003998 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d212      	bcs.n	8003d1c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d00b      	beq.n	8003d1c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d08:	f043 0204 	orr.w	r2, r3, #4
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e03d      	b.n	8003d98 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d1d6      	bne.n	8003cd8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f06f 0212 	mvn.w	r2, #18
 8003d32:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d123      	bne.n	8003d96 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d11f      	bne.n	8003d96 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d006      	beq.n	8003d72 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d111      	bne.n	8003d96 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d105      	bne.n	8003d96 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	f043 0201 	orr.w	r2, r3, #1
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
	...

08003dbc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d101      	bne.n	8003dd8 <HAL_ADC_ConfigChannel+0x1c>
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	e113      	b.n	8004000 <HAL_ADC_ConfigChannel+0x244>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2b09      	cmp	r3, #9
 8003de6:	d925      	bls.n	8003e34 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68d9      	ldr	r1, [r3, #12]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	461a      	mov	r2, r3
 8003df6:	4613      	mov	r3, r2
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	4413      	add	r3, r2
 8003dfc:	3b1e      	subs	r3, #30
 8003dfe:	2207      	movs	r2, #7
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	43da      	mvns	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	400a      	ands	r2, r1
 8003e0c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68d9      	ldr	r1, [r3, #12]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	4618      	mov	r0, r3
 8003e20:	4603      	mov	r3, r0
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	4403      	add	r3, r0
 8003e26:	3b1e      	subs	r3, #30
 8003e28:	409a      	lsls	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	60da      	str	r2, [r3, #12]
 8003e32:	e022      	b.n	8003e7a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6919      	ldr	r1, [r3, #16]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	461a      	mov	r2, r3
 8003e42:	4613      	mov	r3, r2
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	4413      	add	r3, r2
 8003e48:	2207      	movs	r2, #7
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	43da      	mvns	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	400a      	ands	r2, r1
 8003e56:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6919      	ldr	r1, [r3, #16]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	4618      	mov	r0, r3
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	4403      	add	r3, r0
 8003e70:	409a      	lsls	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2b06      	cmp	r3, #6
 8003e80:	d824      	bhi.n	8003ecc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4413      	add	r3, r2
 8003e92:	3b05      	subs	r3, #5
 8003e94:	221f      	movs	r2, #31
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	43da      	mvns	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	400a      	ands	r2, r1
 8003ea2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4413      	add	r3, r2
 8003ebc:	3b05      	subs	r3, #5
 8003ebe:	fa00 f203 	lsl.w	r2, r0, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	635a      	str	r2, [r3, #52]	; 0x34
 8003eca:	e04c      	b.n	8003f66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2b0c      	cmp	r3, #12
 8003ed2:	d824      	bhi.n	8003f1e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4413      	add	r3, r2
 8003ee4:	3b23      	subs	r3, #35	; 0x23
 8003ee6:	221f      	movs	r2, #31
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	43da      	mvns	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	400a      	ands	r2, r1
 8003ef4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	4618      	mov	r0, r3
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	3b23      	subs	r3, #35	; 0x23
 8003f10:	fa00 f203 	lsl.w	r2, r0, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	631a      	str	r2, [r3, #48]	; 0x30
 8003f1c:	e023      	b.n	8003f66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4413      	add	r3, r2
 8003f2e:	3b41      	subs	r3, #65	; 0x41
 8003f30:	221f      	movs	r2, #31
 8003f32:	fa02 f303 	lsl.w	r3, r2, r3
 8003f36:	43da      	mvns	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	400a      	ands	r2, r1
 8003f3e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	4613      	mov	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	3b41      	subs	r3, #65	; 0x41
 8003f5a:	fa00 f203 	lsl.w	r2, r0, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f66:	4b29      	ldr	r3, [pc, #164]	; (800400c <HAL_ADC_ConfigChannel+0x250>)
 8003f68:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a28      	ldr	r2, [pc, #160]	; (8004010 <HAL_ADC_ConfigChannel+0x254>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d10f      	bne.n	8003f94 <HAL_ADC_ConfigChannel+0x1d8>
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b12      	cmp	r3, #18
 8003f7a:	d10b      	bne.n	8003f94 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a1d      	ldr	r2, [pc, #116]	; (8004010 <HAL_ADC_ConfigChannel+0x254>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d12b      	bne.n	8003ff6 <HAL_ADC_ConfigChannel+0x23a>
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a1c      	ldr	r2, [pc, #112]	; (8004014 <HAL_ADC_ConfigChannel+0x258>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d003      	beq.n	8003fb0 <HAL_ADC_ConfigChannel+0x1f4>
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2b11      	cmp	r3, #17
 8003fae:	d122      	bne.n	8003ff6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a11      	ldr	r2, [pc, #68]	; (8004014 <HAL_ADC_ConfigChannel+0x258>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d111      	bne.n	8003ff6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003fd2:	4b11      	ldr	r3, [pc, #68]	; (8004018 <HAL_ADC_ConfigChannel+0x25c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a11      	ldr	r2, [pc, #68]	; (800401c <HAL_ADC_ConfigChannel+0x260>)
 8003fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fdc:	0c9a      	lsrs	r2, r3, #18
 8003fde:	4613      	mov	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4413      	add	r3, r2
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003fe8:	e002      	b.n	8003ff0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	3b01      	subs	r3, #1
 8003fee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f9      	bne.n	8003fea <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	40012300 	.word	0x40012300
 8004010:	40012000 	.word	0x40012000
 8004014:	10000012 	.word	0x10000012
 8004018:	200002ec 	.word	0x200002ec
 800401c:	431bde83 	.word	0x431bde83

08004020 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004028:	4b79      	ldr	r3, [pc, #484]	; (8004210 <ADC_Init+0x1f0>)
 800402a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	431a      	orrs	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004054:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6859      	ldr	r1, [r3, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	021a      	lsls	r2, r3, #8
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004078:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6859      	ldr	r1, [r3, #4]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689a      	ldr	r2, [r3, #8]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800409a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6899      	ldr	r1, [r3, #8]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68da      	ldr	r2, [r3, #12]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b2:	4a58      	ldr	r2, [pc, #352]	; (8004214 <ADC_Init+0x1f4>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d022      	beq.n	80040fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689a      	ldr	r2, [r3, #8]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6899      	ldr	r1, [r3, #8]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	689a      	ldr	r2, [r3, #8]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80040e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6899      	ldr	r1, [r3, #8]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	609a      	str	r2, [r3, #8]
 80040fc:	e00f      	b.n	800411e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800410c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689a      	ldr	r2, [r3, #8]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800411c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	689a      	ldr	r2, [r3, #8]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 0202 	bic.w	r2, r2, #2
 800412c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6899      	ldr	r1, [r3, #8]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	7e1b      	ldrb	r3, [r3, #24]
 8004138:	005a      	lsls	r2, r3, #1
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d01b      	beq.n	8004184 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800415a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685a      	ldr	r2, [r3, #4]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800416a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6859      	ldr	r1, [r3, #4]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	3b01      	subs	r3, #1
 8004178:	035a      	lsls	r2, r3, #13
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	605a      	str	r2, [r3, #4]
 8004182:	e007      	b.n	8004194 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004192:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80041a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	3b01      	subs	r3, #1
 80041b0:	051a      	lsls	r2, r3, #20
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80041c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6899      	ldr	r1, [r3, #8]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80041d6:	025a      	lsls	r2, r3, #9
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689a      	ldr	r2, [r3, #8]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6899      	ldr	r1, [r3, #8]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	029a      	lsls	r2, r3, #10
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	609a      	str	r2, [r3, #8]
}
 8004204:	bf00      	nop
 8004206:	3714      	adds	r7, #20
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	40012300 	.word	0x40012300
 8004214:	0f000001 	.word	0x0f000001

08004218 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e0ed      	b.n	8004406 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d102      	bne.n	800423c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7fe fb86 	bl	8002948 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0201 	orr.w	r2, r2, #1
 800424a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800424c:	f7ff fba4 	bl	8003998 <HAL_GetTick>
 8004250:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004252:	e012      	b.n	800427a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004254:	f7ff fba0 	bl	8003998 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b0a      	cmp	r3, #10
 8004260:	d90b      	bls.n	800427a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2205      	movs	r2, #5
 8004272:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e0c5      	b.n	8004406 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0e5      	beq.n	8004254 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0202 	bic.w	r2, r2, #2
 8004296:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004298:	f7ff fb7e 	bl	8003998 <HAL_GetTick>
 800429c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800429e:	e012      	b.n	80042c6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80042a0:	f7ff fb7a 	bl	8003998 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b0a      	cmp	r3, #10
 80042ac:	d90b      	bls.n	80042c6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2205      	movs	r2, #5
 80042be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e09f      	b.n	8004406 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1e5      	bne.n	80042a0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	7e1b      	ldrb	r3, [r3, #24]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d108      	bne.n	80042ee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	e007      	b.n	80042fe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	7e5b      	ldrb	r3, [r3, #25]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d108      	bne.n	8004318 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004314:	601a      	str	r2, [r3, #0]
 8004316:	e007      	b.n	8004328 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004326:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	7e9b      	ldrb	r3, [r3, #26]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d108      	bne.n	8004342 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f042 0220 	orr.w	r2, r2, #32
 800433e:	601a      	str	r2, [r3, #0]
 8004340:	e007      	b.n	8004352 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0220 	bic.w	r2, r2, #32
 8004350:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	7edb      	ldrb	r3, [r3, #27]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d108      	bne.n	800436c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 0210 	bic.w	r2, r2, #16
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	e007      	b.n	800437c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 0210 	orr.w	r2, r2, #16
 800437a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	7f1b      	ldrb	r3, [r3, #28]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d108      	bne.n	8004396 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0208 	orr.w	r2, r2, #8
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	e007      	b.n	80043a6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0208 	bic.w	r2, r2, #8
 80043a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	7f5b      	ldrb	r3, [r3, #29]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d108      	bne.n	80043c0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f042 0204 	orr.w	r2, r2, #4
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	e007      	b.n	80043d0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 0204 	bic.w	r2, r2, #4
 80043ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	431a      	orrs	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	431a      	orrs	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	ea42 0103 	orr.w	r1, r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	1e5a      	subs	r2, r3, #1
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
	...

08004410 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004410:	b480      	push	{r7}
 8004412:	b087      	sub	sp, #28
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004426:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004428:	7cfb      	ldrb	r3, [r7, #19]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d003      	beq.n	8004436 <HAL_CAN_ConfigFilter+0x26>
 800442e:	7cfb      	ldrb	r3, [r7, #19]
 8004430:	2b02      	cmp	r3, #2
 8004432:	f040 80be 	bne.w	80045b2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004436:	4b65      	ldr	r3, [pc, #404]	; (80045cc <HAL_CAN_ConfigFilter+0x1bc>)
 8004438:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004440:	f043 0201 	orr.w	r2, r3, #1
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004450:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	021b      	lsls	r3, r3, #8
 8004466:	431a      	orrs	r2, r3
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	f003 031f 	and.w	r3, r3, #31
 8004476:	2201      	movs	r2, #1
 8004478:	fa02 f303 	lsl.w	r3, r2, r3
 800447c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	43db      	mvns	r3, r3
 8004488:	401a      	ands	r2, r3
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d123      	bne.n	80044e0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	43db      	mvns	r3, r3
 80044a2:	401a      	ands	r2, r3
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80044ba:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	3248      	adds	r2, #72	; 0x48
 80044c0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80044d4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80044d6:	6979      	ldr	r1, [r7, #20]
 80044d8:	3348      	adds	r3, #72	; 0x48
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	440b      	add	r3, r1
 80044de:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d122      	bne.n	800452e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	431a      	orrs	r2, r3
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004508:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	3248      	adds	r2, #72	; 0x48
 800450e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004522:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004524:	6979      	ldr	r1, [r7, #20]
 8004526:	3348      	adds	r3, #72	; 0x48
 8004528:	00db      	lsls	r3, r3, #3
 800452a:	440b      	add	r3, r1
 800452c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d109      	bne.n	800454a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	43db      	mvns	r3, r3
 8004540:	401a      	ands	r2, r3
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004548:	e007      	b.n	800455a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	431a      	orrs	r2, r3
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d109      	bne.n	8004576 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	43db      	mvns	r3, r3
 800456c:	401a      	ands	r2, r3
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004574:	e007      	b.n	8004586 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	431a      	orrs	r2, r3
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d107      	bne.n	800459e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	431a      	orrs	r2, r3
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80045a4:	f023 0201 	bic.w	r2, r3, #1
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80045ae:	2300      	movs	r3, #0
 80045b0:	e006      	b.n	80045c0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
  }
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	371c      	adds	r7, #28
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	40006400 	.word	0x40006400

080045d0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d12e      	bne.n	8004642 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 0201 	bic.w	r2, r2, #1
 80045fa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045fc:	f7ff f9cc 	bl	8003998 <HAL_GetTick>
 8004600:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004602:	e012      	b.n	800462a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004604:	f7ff f9c8 	bl	8003998 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b0a      	cmp	r3, #10
 8004610:	d90b      	bls.n	800462a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2205      	movs	r2, #5
 8004622:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e012      	b.n	8004650 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1e5      	bne.n	8004604 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	e006      	b.n	8004650 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
  }
}
 8004650:	4618      	mov	r0, r3
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004658:	b480      	push	{r7}
 800465a:	b089      	sub	sp, #36	; 0x24
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
 8004664:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f893 3020 	ldrb.w	r3, [r3, #32]
 800466c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004676:	7ffb      	ldrb	r3, [r7, #31]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d003      	beq.n	8004684 <HAL_CAN_AddTxMessage+0x2c>
 800467c:	7ffb      	ldrb	r3, [r7, #31]
 800467e:	2b02      	cmp	r3, #2
 8004680:	f040 80b8 	bne.w	80047f4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10a      	bne.n	80046a4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004694:	2b00      	cmp	r3, #0
 8004696:	d105      	bne.n	80046a4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 80a0 	beq.w	80047e4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	0e1b      	lsrs	r3, r3, #24
 80046a8:	f003 0303 	and.w	r3, r3, #3
 80046ac:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d907      	bls.n	80046c4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e09e      	b.n	8004802 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80046c4:	2201      	movs	r2, #1
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	409a      	lsls	r2, r3
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10d      	bne.n	80046f2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80046e0:	68f9      	ldr	r1, [r7, #12]
 80046e2:	6809      	ldr	r1, [r1, #0]
 80046e4:	431a      	orrs	r2, r3
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	3318      	adds	r3, #24
 80046ea:	011b      	lsls	r3, r3, #4
 80046ec:	440b      	add	r3, r1
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	e00f      	b.n	8004712 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80046fc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004702:	68f9      	ldr	r1, [r7, #12]
 8004704:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004706:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	3318      	adds	r3, #24
 800470c:	011b      	lsls	r3, r3, #4
 800470e:	440b      	add	r3, r1
 8004710:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6819      	ldr	r1, [r3, #0]
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	691a      	ldr	r2, [r3, #16]
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	3318      	adds	r3, #24
 800471e:	011b      	lsls	r3, r3, #4
 8004720:	440b      	add	r3, r1
 8004722:	3304      	adds	r3, #4
 8004724:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	7d1b      	ldrb	r3, [r3, #20]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d111      	bne.n	8004752 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	3318      	adds	r3, #24
 8004736:	011b      	lsls	r3, r3, #4
 8004738:	4413      	add	r3, r2
 800473a:	3304      	adds	r3, #4
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	6811      	ldr	r1, [r2, #0]
 8004742:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	3318      	adds	r3, #24
 800474a:	011b      	lsls	r3, r3, #4
 800474c:	440b      	add	r3, r1
 800474e:	3304      	adds	r3, #4
 8004750:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	3307      	adds	r3, #7
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	061a      	lsls	r2, r3, #24
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	3306      	adds	r3, #6
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	041b      	lsls	r3, r3, #16
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3305      	adds	r3, #5
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	021b      	lsls	r3, r3, #8
 800476c:	4313      	orrs	r3, r2
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	3204      	adds	r2, #4
 8004772:	7812      	ldrb	r2, [r2, #0]
 8004774:	4610      	mov	r0, r2
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	6811      	ldr	r1, [r2, #0]
 800477a:	ea43 0200 	orr.w	r2, r3, r0
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	011b      	lsls	r3, r3, #4
 8004782:	440b      	add	r3, r1
 8004784:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004788:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	3303      	adds	r3, #3
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	061a      	lsls	r2, r3, #24
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	3302      	adds	r3, #2
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	041b      	lsls	r3, r3, #16
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	3301      	adds	r3, #1
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	021b      	lsls	r3, r3, #8
 80047a4:	4313      	orrs	r3, r2
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	7812      	ldrb	r2, [r2, #0]
 80047aa:	4610      	mov	r0, r2
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	6811      	ldr	r1, [r2, #0]
 80047b0:	ea43 0200 	orr.w	r2, r3, r0
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	440b      	add	r3, r1
 80047ba:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80047be:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	3318      	adds	r3, #24
 80047c8:	011b      	lsls	r3, r3, #4
 80047ca:	4413      	add	r3, r2
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	6811      	ldr	r1, [r2, #0]
 80047d2:	f043 0201 	orr.w	r2, r3, #1
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	3318      	adds	r3, #24
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	440b      	add	r3, r1
 80047de:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80047e0:	2300      	movs	r3, #0
 80047e2:	e00e      	b.n	8004802 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e006      	b.n	8004802 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
  }
}
 8004802:	4618      	mov	r0, r3
 8004804:	3724      	adds	r7, #36	; 0x24
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800480e:	b480      	push	{r7}
 8004810:	b085      	sub	sp, #20
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8004816:	2300      	movs	r3, #0
 8004818:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004820:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8004822:	7afb      	ldrb	r3, [r7, #11]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d002      	beq.n	800482e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8004828:	7afb      	ldrb	r3, [r7, #11]
 800482a:	2b02      	cmp	r3, #2
 800482c:	d11d      	bne.n	800486a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d002      	beq.n	8004842 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	3301      	adds	r3, #1
 8004840:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	3301      	adds	r3, #1
 8004854:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d002      	beq.n	800486a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	3301      	adds	r3, #1
 8004868:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800486a:	68fb      	ldr	r3, [r7, #12]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004878:	b480      	push	{r7}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
 8004884:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f893 3020 	ldrb.w	r3, [r3, #32]
 800488c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800488e:	7dfb      	ldrb	r3, [r7, #23]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d003      	beq.n	800489c <HAL_CAN_GetRxMessage+0x24>
 8004894:	7dfb      	ldrb	r3, [r7, #23]
 8004896:	2b02      	cmp	r3, #2
 8004898:	f040 80f3 	bne.w	8004a82 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10e      	bne.n	80048c0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f003 0303 	and.w	r3, r3, #3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d116      	bne.n	80048de <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e0e7      	b.n	8004a90 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	f003 0303 	and.w	r3, r3, #3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d107      	bne.n	80048de <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e0d8      	b.n	8004a90 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	331b      	adds	r3, #27
 80048e6:	011b      	lsls	r3, r3, #4
 80048e8:	4413      	add	r3, r2
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0204 	and.w	r2, r3, #4
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10c      	bne.n	8004916 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	331b      	adds	r3, #27
 8004904:	011b      	lsls	r3, r3, #4
 8004906:	4413      	add	r3, r2
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	0d5b      	lsrs	r3, r3, #21
 800490c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	e00b      	b.n	800492e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	331b      	adds	r3, #27
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	4413      	add	r3, r2
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	08db      	lsrs	r3, r3, #3
 8004926:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	331b      	adds	r3, #27
 8004936:	011b      	lsls	r3, r3, #4
 8004938:	4413      	add	r3, r2
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0202 	and.w	r2, r3, #2
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	331b      	adds	r3, #27
 800494c:	011b      	lsls	r3, r3, #4
 800494e:	4413      	add	r3, r2
 8004950:	3304      	adds	r3, #4
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 020f 	and.w	r2, r3, #15
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	331b      	adds	r3, #27
 8004964:	011b      	lsls	r3, r3, #4
 8004966:	4413      	add	r3, r2
 8004968:	3304      	adds	r3, #4
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	0a1b      	lsrs	r3, r3, #8
 800496e:	b2da      	uxtb	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	331b      	adds	r3, #27
 800497c:	011b      	lsls	r3, r3, #4
 800497e:	4413      	add	r3, r2
 8004980:	3304      	adds	r3, #4
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	0c1b      	lsrs	r3, r3, #16
 8004986:	b29a      	uxth	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	011b      	lsls	r3, r3, #4
 8004994:	4413      	add	r3, r2
 8004996:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	b2da      	uxtb	r2, r3
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	011b      	lsls	r3, r3, #4
 80049aa:	4413      	add	r3, r2
 80049ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	0a1a      	lsrs	r2, r3, #8
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	3301      	adds	r3, #1
 80049b8:	b2d2      	uxtb	r2, r2
 80049ba:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	011b      	lsls	r3, r3, #4
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	0c1a      	lsrs	r2, r3, #16
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	3302      	adds	r3, #2
 80049d2:	b2d2      	uxtb	r2, r2
 80049d4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	011b      	lsls	r3, r3, #4
 80049de:	4413      	add	r3, r2
 80049e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	0e1a      	lsrs	r2, r3, #24
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	3303      	adds	r3, #3
 80049ec:	b2d2      	uxtb	r2, r2
 80049ee:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	011b      	lsls	r3, r3, #4
 80049f8:	4413      	add	r3, r2
 80049fa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	3304      	adds	r3, #4
 8004a04:	b2d2      	uxtb	r2, r2
 8004a06:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	011b      	lsls	r3, r3, #4
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	0a1a      	lsrs	r2, r3, #8
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	3305      	adds	r3, #5
 8004a1e:	b2d2      	uxtb	r2, r2
 8004a20:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	011b      	lsls	r3, r3, #4
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	0c1a      	lsrs	r2, r3, #16
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	3306      	adds	r3, #6
 8004a38:	b2d2      	uxtb	r2, r2
 8004a3a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	011b      	lsls	r3, r3, #4
 8004a44:	4413      	add	r3, r2
 8004a46:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	0e1a      	lsrs	r2, r3, #24
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	3307      	adds	r3, #7
 8004a52:	b2d2      	uxtb	r2, r2
 8004a54:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d108      	bne.n	8004a6e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 0220 	orr.w	r2, r2, #32
 8004a6a:	60da      	str	r2, [r3, #12]
 8004a6c:	e007      	b.n	8004a7e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	691a      	ldr	r2, [r3, #16]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f042 0220 	orr.w	r2, r2, #32
 8004a7c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	e006      	b.n	8004a90 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
  }
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	371c      	adds	r7, #28
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f003 0307 	and.w	r3, r3, #7
 8004aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004aac:	4b0c      	ldr	r3, [pc, #48]	; (8004ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ab8:	4013      	ands	r3, r2
 8004aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ace:	4a04      	ldr	r2, [pc, #16]	; (8004ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	60d3      	str	r3, [r2, #12]
}
 8004ad4:	bf00      	nop
 8004ad6:	3714      	adds	r7, #20
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	e000ed00 	.word	0xe000ed00

08004ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ae8:	4b04      	ldr	r3, [pc, #16]	; (8004afc <__NVIC_GetPriorityGrouping+0x18>)
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	0a1b      	lsrs	r3, r3, #8
 8004aee:	f003 0307 	and.w	r3, r3, #7
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	e000ed00 	.word	0xe000ed00

08004b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	4603      	mov	r3, r0
 8004b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	db0b      	blt.n	8004b2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b12:	79fb      	ldrb	r3, [r7, #7]
 8004b14:	f003 021f 	and.w	r2, r3, #31
 8004b18:	4907      	ldr	r1, [pc, #28]	; (8004b38 <__NVIC_EnableIRQ+0x38>)
 8004b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b1e:	095b      	lsrs	r3, r3, #5
 8004b20:	2001      	movs	r0, #1
 8004b22:	fa00 f202 	lsl.w	r2, r0, r2
 8004b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	e000e100 	.word	0xe000e100

08004b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	4603      	mov	r3, r0
 8004b44:	6039      	str	r1, [r7, #0]
 8004b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	db0a      	blt.n	8004b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	b2da      	uxtb	r2, r3
 8004b54:	490c      	ldr	r1, [pc, #48]	; (8004b88 <__NVIC_SetPriority+0x4c>)
 8004b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b5a:	0112      	lsls	r2, r2, #4
 8004b5c:	b2d2      	uxtb	r2, r2
 8004b5e:	440b      	add	r3, r1
 8004b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b64:	e00a      	b.n	8004b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	b2da      	uxtb	r2, r3
 8004b6a:	4908      	ldr	r1, [pc, #32]	; (8004b8c <__NVIC_SetPriority+0x50>)
 8004b6c:	79fb      	ldrb	r3, [r7, #7]
 8004b6e:	f003 030f 	and.w	r3, r3, #15
 8004b72:	3b04      	subs	r3, #4
 8004b74:	0112      	lsls	r2, r2, #4
 8004b76:	b2d2      	uxtb	r2, r2
 8004b78:	440b      	add	r3, r1
 8004b7a:	761a      	strb	r2, [r3, #24]
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	e000e100 	.word	0xe000e100
 8004b8c:	e000ed00 	.word	0xe000ed00

08004b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b089      	sub	sp, #36	; 0x24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f003 0307 	and.w	r3, r3, #7
 8004ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	f1c3 0307 	rsb	r3, r3, #7
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	bf28      	it	cs
 8004bae:	2304      	movcs	r3, #4
 8004bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	2b06      	cmp	r3, #6
 8004bb8:	d902      	bls.n	8004bc0 <NVIC_EncodePriority+0x30>
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	3b03      	subs	r3, #3
 8004bbe:	e000      	b.n	8004bc2 <NVIC_EncodePriority+0x32>
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	fa02 f303 	lsl.w	r3, r2, r3
 8004bce:	43da      	mvns	r2, r3
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	401a      	ands	r2, r3
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	fa01 f303 	lsl.w	r3, r1, r3
 8004be2:	43d9      	mvns	r1, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004be8:	4313      	orrs	r3, r2
         );
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3724      	adds	r7, #36	; 0x24
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b082      	sub	sp, #8
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f7ff ff4c 	bl	8004a9c <__NVIC_SetPriorityGrouping>
}
 8004c04:	bf00      	nop
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	4603      	mov	r3, r0
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
 8004c18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c1e:	f7ff ff61 	bl	8004ae4 <__NVIC_GetPriorityGrouping>
 8004c22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	68b9      	ldr	r1, [r7, #8]
 8004c28:	6978      	ldr	r0, [r7, #20]
 8004c2a:	f7ff ffb1 	bl	8004b90 <NVIC_EncodePriority>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c34:	4611      	mov	r1, r2
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7ff ff80 	bl	8004b3c <__NVIC_SetPriority>
}
 8004c3c:	bf00      	nop
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7ff ff54 	bl	8004b00 <__NVIC_EnableIRQ>
}
 8004c58:	bf00      	nop
 8004c5a:	3708      	adds	r7, #8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e014      	b.n	8004c9c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	791b      	ldrb	r3, [r3, #4]
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d105      	bne.n	8004c88 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7fe f8f2 	bl	8002e6c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	795b      	ldrb	r3, [r3, #5]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d101      	bne.n	8004cba <HAL_DAC_Start+0x16>
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	e040      	b.n	8004d3c <HAL_DAC_Start+0x98>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6819      	ldr	r1, [r3, #0]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	f003 0310 	and.w	r3, r3, #16
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	409a      	lsls	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10f      	bne.n	8004d04 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8004cee:	2b3c      	cmp	r3, #60	; 0x3c
 8004cf0:	d11d      	bne.n	8004d2e <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f042 0201 	orr.w	r2, r2, #1
 8004d00:	605a      	str	r2, [r3, #4]
 8004d02:	e014      	b.n	8004d2e <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	f003 0310 	and.w	r3, r3, #16
 8004d14:	213c      	movs	r1, #60	; 0x3c
 8004d16:	fa01 f303 	lsl.w	r3, r1, r3
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d107      	bne.n	8004d2e <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f042 0202 	orr.w	r2, r2, #2
 8004d2c:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6819      	ldr	r1, [r3, #0]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	f003 0310 	and.w	r3, r3, #16
 8004d5e:	2201      	movs	r2, #1
 8004d60:	fa02 f303 	lsl.w	r3, r2, r3
 8004d64:	43da      	mvns	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	400a      	ands	r2, r1
 8004d6c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b082      	sub	sp, #8
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d98:	d120      	bne.n	8004ddc <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004da4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004da8:	d118      	bne.n	8004ddc <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2204      	movs	r2, #4
 8004dae:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	f043 0201 	orr.w	r2, r3, #1
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004dc4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004dd4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f852 	bl	8004e80 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004de6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dea:	d120      	bne.n	8004e2e <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004df6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dfa:	d118      	bne.n	8004e2e <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2204      	movs	r2, #4
 8004e00:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	f043 0202 	orr.w	r2, r3, #2
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004e16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004e26:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 f882 	bl	8004f32 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8004e2e:	bf00      	nop
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b087      	sub	sp, #28
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	60f8      	str	r0, [r7, #12]
 8004e3e:	60b9      	str	r1, [r7, #8]
 8004e40:	607a      	str	r2, [r7, #4]
 8004e42:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004e44:	2300      	movs	r3, #0
 8004e46:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d105      	bne.n	8004e60 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4413      	add	r3, r2
 8004e5a:	3308      	adds	r3, #8
 8004e5c:	617b      	str	r3, [r7, #20]
 8004e5e:	e004      	b.n	8004e6a <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4413      	add	r3, r2
 8004e66:	3314      	adds	r3, #20
 8004e68:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	371c      	adds	r7, #28
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b087      	sub	sp, #28
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	795b      	ldrb	r3, [r3, #5]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d101      	bne.n	8004eac <HAL_DAC_ConfigChannel+0x18>
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	e03c      	b.n	8004f26 <HAL_DAC_ConfigChannel+0x92>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2202      	movs	r2, #2
 8004eb6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f003 0310 	and.w	r3, r3, #16
 8004ec6:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004eca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ece:	43db      	mvns	r3, r3
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f003 0310 	and.w	r3, r3, #16
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	fa02 f303 	lsl.w	r3, r2, r3
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6819      	ldr	r1, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f003 0310 	and.w	r3, r3, #16
 8004f08:	22c0      	movs	r2, #192	; 0xc0
 8004f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0e:	43da      	mvns	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	400a      	ands	r2, r1
 8004f16:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	371c      	adds	r7, #28
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b083      	sub	sp, #12
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004f3a:	bf00      	nop
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b084      	sub	sp, #16
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f52:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004f54:	f7fe fd20 	bl	8003998 <HAL_GetTick>
 8004f58:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d008      	beq.n	8004f78 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2280      	movs	r2, #128	; 0x80
 8004f6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e052      	b.n	800501e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 0216 	bic.w	r2, r2, #22
 8004f86:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	695a      	ldr	r2, [r3, #20]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f96:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d103      	bne.n	8004fa8 <HAL_DMA_Abort+0x62>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d007      	beq.n	8004fb8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 0208 	bic.w	r2, r2, #8
 8004fb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f022 0201 	bic.w	r2, r2, #1
 8004fc6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fc8:	e013      	b.n	8004ff2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004fca:	f7fe fce5 	bl	8003998 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b05      	cmp	r3, #5
 8004fd6:	d90c      	bls.n	8004ff2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2203      	movs	r2, #3
 8004fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e015      	b.n	800501e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1e4      	bne.n	8004fca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005004:	223f      	movs	r2, #63	; 0x3f
 8005006:	409a      	lsls	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005026:	b480      	push	{r7}
 8005028:	b083      	sub	sp, #12
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d004      	beq.n	8005044 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2280      	movs	r2, #128	; 0x80
 800503e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e00c      	b.n	800505e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2205      	movs	r2, #5
 8005048:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f022 0201 	bic.w	r2, r2, #1
 800505a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
	...

0800506c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800506c:	b480      	push	{r7}
 800506e:	b089      	sub	sp, #36	; 0x24
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005076:	2300      	movs	r3, #0
 8005078:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800507a:	2300      	movs	r3, #0
 800507c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800507e:	2300      	movs	r3, #0
 8005080:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005082:	2300      	movs	r3, #0
 8005084:	61fb      	str	r3, [r7, #28]
 8005086:	e177      	b.n	8005378 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005088:	2201      	movs	r2, #1
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	fa02 f303 	lsl.w	r3, r2, r3
 8005090:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	4013      	ands	r3, r2
 800509a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	f040 8166 	bne.w	8005372 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f003 0303 	and.w	r3, r3, #3
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d005      	beq.n	80050be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d130      	bne.n	8005120 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	005b      	lsls	r3, r3, #1
 80050c8:	2203      	movs	r2, #3
 80050ca:	fa02 f303 	lsl.w	r3, r2, r3
 80050ce:	43db      	mvns	r3, r3
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	4013      	ands	r3, r2
 80050d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	005b      	lsls	r3, r3, #1
 80050de:	fa02 f303 	lsl.w	r3, r2, r3
 80050e2:	69ba      	ldr	r2, [r7, #24]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050f4:	2201      	movs	r2, #1
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	fa02 f303 	lsl.w	r3, r2, r3
 80050fc:	43db      	mvns	r3, r3
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	4013      	ands	r3, r2
 8005102:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	091b      	lsrs	r3, r3, #4
 800510a:	f003 0201 	and.w	r2, r3, #1
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	fa02 f303 	lsl.w	r3, r2, r3
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	4313      	orrs	r3, r2
 8005118:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	69ba      	ldr	r2, [r7, #24]
 800511e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f003 0303 	and.w	r3, r3, #3
 8005128:	2b03      	cmp	r3, #3
 800512a:	d017      	beq.n	800515c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	2203      	movs	r2, #3
 8005138:	fa02 f303 	lsl.w	r3, r2, r3
 800513c:	43db      	mvns	r3, r3
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	4013      	ands	r3, r2
 8005142:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	689a      	ldr	r2, [r3, #8]
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	fa02 f303 	lsl.w	r3, r2, r3
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	4313      	orrs	r3, r2
 8005154:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f003 0303 	and.w	r3, r3, #3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d123      	bne.n	80051b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	08da      	lsrs	r2, r3, #3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	3208      	adds	r2, #8
 8005170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005174:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	f003 0307 	and.w	r3, r3, #7
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	220f      	movs	r2, #15
 8005180:	fa02 f303 	lsl.w	r3, r2, r3
 8005184:	43db      	mvns	r3, r3
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	4013      	ands	r3, r2
 800518a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	691a      	ldr	r2, [r3, #16]
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	f003 0307 	and.w	r3, r3, #7
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	fa02 f303 	lsl.w	r3, r2, r3
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	4313      	orrs	r3, r2
 80051a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	08da      	lsrs	r2, r3, #3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	3208      	adds	r2, #8
 80051aa:	69b9      	ldr	r1, [r7, #24]
 80051ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	2203      	movs	r2, #3
 80051bc:	fa02 f303 	lsl.w	r3, r2, r3
 80051c0:	43db      	mvns	r3, r3
 80051c2:	69ba      	ldr	r2, [r7, #24]
 80051c4:	4013      	ands	r3, r2
 80051c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f003 0203 	and.w	r2, r3, #3
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	005b      	lsls	r3, r3, #1
 80051d4:	fa02 f303 	lsl.w	r3, r2, r3
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	4313      	orrs	r3, r2
 80051dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 80c0 	beq.w	8005372 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051f2:	2300      	movs	r3, #0
 80051f4:	60fb      	str	r3, [r7, #12]
 80051f6:	4b66      	ldr	r3, [pc, #408]	; (8005390 <HAL_GPIO_Init+0x324>)
 80051f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051fa:	4a65      	ldr	r2, [pc, #404]	; (8005390 <HAL_GPIO_Init+0x324>)
 80051fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005200:	6453      	str	r3, [r2, #68]	; 0x44
 8005202:	4b63      	ldr	r3, [pc, #396]	; (8005390 <HAL_GPIO_Init+0x324>)
 8005204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800520a:	60fb      	str	r3, [r7, #12]
 800520c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800520e:	4a61      	ldr	r2, [pc, #388]	; (8005394 <HAL_GPIO_Init+0x328>)
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	089b      	lsrs	r3, r3, #2
 8005214:	3302      	adds	r3, #2
 8005216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800521a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	f003 0303 	and.w	r3, r3, #3
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	220f      	movs	r2, #15
 8005226:	fa02 f303 	lsl.w	r3, r2, r3
 800522a:	43db      	mvns	r3, r3
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	4013      	ands	r3, r2
 8005230:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a58      	ldr	r2, [pc, #352]	; (8005398 <HAL_GPIO_Init+0x32c>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d037      	beq.n	80052aa <HAL_GPIO_Init+0x23e>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a57      	ldr	r2, [pc, #348]	; (800539c <HAL_GPIO_Init+0x330>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d031      	beq.n	80052a6 <HAL_GPIO_Init+0x23a>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a56      	ldr	r2, [pc, #344]	; (80053a0 <HAL_GPIO_Init+0x334>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d02b      	beq.n	80052a2 <HAL_GPIO_Init+0x236>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a55      	ldr	r2, [pc, #340]	; (80053a4 <HAL_GPIO_Init+0x338>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d025      	beq.n	800529e <HAL_GPIO_Init+0x232>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a54      	ldr	r2, [pc, #336]	; (80053a8 <HAL_GPIO_Init+0x33c>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d01f      	beq.n	800529a <HAL_GPIO_Init+0x22e>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a53      	ldr	r2, [pc, #332]	; (80053ac <HAL_GPIO_Init+0x340>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d019      	beq.n	8005296 <HAL_GPIO_Init+0x22a>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a52      	ldr	r2, [pc, #328]	; (80053b0 <HAL_GPIO_Init+0x344>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d013      	beq.n	8005292 <HAL_GPIO_Init+0x226>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a51      	ldr	r2, [pc, #324]	; (80053b4 <HAL_GPIO_Init+0x348>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d00d      	beq.n	800528e <HAL_GPIO_Init+0x222>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a50      	ldr	r2, [pc, #320]	; (80053b8 <HAL_GPIO_Init+0x34c>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d007      	beq.n	800528a <HAL_GPIO_Init+0x21e>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a4f      	ldr	r2, [pc, #316]	; (80053bc <HAL_GPIO_Init+0x350>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d101      	bne.n	8005286 <HAL_GPIO_Init+0x21a>
 8005282:	2309      	movs	r3, #9
 8005284:	e012      	b.n	80052ac <HAL_GPIO_Init+0x240>
 8005286:	230a      	movs	r3, #10
 8005288:	e010      	b.n	80052ac <HAL_GPIO_Init+0x240>
 800528a:	2308      	movs	r3, #8
 800528c:	e00e      	b.n	80052ac <HAL_GPIO_Init+0x240>
 800528e:	2307      	movs	r3, #7
 8005290:	e00c      	b.n	80052ac <HAL_GPIO_Init+0x240>
 8005292:	2306      	movs	r3, #6
 8005294:	e00a      	b.n	80052ac <HAL_GPIO_Init+0x240>
 8005296:	2305      	movs	r3, #5
 8005298:	e008      	b.n	80052ac <HAL_GPIO_Init+0x240>
 800529a:	2304      	movs	r3, #4
 800529c:	e006      	b.n	80052ac <HAL_GPIO_Init+0x240>
 800529e:	2303      	movs	r3, #3
 80052a0:	e004      	b.n	80052ac <HAL_GPIO_Init+0x240>
 80052a2:	2302      	movs	r3, #2
 80052a4:	e002      	b.n	80052ac <HAL_GPIO_Init+0x240>
 80052a6:	2301      	movs	r3, #1
 80052a8:	e000      	b.n	80052ac <HAL_GPIO_Init+0x240>
 80052aa:	2300      	movs	r3, #0
 80052ac:	69fa      	ldr	r2, [r7, #28]
 80052ae:	f002 0203 	and.w	r2, r2, #3
 80052b2:	0092      	lsls	r2, r2, #2
 80052b4:	4093      	lsls	r3, r2
 80052b6:	69ba      	ldr	r2, [r7, #24]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052bc:	4935      	ldr	r1, [pc, #212]	; (8005394 <HAL_GPIO_Init+0x328>)
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	089b      	lsrs	r3, r3, #2
 80052c2:	3302      	adds	r3, #2
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052ca:	4b3d      	ldr	r3, [pc, #244]	; (80053c0 <HAL_GPIO_Init+0x354>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	43db      	mvns	r3, r3
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	4013      	ands	r3, r2
 80052d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80052e6:	69ba      	ldr	r2, [r7, #24]
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80052ee:	4a34      	ldr	r2, [pc, #208]	; (80053c0 <HAL_GPIO_Init+0x354>)
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052f4:	4b32      	ldr	r3, [pc, #200]	; (80053c0 <HAL_GPIO_Init+0x354>)
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	43db      	mvns	r3, r3
 80052fe:	69ba      	ldr	r2, [r7, #24]
 8005300:	4013      	ands	r3, r2
 8005302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d003      	beq.n	8005318 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005310:	69ba      	ldr	r2, [r7, #24]
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	4313      	orrs	r3, r2
 8005316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005318:	4a29      	ldr	r2, [pc, #164]	; (80053c0 <HAL_GPIO_Init+0x354>)
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800531e:	4b28      	ldr	r3, [pc, #160]	; (80053c0 <HAL_GPIO_Init+0x354>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	43db      	mvns	r3, r3
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	4013      	ands	r3, r2
 800532c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	4313      	orrs	r3, r2
 8005340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005342:	4a1f      	ldr	r2, [pc, #124]	; (80053c0 <HAL_GPIO_Init+0x354>)
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005348:	4b1d      	ldr	r3, [pc, #116]	; (80053c0 <HAL_GPIO_Init+0x354>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	43db      	mvns	r3, r3
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	4013      	ands	r3, r2
 8005356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d003      	beq.n	800536c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	4313      	orrs	r3, r2
 800536a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800536c:	4a14      	ldr	r2, [pc, #80]	; (80053c0 <HAL_GPIO_Init+0x354>)
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	3301      	adds	r3, #1
 8005376:	61fb      	str	r3, [r7, #28]
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	2b0f      	cmp	r3, #15
 800537c:	f67f ae84 	bls.w	8005088 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005380:	bf00      	nop
 8005382:	bf00      	nop
 8005384:	3724      	adds	r7, #36	; 0x24
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	40023800 	.word	0x40023800
 8005394:	40013800 	.word	0x40013800
 8005398:	40020000 	.word	0x40020000
 800539c:	40020400 	.word	0x40020400
 80053a0:	40020800 	.word	0x40020800
 80053a4:	40020c00 	.word	0x40020c00
 80053a8:	40021000 	.word	0x40021000
 80053ac:	40021400 	.word	0x40021400
 80053b0:	40021800 	.word	0x40021800
 80053b4:	40021c00 	.word	0x40021c00
 80053b8:	40022000 	.word	0x40022000
 80053bc:	40022400 	.word	0x40022400
 80053c0:	40013c00 	.word	0x40013c00

080053c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	460b      	mov	r3, r1
 80053ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	691a      	ldr	r2, [r3, #16]
 80053d4:	887b      	ldrh	r3, [r7, #2]
 80053d6:	4013      	ands	r3, r2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d002      	beq.n	80053e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80053dc:	2301      	movs	r3, #1
 80053de:	73fb      	strb	r3, [r7, #15]
 80053e0:	e001      	b.n	80053e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80053e2:	2300      	movs	r3, #0
 80053e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80053e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3714      	adds	r7, #20
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	460b      	mov	r3, r1
 80053fe:	807b      	strh	r3, [r7, #2]
 8005400:	4613      	mov	r3, r2
 8005402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005404:	787b      	ldrb	r3, [r7, #1]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d003      	beq.n	8005412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800540a:	887a      	ldrh	r2, [r7, #2]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005410:	e003      	b.n	800541a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005412:	887b      	ldrh	r3, [r7, #2]
 8005414:	041a      	lsls	r2, r3, #16
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	619a      	str	r2, [r3, #24]
}
 800541a:	bf00      	nop
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
	...

08005428 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	4603      	mov	r3, r0
 8005430:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005432:	4b08      	ldr	r3, [pc, #32]	; (8005454 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005434:	695a      	ldr	r2, [r3, #20]
 8005436:	88fb      	ldrh	r3, [r7, #6]
 8005438:	4013      	ands	r3, r2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d006      	beq.n	800544c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800543e:	4a05      	ldr	r2, [pc, #20]	; (8005454 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005440:	88fb      	ldrh	r3, [r7, #6]
 8005442:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005444:	88fb      	ldrh	r3, [r7, #6]
 8005446:	4618      	mov	r0, r3
 8005448:	f7fc fd86 	bl	8001f58 <HAL_GPIO_EXTI_Callback>
  }
}
 800544c:	bf00      	nop
 800544e:	3708      	adds	r7, #8
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	40013c00 	.word	0x40013c00

08005458 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e264      	b.n	8005934 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	d075      	beq.n	8005562 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005476:	4ba3      	ldr	r3, [pc, #652]	; (8005704 <HAL_RCC_OscConfig+0x2ac>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f003 030c 	and.w	r3, r3, #12
 800547e:	2b04      	cmp	r3, #4
 8005480:	d00c      	beq.n	800549c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005482:	4ba0      	ldr	r3, [pc, #640]	; (8005704 <HAL_RCC_OscConfig+0x2ac>)
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800548a:	2b08      	cmp	r3, #8
 800548c:	d112      	bne.n	80054b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800548e:	4b9d      	ldr	r3, [pc, #628]	; (8005704 <HAL_RCC_OscConfig+0x2ac>)
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005496:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800549a:	d10b      	bne.n	80054b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800549c:	4b99      	ldr	r3, [pc, #612]	; (8005704 <HAL_RCC_OscConfig+0x2ac>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d05b      	beq.n	8005560 <HAL_RCC_OscConfig+0x108>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d157      	bne.n	8005560 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e23f      	b.n	8005934 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054bc:	d106      	bne.n	80054cc <HAL_RCC_OscConfig+0x74>
 80054be:	4b91      	ldr	r3, [pc, #580]	; (8005704 <HAL_RCC_OscConfig+0x2ac>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a90      	ldr	r2, [pc, #576]	; (8005704 <HAL_RCC_OscConfig+0x2ac>)
 80054c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054c8:	6013      	str	r3, [r2, #0]
 80054ca:	e01d      	b.n	8005508 <HAL_RCC_OscConfig+0xb0>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054d4:	d10c      	bne.n	80054f0 <HAL_RCC_OscConfig+0x98>
 80054d6:	4b8b      	ldr	r3, [pc, #556]	; (8005704 <HAL_RCC_OscConfig+0x2ac>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a8a      	ldr	r2, [pc, #552]	; (8005704 <HAL_RCC_OscConfig+0x2ac>)
 80054dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054e0:	6013      	str	r3, [r2, #0]
 80054e2:	4b88      	ldr	r3, [pc, #544]	; (8005704 <HAL_RCC_OscConfig+0x2ac>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a87      	ldr	r2, [pc, #540]	; (8005704 <HAL_RCC_OscConfig+0x2ac>)
 80054e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054ec:	6013      	str	r3, [r2, #0]
 80054ee:	e00b      	b.n	8005508 <HAL_RCC_OscConfig+0xb0>
 80054f0:	4b84      	ldr	r3, [pc, #528]	; (8005704 <HAL_RCC_OscConfig+0x2ac>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a83      	ldr	r2, [pc, #524]	; (8005704 <HAL_RCC_OscConfig+0x2ac>)
 80054f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054fa:	6013      	str	r3, [r2, #0]
 80054fc:	4b81      	ldr	r3, [pc, #516]	; (8005704 <HAL_RCC_OscConfig+0x2ac>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a80      	ldr	r2, [pc, #512]	; (8005704 <HAL_RCC_OscConfig+0x2ac>)
 8005502:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005506:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d013      	beq.n	8005538 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005510:	f7fe fa42 	bl	8003998 <HAL_GetTick>
 8005514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005516:	e008      	b.n	800552a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005518:	f7fe fa3e 	bl	8003998 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b64      	cmp	r3, #100	; 0x64
 8005524:	d901      	bls.n	800552a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e204      	b.n	8005934 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800552a:	4b76      	ldr	r3, [pc, #472]	; (8005704 <HAL_RCC_OscConfig+0x2ac>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d0f0      	beq.n	8005518 <HAL_RCC_OscConfig+0xc0>
 8005536:	e014      	b.n	8005562 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005538:	f7fe fa2e 	bl	8003998 <HAL_GetTick>
 800553c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800553e:	e008      	b.n	8005552 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005540:	f7fe fa2a 	bl	8003998 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b64      	cmp	r3, #100	; 0x64
 800554c:	d901      	bls.n	8005552 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e1f0      	b.n	8005934 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005552:	4b6c      	ldr	r3, [pc, #432]	; (8005704 <HAL_RCC_OscConfig+0x2ac>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1f0      	bne.n	8005540 <HAL_RCC_OscConfig+0xe8>
 800555e:	e000      	b.n	8005562 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005560:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d063      	beq.n	8005636 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800556e:	4b65      	ldr	r3, [pc, #404]	; (8005704 <HAL_RCC_OscConfig+0x2ac>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f003 030c 	and.w	r3, r3, #12
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00b      	beq.n	8005592 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800557a:	4b62      	ldr	r3, [pc, #392]	; (8005704 <HAL_RCC_OscConfig+0x2ac>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005582:	2b08      	cmp	r3, #8
 8005584:	d11c      	bne.n	80055c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005586:	4b5f      	ldr	r3, [pc, #380]	; (8005704 <HAL_RCC_OscConfig+0x2ac>)
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d116      	bne.n	80055c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005592:	4b5c      	ldr	r3, [pc, #368]	; (8005704 <HAL_RCC_OscConfig+0x2ac>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d005      	beq.n	80055aa <HAL_RCC_OscConfig+0x152>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d001      	beq.n	80055aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e1c4      	b.n	8005934 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055aa:	4b56      	ldr	r3, [pc, #344]	; (8005704 <HAL_RCC_OscConfig+0x2ac>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	00db      	lsls	r3, r3, #3
 80055b8:	4952      	ldr	r1, [pc, #328]	; (8005704 <HAL_RCC_OscConfig+0x2ac>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055be:	e03a      	b.n	8005636 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d020      	beq.n	800560a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055c8:	4b4f      	ldr	r3, [pc, #316]	; (8005708 <HAL_RCC_OscConfig+0x2b0>)
 80055ca:	2201      	movs	r2, #1
 80055cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ce:	f7fe f9e3 	bl	8003998 <HAL_GetTick>
 80055d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055d4:	e008      	b.n	80055e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055d6:	f7fe f9df 	bl	8003998 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d901      	bls.n	80055e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e1a5      	b.n	8005934 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055e8:	4b46      	ldr	r3, [pc, #280]	; (8005704 <HAL_RCC_OscConfig+0x2ac>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d0f0      	beq.n	80055d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055f4:	4b43      	ldr	r3, [pc, #268]	; (8005704 <HAL_RCC_OscConfig+0x2ac>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	00db      	lsls	r3, r3, #3
 8005602:	4940      	ldr	r1, [pc, #256]	; (8005704 <HAL_RCC_OscConfig+0x2ac>)
 8005604:	4313      	orrs	r3, r2
 8005606:	600b      	str	r3, [r1, #0]
 8005608:	e015      	b.n	8005636 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800560a:	4b3f      	ldr	r3, [pc, #252]	; (8005708 <HAL_RCC_OscConfig+0x2b0>)
 800560c:	2200      	movs	r2, #0
 800560e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005610:	f7fe f9c2 	bl	8003998 <HAL_GetTick>
 8005614:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005616:	e008      	b.n	800562a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005618:	f7fe f9be 	bl	8003998 <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	2b02      	cmp	r3, #2
 8005624:	d901      	bls.n	800562a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e184      	b.n	8005934 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800562a:	4b36      	ldr	r3, [pc, #216]	; (8005704 <HAL_RCC_OscConfig+0x2ac>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0302 	and.w	r3, r3, #2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1f0      	bne.n	8005618 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0308 	and.w	r3, r3, #8
 800563e:	2b00      	cmp	r3, #0
 8005640:	d030      	beq.n	80056a4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d016      	beq.n	8005678 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800564a:	4b30      	ldr	r3, [pc, #192]	; (800570c <HAL_RCC_OscConfig+0x2b4>)
 800564c:	2201      	movs	r2, #1
 800564e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005650:	f7fe f9a2 	bl	8003998 <HAL_GetTick>
 8005654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005656:	e008      	b.n	800566a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005658:	f7fe f99e 	bl	8003998 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b02      	cmp	r3, #2
 8005664:	d901      	bls.n	800566a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e164      	b.n	8005934 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800566a:	4b26      	ldr	r3, [pc, #152]	; (8005704 <HAL_RCC_OscConfig+0x2ac>)
 800566c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d0f0      	beq.n	8005658 <HAL_RCC_OscConfig+0x200>
 8005676:	e015      	b.n	80056a4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005678:	4b24      	ldr	r3, [pc, #144]	; (800570c <HAL_RCC_OscConfig+0x2b4>)
 800567a:	2200      	movs	r2, #0
 800567c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800567e:	f7fe f98b 	bl	8003998 <HAL_GetTick>
 8005682:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005684:	e008      	b.n	8005698 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005686:	f7fe f987 	bl	8003998 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d901      	bls.n	8005698 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e14d      	b.n	8005934 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005698:	4b1a      	ldr	r3, [pc, #104]	; (8005704 <HAL_RCC_OscConfig+0x2ac>)
 800569a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1f0      	bne.n	8005686 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 80a0 	beq.w	80057f2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056b2:	2300      	movs	r3, #0
 80056b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056b6:	4b13      	ldr	r3, [pc, #76]	; (8005704 <HAL_RCC_OscConfig+0x2ac>)
 80056b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10f      	bne.n	80056e2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056c2:	2300      	movs	r3, #0
 80056c4:	60bb      	str	r3, [r7, #8]
 80056c6:	4b0f      	ldr	r3, [pc, #60]	; (8005704 <HAL_RCC_OscConfig+0x2ac>)
 80056c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ca:	4a0e      	ldr	r2, [pc, #56]	; (8005704 <HAL_RCC_OscConfig+0x2ac>)
 80056cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056d0:	6413      	str	r3, [r2, #64]	; 0x40
 80056d2:	4b0c      	ldr	r3, [pc, #48]	; (8005704 <HAL_RCC_OscConfig+0x2ac>)
 80056d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056da:	60bb      	str	r3, [r7, #8]
 80056dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056de:	2301      	movs	r3, #1
 80056e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056e2:	4b0b      	ldr	r3, [pc, #44]	; (8005710 <HAL_RCC_OscConfig+0x2b8>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d121      	bne.n	8005732 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056ee:	4b08      	ldr	r3, [pc, #32]	; (8005710 <HAL_RCC_OscConfig+0x2b8>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a07      	ldr	r2, [pc, #28]	; (8005710 <HAL_RCC_OscConfig+0x2b8>)
 80056f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056fa:	f7fe f94d 	bl	8003998 <HAL_GetTick>
 80056fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005700:	e011      	b.n	8005726 <HAL_RCC_OscConfig+0x2ce>
 8005702:	bf00      	nop
 8005704:	40023800 	.word	0x40023800
 8005708:	42470000 	.word	0x42470000
 800570c:	42470e80 	.word	0x42470e80
 8005710:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005714:	f7fe f940 	bl	8003998 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	2b02      	cmp	r3, #2
 8005720:	d901      	bls.n	8005726 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e106      	b.n	8005934 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005726:	4b85      	ldr	r3, [pc, #532]	; (800593c <HAL_RCC_OscConfig+0x4e4>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572e:	2b00      	cmp	r3, #0
 8005730:	d0f0      	beq.n	8005714 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	2b01      	cmp	r3, #1
 8005738:	d106      	bne.n	8005748 <HAL_RCC_OscConfig+0x2f0>
 800573a:	4b81      	ldr	r3, [pc, #516]	; (8005940 <HAL_RCC_OscConfig+0x4e8>)
 800573c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800573e:	4a80      	ldr	r2, [pc, #512]	; (8005940 <HAL_RCC_OscConfig+0x4e8>)
 8005740:	f043 0301 	orr.w	r3, r3, #1
 8005744:	6713      	str	r3, [r2, #112]	; 0x70
 8005746:	e01c      	b.n	8005782 <HAL_RCC_OscConfig+0x32a>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	2b05      	cmp	r3, #5
 800574e:	d10c      	bne.n	800576a <HAL_RCC_OscConfig+0x312>
 8005750:	4b7b      	ldr	r3, [pc, #492]	; (8005940 <HAL_RCC_OscConfig+0x4e8>)
 8005752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005754:	4a7a      	ldr	r2, [pc, #488]	; (8005940 <HAL_RCC_OscConfig+0x4e8>)
 8005756:	f043 0304 	orr.w	r3, r3, #4
 800575a:	6713      	str	r3, [r2, #112]	; 0x70
 800575c:	4b78      	ldr	r3, [pc, #480]	; (8005940 <HAL_RCC_OscConfig+0x4e8>)
 800575e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005760:	4a77      	ldr	r2, [pc, #476]	; (8005940 <HAL_RCC_OscConfig+0x4e8>)
 8005762:	f043 0301 	orr.w	r3, r3, #1
 8005766:	6713      	str	r3, [r2, #112]	; 0x70
 8005768:	e00b      	b.n	8005782 <HAL_RCC_OscConfig+0x32a>
 800576a:	4b75      	ldr	r3, [pc, #468]	; (8005940 <HAL_RCC_OscConfig+0x4e8>)
 800576c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576e:	4a74      	ldr	r2, [pc, #464]	; (8005940 <HAL_RCC_OscConfig+0x4e8>)
 8005770:	f023 0301 	bic.w	r3, r3, #1
 8005774:	6713      	str	r3, [r2, #112]	; 0x70
 8005776:	4b72      	ldr	r3, [pc, #456]	; (8005940 <HAL_RCC_OscConfig+0x4e8>)
 8005778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800577a:	4a71      	ldr	r2, [pc, #452]	; (8005940 <HAL_RCC_OscConfig+0x4e8>)
 800577c:	f023 0304 	bic.w	r3, r3, #4
 8005780:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d015      	beq.n	80057b6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800578a:	f7fe f905 	bl	8003998 <HAL_GetTick>
 800578e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005790:	e00a      	b.n	80057a8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005792:	f7fe f901 	bl	8003998 <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	f241 3288 	movw	r2, #5000	; 0x1388
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d901      	bls.n	80057a8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e0c5      	b.n	8005934 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057a8:	4b65      	ldr	r3, [pc, #404]	; (8005940 <HAL_RCC_OscConfig+0x4e8>)
 80057aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ac:	f003 0302 	and.w	r3, r3, #2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d0ee      	beq.n	8005792 <HAL_RCC_OscConfig+0x33a>
 80057b4:	e014      	b.n	80057e0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057b6:	f7fe f8ef 	bl	8003998 <HAL_GetTick>
 80057ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057bc:	e00a      	b.n	80057d4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057be:	f7fe f8eb 	bl	8003998 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d901      	bls.n	80057d4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e0af      	b.n	8005934 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057d4:	4b5a      	ldr	r3, [pc, #360]	; (8005940 <HAL_RCC_OscConfig+0x4e8>)
 80057d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1ee      	bne.n	80057be <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057e0:	7dfb      	ldrb	r3, [r7, #23]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d105      	bne.n	80057f2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057e6:	4b56      	ldr	r3, [pc, #344]	; (8005940 <HAL_RCC_OscConfig+0x4e8>)
 80057e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ea:	4a55      	ldr	r2, [pc, #340]	; (8005940 <HAL_RCC_OscConfig+0x4e8>)
 80057ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 809b 	beq.w	8005932 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057fc:	4b50      	ldr	r3, [pc, #320]	; (8005940 <HAL_RCC_OscConfig+0x4e8>)
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f003 030c 	and.w	r3, r3, #12
 8005804:	2b08      	cmp	r3, #8
 8005806:	d05c      	beq.n	80058c2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	2b02      	cmp	r3, #2
 800580e:	d141      	bne.n	8005894 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005810:	4b4c      	ldr	r3, [pc, #304]	; (8005944 <HAL_RCC_OscConfig+0x4ec>)
 8005812:	2200      	movs	r2, #0
 8005814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005816:	f7fe f8bf 	bl	8003998 <HAL_GetTick>
 800581a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800581c:	e008      	b.n	8005830 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800581e:	f7fe f8bb 	bl	8003998 <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	2b02      	cmp	r3, #2
 800582a:	d901      	bls.n	8005830 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e081      	b.n	8005934 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005830:	4b43      	ldr	r3, [pc, #268]	; (8005940 <HAL_RCC_OscConfig+0x4e8>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1f0      	bne.n	800581e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	69da      	ldr	r2, [r3, #28]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	431a      	orrs	r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584a:	019b      	lsls	r3, r3, #6
 800584c:	431a      	orrs	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005852:	085b      	lsrs	r3, r3, #1
 8005854:	3b01      	subs	r3, #1
 8005856:	041b      	lsls	r3, r3, #16
 8005858:	431a      	orrs	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585e:	061b      	lsls	r3, r3, #24
 8005860:	4937      	ldr	r1, [pc, #220]	; (8005940 <HAL_RCC_OscConfig+0x4e8>)
 8005862:	4313      	orrs	r3, r2
 8005864:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005866:	4b37      	ldr	r3, [pc, #220]	; (8005944 <HAL_RCC_OscConfig+0x4ec>)
 8005868:	2201      	movs	r2, #1
 800586a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800586c:	f7fe f894 	bl	8003998 <HAL_GetTick>
 8005870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005872:	e008      	b.n	8005886 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005874:	f7fe f890 	bl	8003998 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b02      	cmp	r3, #2
 8005880:	d901      	bls.n	8005886 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e056      	b.n	8005934 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005886:	4b2e      	ldr	r3, [pc, #184]	; (8005940 <HAL_RCC_OscConfig+0x4e8>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d0f0      	beq.n	8005874 <HAL_RCC_OscConfig+0x41c>
 8005892:	e04e      	b.n	8005932 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005894:	4b2b      	ldr	r3, [pc, #172]	; (8005944 <HAL_RCC_OscConfig+0x4ec>)
 8005896:	2200      	movs	r2, #0
 8005898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800589a:	f7fe f87d 	bl	8003998 <HAL_GetTick>
 800589e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058a0:	e008      	b.n	80058b4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058a2:	f7fe f879 	bl	8003998 <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e03f      	b.n	8005934 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058b4:	4b22      	ldr	r3, [pc, #136]	; (8005940 <HAL_RCC_OscConfig+0x4e8>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1f0      	bne.n	80058a2 <HAL_RCC_OscConfig+0x44a>
 80058c0:	e037      	b.n	8005932 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d101      	bne.n	80058ce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e032      	b.n	8005934 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058ce:	4b1c      	ldr	r3, [pc, #112]	; (8005940 <HAL_RCC_OscConfig+0x4e8>)
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d028      	beq.n	800592e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d121      	bne.n	800592e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d11a      	bne.n	800592e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80058fe:	4013      	ands	r3, r2
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005904:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005906:	4293      	cmp	r3, r2
 8005908:	d111      	bne.n	800592e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005914:	085b      	lsrs	r3, r3, #1
 8005916:	3b01      	subs	r3, #1
 8005918:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800591a:	429a      	cmp	r2, r3
 800591c:	d107      	bne.n	800592e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005928:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800592a:	429a      	cmp	r2, r3
 800592c:	d001      	beq.n	8005932 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e000      	b.n	8005934 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3718      	adds	r7, #24
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	40007000 	.word	0x40007000
 8005940:	40023800 	.word	0x40023800
 8005944:	42470060 	.word	0x42470060

08005948 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d101      	bne.n	800595c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e0cc      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800595c:	4b68      	ldr	r3, [pc, #416]	; (8005b00 <HAL_RCC_ClockConfig+0x1b8>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 030f 	and.w	r3, r3, #15
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	429a      	cmp	r2, r3
 8005968:	d90c      	bls.n	8005984 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800596a:	4b65      	ldr	r3, [pc, #404]	; (8005b00 <HAL_RCC_ClockConfig+0x1b8>)
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	b2d2      	uxtb	r2, r2
 8005970:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005972:	4b63      	ldr	r3, [pc, #396]	; (8005b00 <HAL_RCC_ClockConfig+0x1b8>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 030f 	and.w	r3, r3, #15
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	429a      	cmp	r2, r3
 800597e:	d001      	beq.n	8005984 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e0b8      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d020      	beq.n	80059d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0304 	and.w	r3, r3, #4
 8005998:	2b00      	cmp	r3, #0
 800599a:	d005      	beq.n	80059a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800599c:	4b59      	ldr	r3, [pc, #356]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	4a58      	ldr	r2, [pc, #352]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 80059a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80059a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0308 	and.w	r3, r3, #8
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d005      	beq.n	80059c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059b4:	4b53      	ldr	r3, [pc, #332]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	4a52      	ldr	r2, [pc, #328]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 80059ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80059be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059c0:	4b50      	ldr	r3, [pc, #320]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	494d      	ldr	r1, [pc, #308]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d044      	beq.n	8005a68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d107      	bne.n	80059f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059e6:	4b47      	ldr	r3, [pc, #284]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d119      	bne.n	8005a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e07f      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d003      	beq.n	8005a06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a02:	2b03      	cmp	r3, #3
 8005a04:	d107      	bne.n	8005a16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a06:	4b3f      	ldr	r3, [pc, #252]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d109      	bne.n	8005a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e06f      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a16:	4b3b      	ldr	r3, [pc, #236]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0302 	and.w	r3, r3, #2
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e067      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a26:	4b37      	ldr	r3, [pc, #220]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f023 0203 	bic.w	r2, r3, #3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	4934      	ldr	r1, [pc, #208]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a38:	f7fd ffae 	bl	8003998 <HAL_GetTick>
 8005a3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a3e:	e00a      	b.n	8005a56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a40:	f7fd ffaa 	bl	8003998 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d901      	bls.n	8005a56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e04f      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a56:	4b2b      	ldr	r3, [pc, #172]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f003 020c 	and.w	r2, r3, #12
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d1eb      	bne.n	8005a40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a68:	4b25      	ldr	r3, [pc, #148]	; (8005b00 <HAL_RCC_ClockConfig+0x1b8>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 030f 	and.w	r3, r3, #15
 8005a70:	683a      	ldr	r2, [r7, #0]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d20c      	bcs.n	8005a90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a76:	4b22      	ldr	r3, [pc, #136]	; (8005b00 <HAL_RCC_ClockConfig+0x1b8>)
 8005a78:	683a      	ldr	r2, [r7, #0]
 8005a7a:	b2d2      	uxtb	r2, r2
 8005a7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a7e:	4b20      	ldr	r3, [pc, #128]	; (8005b00 <HAL_RCC_ClockConfig+0x1b8>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 030f 	and.w	r3, r3, #15
 8005a86:	683a      	ldr	r2, [r7, #0]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d001      	beq.n	8005a90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e032      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0304 	and.w	r3, r3, #4
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d008      	beq.n	8005aae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a9c:	4b19      	ldr	r3, [pc, #100]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	4916      	ldr	r1, [pc, #88]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0308 	and.w	r3, r3, #8
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d009      	beq.n	8005ace <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005aba:	4b12      	ldr	r3, [pc, #72]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	490e      	ldr	r1, [pc, #56]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ace:	f000 f821 	bl	8005b14 <HAL_RCC_GetSysClockFreq>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	4b0b      	ldr	r3, [pc, #44]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	091b      	lsrs	r3, r3, #4
 8005ada:	f003 030f 	and.w	r3, r3, #15
 8005ade:	490a      	ldr	r1, [pc, #40]	; (8005b08 <HAL_RCC_ClockConfig+0x1c0>)
 8005ae0:	5ccb      	ldrb	r3, [r1, r3]
 8005ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ae6:	4a09      	ldr	r2, [pc, #36]	; (8005b0c <HAL_RCC_ClockConfig+0x1c4>)
 8005ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005aea:	4b09      	ldr	r3, [pc, #36]	; (8005b10 <HAL_RCC_ClockConfig+0x1c8>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fd fa82 	bl	8002ff8 <HAL_InitTick>

  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	40023c00 	.word	0x40023c00
 8005b04:	40023800 	.word	0x40023800
 8005b08:	0800b2d4 	.word	0x0800b2d4
 8005b0c:	200002ec 	.word	0x200002ec
 8005b10:	200002f0 	.word	0x200002f0

08005b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b14:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005b18:	b084      	sub	sp, #16
 8005b1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	607b      	str	r3, [r7, #4]
 8005b20:	2300      	movs	r3, #0
 8005b22:	60fb      	str	r3, [r7, #12]
 8005b24:	2300      	movs	r3, #0
 8005b26:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b2c:	4b67      	ldr	r3, [pc, #412]	; (8005ccc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f003 030c 	and.w	r3, r3, #12
 8005b34:	2b08      	cmp	r3, #8
 8005b36:	d00d      	beq.n	8005b54 <HAL_RCC_GetSysClockFreq+0x40>
 8005b38:	2b08      	cmp	r3, #8
 8005b3a:	f200 80bd 	bhi.w	8005cb8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <HAL_RCC_GetSysClockFreq+0x34>
 8005b42:	2b04      	cmp	r3, #4
 8005b44:	d003      	beq.n	8005b4e <HAL_RCC_GetSysClockFreq+0x3a>
 8005b46:	e0b7      	b.n	8005cb8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b48:	4b61      	ldr	r3, [pc, #388]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005b4a:	60bb      	str	r3, [r7, #8]
       break;
 8005b4c:	e0b7      	b.n	8005cbe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b4e:	4b61      	ldr	r3, [pc, #388]	; (8005cd4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005b50:	60bb      	str	r3, [r7, #8]
      break;
 8005b52:	e0b4      	b.n	8005cbe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b54:	4b5d      	ldr	r3, [pc, #372]	; (8005ccc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b5c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b5e:	4b5b      	ldr	r3, [pc, #364]	; (8005ccc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d04d      	beq.n	8005c06 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b6a:	4b58      	ldr	r3, [pc, #352]	; (8005ccc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	099b      	lsrs	r3, r3, #6
 8005b70:	461a      	mov	r2, r3
 8005b72:	f04f 0300 	mov.w	r3, #0
 8005b76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005b7a:	f04f 0100 	mov.w	r1, #0
 8005b7e:	ea02 0800 	and.w	r8, r2, r0
 8005b82:	ea03 0901 	and.w	r9, r3, r1
 8005b86:	4640      	mov	r0, r8
 8005b88:	4649      	mov	r1, r9
 8005b8a:	f04f 0200 	mov.w	r2, #0
 8005b8e:	f04f 0300 	mov.w	r3, #0
 8005b92:	014b      	lsls	r3, r1, #5
 8005b94:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005b98:	0142      	lsls	r2, r0, #5
 8005b9a:	4610      	mov	r0, r2
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	ebb0 0008 	subs.w	r0, r0, r8
 8005ba2:	eb61 0109 	sbc.w	r1, r1, r9
 8005ba6:	f04f 0200 	mov.w	r2, #0
 8005baa:	f04f 0300 	mov.w	r3, #0
 8005bae:	018b      	lsls	r3, r1, #6
 8005bb0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005bb4:	0182      	lsls	r2, r0, #6
 8005bb6:	1a12      	subs	r2, r2, r0
 8005bb8:	eb63 0301 	sbc.w	r3, r3, r1
 8005bbc:	f04f 0000 	mov.w	r0, #0
 8005bc0:	f04f 0100 	mov.w	r1, #0
 8005bc4:	00d9      	lsls	r1, r3, #3
 8005bc6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005bca:	00d0      	lsls	r0, r2, #3
 8005bcc:	4602      	mov	r2, r0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	eb12 0208 	adds.w	r2, r2, r8
 8005bd4:	eb43 0309 	adc.w	r3, r3, r9
 8005bd8:	f04f 0000 	mov.w	r0, #0
 8005bdc:	f04f 0100 	mov.w	r1, #0
 8005be0:	0259      	lsls	r1, r3, #9
 8005be2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005be6:	0250      	lsls	r0, r2, #9
 8005be8:	4602      	mov	r2, r0
 8005bea:	460b      	mov	r3, r1
 8005bec:	4610      	mov	r0, r2
 8005bee:	4619      	mov	r1, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	f04f 0300 	mov.w	r3, #0
 8005bf8:	f7fa fb5a 	bl	80002b0 <__aeabi_uldivmod>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	460b      	mov	r3, r1
 8005c00:	4613      	mov	r3, r2
 8005c02:	60fb      	str	r3, [r7, #12]
 8005c04:	e04a      	b.n	8005c9c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c06:	4b31      	ldr	r3, [pc, #196]	; (8005ccc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	099b      	lsrs	r3, r3, #6
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	f04f 0300 	mov.w	r3, #0
 8005c12:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005c16:	f04f 0100 	mov.w	r1, #0
 8005c1a:	ea02 0400 	and.w	r4, r2, r0
 8005c1e:	ea03 0501 	and.w	r5, r3, r1
 8005c22:	4620      	mov	r0, r4
 8005c24:	4629      	mov	r1, r5
 8005c26:	f04f 0200 	mov.w	r2, #0
 8005c2a:	f04f 0300 	mov.w	r3, #0
 8005c2e:	014b      	lsls	r3, r1, #5
 8005c30:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005c34:	0142      	lsls	r2, r0, #5
 8005c36:	4610      	mov	r0, r2
 8005c38:	4619      	mov	r1, r3
 8005c3a:	1b00      	subs	r0, r0, r4
 8005c3c:	eb61 0105 	sbc.w	r1, r1, r5
 8005c40:	f04f 0200 	mov.w	r2, #0
 8005c44:	f04f 0300 	mov.w	r3, #0
 8005c48:	018b      	lsls	r3, r1, #6
 8005c4a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005c4e:	0182      	lsls	r2, r0, #6
 8005c50:	1a12      	subs	r2, r2, r0
 8005c52:	eb63 0301 	sbc.w	r3, r3, r1
 8005c56:	f04f 0000 	mov.w	r0, #0
 8005c5a:	f04f 0100 	mov.w	r1, #0
 8005c5e:	00d9      	lsls	r1, r3, #3
 8005c60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c64:	00d0      	lsls	r0, r2, #3
 8005c66:	4602      	mov	r2, r0
 8005c68:	460b      	mov	r3, r1
 8005c6a:	1912      	adds	r2, r2, r4
 8005c6c:	eb45 0303 	adc.w	r3, r5, r3
 8005c70:	f04f 0000 	mov.w	r0, #0
 8005c74:	f04f 0100 	mov.w	r1, #0
 8005c78:	0299      	lsls	r1, r3, #10
 8005c7a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005c7e:	0290      	lsls	r0, r2, #10
 8005c80:	4602      	mov	r2, r0
 8005c82:	460b      	mov	r3, r1
 8005c84:	4610      	mov	r0, r2
 8005c86:	4619      	mov	r1, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	f04f 0300 	mov.w	r3, #0
 8005c90:	f7fa fb0e 	bl	80002b0 <__aeabi_uldivmod>
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	4613      	mov	r3, r2
 8005c9a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c9c:	4b0b      	ldr	r3, [pc, #44]	; (8005ccc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	0c1b      	lsrs	r3, r3, #16
 8005ca2:	f003 0303 	and.w	r3, r3, #3
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb4:	60bb      	str	r3, [r7, #8]
      break;
 8005cb6:	e002      	b.n	8005cbe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005cb8:	4b05      	ldr	r3, [pc, #20]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005cba:	60bb      	str	r3, [r7, #8]
      break;
 8005cbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cbe:	68bb      	ldr	r3, [r7, #8]
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005cca:	bf00      	nop
 8005ccc:	40023800 	.word	0x40023800
 8005cd0:	00f42400 	.word	0x00f42400
 8005cd4:	007a1200 	.word	0x007a1200

08005cd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cdc:	4b03      	ldr	r3, [pc, #12]	; (8005cec <HAL_RCC_GetHCLKFreq+0x14>)
 8005cde:	681b      	ldr	r3, [r3, #0]
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	200002ec 	.word	0x200002ec

08005cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005cf4:	f7ff fff0 	bl	8005cd8 <HAL_RCC_GetHCLKFreq>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	4b05      	ldr	r3, [pc, #20]	; (8005d10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	0a9b      	lsrs	r3, r3, #10
 8005d00:	f003 0307 	and.w	r3, r3, #7
 8005d04:	4903      	ldr	r1, [pc, #12]	; (8005d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d06:	5ccb      	ldrb	r3, [r1, r3]
 8005d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	40023800 	.word	0x40023800
 8005d14:	0800b2e4 	.word	0x0800b2e4

08005d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d1c:	f7ff ffdc 	bl	8005cd8 <HAL_RCC_GetHCLKFreq>
 8005d20:	4602      	mov	r2, r0
 8005d22:	4b05      	ldr	r3, [pc, #20]	; (8005d38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	0b5b      	lsrs	r3, r3, #13
 8005d28:	f003 0307 	and.w	r3, r3, #7
 8005d2c:	4903      	ldr	r1, [pc, #12]	; (8005d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d2e:	5ccb      	ldrb	r3, [r1, r3]
 8005d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	40023800 	.word	0x40023800
 8005d3c:	0800b2e4 	.word	0x0800b2e4

08005d40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	220f      	movs	r2, #15
 8005d4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005d50:	4b12      	ldr	r3, [pc, #72]	; (8005d9c <HAL_RCC_GetClockConfig+0x5c>)
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f003 0203 	and.w	r2, r3, #3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005d5c:	4b0f      	ldr	r3, [pc, #60]	; (8005d9c <HAL_RCC_GetClockConfig+0x5c>)
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005d68:	4b0c      	ldr	r3, [pc, #48]	; (8005d9c <HAL_RCC_GetClockConfig+0x5c>)
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005d74:	4b09      	ldr	r3, [pc, #36]	; (8005d9c <HAL_RCC_GetClockConfig+0x5c>)
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	08db      	lsrs	r3, r3, #3
 8005d7a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005d82:	4b07      	ldr	r3, [pc, #28]	; (8005da0 <HAL_RCC_GetClockConfig+0x60>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 020f 	and.w	r2, r3, #15
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	601a      	str	r2, [r3, #0]
}
 8005d8e:	bf00      	nop
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	40023800 	.word	0x40023800
 8005da0:	40023c00 	.word	0x40023c00

08005da4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e041      	b.n	8005e3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d106      	bne.n	8005dd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f7fd f834 	bl	8002e38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	3304      	adds	r3, #4
 8005de0:	4619      	mov	r1, r3
 8005de2:	4610      	mov	r0, r2
 8005de4:	f000 f9ce 	bl	8006184 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
	...

08005e44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d001      	beq.n	8005e5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e04e      	b.n	8005efa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2202      	movs	r2, #2
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68da      	ldr	r2, [r3, #12]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f042 0201 	orr.w	r2, r2, #1
 8005e72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a23      	ldr	r2, [pc, #140]	; (8005f08 <HAL_TIM_Base_Start_IT+0xc4>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d022      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x80>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e86:	d01d      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x80>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a1f      	ldr	r2, [pc, #124]	; (8005f0c <HAL_TIM_Base_Start_IT+0xc8>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d018      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x80>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a1e      	ldr	r2, [pc, #120]	; (8005f10 <HAL_TIM_Base_Start_IT+0xcc>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d013      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x80>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a1c      	ldr	r2, [pc, #112]	; (8005f14 <HAL_TIM_Base_Start_IT+0xd0>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d00e      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x80>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a1b      	ldr	r2, [pc, #108]	; (8005f18 <HAL_TIM_Base_Start_IT+0xd4>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d009      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x80>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a19      	ldr	r2, [pc, #100]	; (8005f1c <HAL_TIM_Base_Start_IT+0xd8>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d004      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x80>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a18      	ldr	r2, [pc, #96]	; (8005f20 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d111      	bne.n	8005ee8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f003 0307 	and.w	r3, r3, #7
 8005ece:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2b06      	cmp	r3, #6
 8005ed4:	d010      	beq.n	8005ef8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f042 0201 	orr.w	r2, r2, #1
 8005ee4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ee6:	e007      	b.n	8005ef8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f042 0201 	orr.w	r2, r2, #1
 8005ef6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3714      	adds	r7, #20
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	40010000 	.word	0x40010000
 8005f0c:	40000400 	.word	0x40000400
 8005f10:	40000800 	.word	0x40000800
 8005f14:	40000c00 	.word	0x40000c00
 8005f18:	40010400 	.word	0x40010400
 8005f1c:	40014000 	.word	0x40014000
 8005f20:	40001800 	.word	0x40001800

08005f24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	f003 0302 	and.w	r3, r3, #2
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d122      	bne.n	8005f80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d11b      	bne.n	8005f80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f06f 0202 	mvn.w	r2, #2
 8005f50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	f003 0303 	and.w	r3, r3, #3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f8ee 	bl	8006148 <HAL_TIM_IC_CaptureCallback>
 8005f6c:	e005      	b.n	8005f7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f8e0 	bl	8006134 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 f8f1 	bl	800615c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	f003 0304 	and.w	r3, r3, #4
 8005f8a:	2b04      	cmp	r3, #4
 8005f8c:	d122      	bne.n	8005fd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	f003 0304 	and.w	r3, r3, #4
 8005f98:	2b04      	cmp	r3, #4
 8005f9a:	d11b      	bne.n	8005fd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f06f 0204 	mvn.w	r2, #4
 8005fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2202      	movs	r2, #2
 8005faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d003      	beq.n	8005fc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f8c4 	bl	8006148 <HAL_TIM_IC_CaptureCallback>
 8005fc0:	e005      	b.n	8005fce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f8b6 	bl	8006134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 f8c7 	bl	800615c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	f003 0308 	and.w	r3, r3, #8
 8005fde:	2b08      	cmp	r3, #8
 8005fe0:	d122      	bne.n	8006028 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	f003 0308 	and.w	r3, r3, #8
 8005fec:	2b08      	cmp	r3, #8
 8005fee:	d11b      	bne.n	8006028 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f06f 0208 	mvn.w	r2, #8
 8005ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2204      	movs	r2, #4
 8005ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	69db      	ldr	r3, [r3, #28]
 8006006:	f003 0303 	and.w	r3, r3, #3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d003      	beq.n	8006016 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f89a 	bl	8006148 <HAL_TIM_IC_CaptureCallback>
 8006014:	e005      	b.n	8006022 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f88c 	bl	8006134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 f89d 	bl	800615c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	f003 0310 	and.w	r3, r3, #16
 8006032:	2b10      	cmp	r3, #16
 8006034:	d122      	bne.n	800607c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	f003 0310 	and.w	r3, r3, #16
 8006040:	2b10      	cmp	r3, #16
 8006042:	d11b      	bne.n	800607c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f06f 0210 	mvn.w	r2, #16
 800604c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2208      	movs	r2, #8
 8006052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	69db      	ldr	r3, [r3, #28]
 800605a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800605e:	2b00      	cmp	r3, #0
 8006060:	d003      	beq.n	800606a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f870 	bl	8006148 <HAL_TIM_IC_CaptureCallback>
 8006068:	e005      	b.n	8006076 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 f862 	bl	8006134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f873 	bl	800615c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b01      	cmp	r3, #1
 8006088:	d10e      	bne.n	80060a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	f003 0301 	and.w	r3, r3, #1
 8006094:	2b01      	cmp	r3, #1
 8006096:	d107      	bne.n	80060a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f06f 0201 	mvn.w	r2, #1
 80060a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f7fc fc0c 	bl	80028c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b2:	2b80      	cmp	r3, #128	; 0x80
 80060b4:	d10e      	bne.n	80060d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c0:	2b80      	cmp	r3, #128	; 0x80
 80060c2:	d107      	bne.n	80060d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f902 	bl	80062d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060de:	2b40      	cmp	r3, #64	; 0x40
 80060e0:	d10e      	bne.n	8006100 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ec:	2b40      	cmp	r3, #64	; 0x40
 80060ee:	d107      	bne.n	8006100 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f838 	bl	8006170 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	f003 0320 	and.w	r3, r3, #32
 800610a:	2b20      	cmp	r3, #32
 800610c:	d10e      	bne.n	800612c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f003 0320 	and.w	r3, r3, #32
 8006118:	2b20      	cmp	r3, #32
 800611a:	d107      	bne.n	800612c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f06f 0220 	mvn.w	r2, #32
 8006124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f8cc 	bl	80062c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800612c:	bf00      	nop
 800612e:	3708      	adds	r7, #8
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a40      	ldr	r2, [pc, #256]	; (8006298 <TIM_Base_SetConfig+0x114>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d013      	beq.n	80061c4 <TIM_Base_SetConfig+0x40>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061a2:	d00f      	beq.n	80061c4 <TIM_Base_SetConfig+0x40>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a3d      	ldr	r2, [pc, #244]	; (800629c <TIM_Base_SetConfig+0x118>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d00b      	beq.n	80061c4 <TIM_Base_SetConfig+0x40>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a3c      	ldr	r2, [pc, #240]	; (80062a0 <TIM_Base_SetConfig+0x11c>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d007      	beq.n	80061c4 <TIM_Base_SetConfig+0x40>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a3b      	ldr	r2, [pc, #236]	; (80062a4 <TIM_Base_SetConfig+0x120>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d003      	beq.n	80061c4 <TIM_Base_SetConfig+0x40>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a3a      	ldr	r2, [pc, #232]	; (80062a8 <TIM_Base_SetConfig+0x124>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d108      	bne.n	80061d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a2f      	ldr	r2, [pc, #188]	; (8006298 <TIM_Base_SetConfig+0x114>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d02b      	beq.n	8006236 <TIM_Base_SetConfig+0xb2>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061e4:	d027      	beq.n	8006236 <TIM_Base_SetConfig+0xb2>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a2c      	ldr	r2, [pc, #176]	; (800629c <TIM_Base_SetConfig+0x118>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d023      	beq.n	8006236 <TIM_Base_SetConfig+0xb2>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a2b      	ldr	r2, [pc, #172]	; (80062a0 <TIM_Base_SetConfig+0x11c>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d01f      	beq.n	8006236 <TIM_Base_SetConfig+0xb2>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a2a      	ldr	r2, [pc, #168]	; (80062a4 <TIM_Base_SetConfig+0x120>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d01b      	beq.n	8006236 <TIM_Base_SetConfig+0xb2>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a29      	ldr	r2, [pc, #164]	; (80062a8 <TIM_Base_SetConfig+0x124>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d017      	beq.n	8006236 <TIM_Base_SetConfig+0xb2>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a28      	ldr	r2, [pc, #160]	; (80062ac <TIM_Base_SetConfig+0x128>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d013      	beq.n	8006236 <TIM_Base_SetConfig+0xb2>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a27      	ldr	r2, [pc, #156]	; (80062b0 <TIM_Base_SetConfig+0x12c>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d00f      	beq.n	8006236 <TIM_Base_SetConfig+0xb2>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a26      	ldr	r2, [pc, #152]	; (80062b4 <TIM_Base_SetConfig+0x130>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d00b      	beq.n	8006236 <TIM_Base_SetConfig+0xb2>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a25      	ldr	r2, [pc, #148]	; (80062b8 <TIM_Base_SetConfig+0x134>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d007      	beq.n	8006236 <TIM_Base_SetConfig+0xb2>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a24      	ldr	r2, [pc, #144]	; (80062bc <TIM_Base_SetConfig+0x138>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d003      	beq.n	8006236 <TIM_Base_SetConfig+0xb2>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a23      	ldr	r2, [pc, #140]	; (80062c0 <TIM_Base_SetConfig+0x13c>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d108      	bne.n	8006248 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800623c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	4313      	orrs	r3, r2
 8006246:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	4313      	orrs	r3, r2
 8006254:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	689a      	ldr	r2, [r3, #8]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a0a      	ldr	r2, [pc, #40]	; (8006298 <TIM_Base_SetConfig+0x114>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d003      	beq.n	800627c <TIM_Base_SetConfig+0xf8>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a0c      	ldr	r2, [pc, #48]	; (80062a8 <TIM_Base_SetConfig+0x124>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d103      	bne.n	8006284 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	691a      	ldr	r2, [r3, #16]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	615a      	str	r2, [r3, #20]
}
 800628a:	bf00      	nop
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	40010000 	.word	0x40010000
 800629c:	40000400 	.word	0x40000400
 80062a0:	40000800 	.word	0x40000800
 80062a4:	40000c00 	.word	0x40000c00
 80062a8:	40010400 	.word	0x40010400
 80062ac:	40014000 	.word	0x40014000
 80062b0:	40014400 	.word	0x40014400
 80062b4:	40014800 	.word	0x40014800
 80062b8:	40001800 	.word	0x40001800
 80062bc:	40001c00 	.word	0x40001c00
 80062c0:	40002000 	.word	0x40002000

080062c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e03f      	b.n	800637e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d106      	bne.n	8006318 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f7fc fb60 	bl	80029d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2224      	movs	r2, #36	; 0x24
 800631c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68da      	ldr	r2, [r3, #12]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800632e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fe8b 	bl	800704c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	691a      	ldr	r2, [r3, #16]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006344:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	695a      	ldr	r2, [r3, #20]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006354:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68da      	ldr	r2, [r3, #12]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006364:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2220      	movs	r2, #32
 8006370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2220      	movs	r2, #32
 8006378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3708      	adds	r7, #8
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b08a      	sub	sp, #40	; 0x28
 800638a:	af02      	add	r7, sp, #8
 800638c:	60f8      	str	r0, [r7, #12]
 800638e:	60b9      	str	r1, [r7, #8]
 8006390:	603b      	str	r3, [r7, #0]
 8006392:	4613      	mov	r3, r2
 8006394:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006396:	2300      	movs	r3, #0
 8006398:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b20      	cmp	r3, #32
 80063a4:	d17c      	bne.n	80064a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d002      	beq.n	80063b2 <HAL_UART_Transmit+0x2c>
 80063ac:	88fb      	ldrh	r3, [r7, #6]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e075      	b.n	80064a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d101      	bne.n	80063c4 <HAL_UART_Transmit+0x3e>
 80063c0:	2302      	movs	r3, #2
 80063c2:	e06e      	b.n	80064a2 <HAL_UART_Transmit+0x11c>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2221      	movs	r2, #33	; 0x21
 80063d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063da:	f7fd fadd 	bl	8003998 <HAL_GetTick>
 80063de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	88fa      	ldrh	r2, [r7, #6]
 80063e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	88fa      	ldrh	r2, [r7, #6]
 80063ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063f4:	d108      	bne.n	8006408 <HAL_UART_Transmit+0x82>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d104      	bne.n	8006408 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80063fe:	2300      	movs	r3, #0
 8006400:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	61bb      	str	r3, [r7, #24]
 8006406:	e003      	b.n	8006410 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800640c:	2300      	movs	r3, #0
 800640e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006418:	e02a      	b.n	8006470 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	9300      	str	r3, [sp, #0]
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	2200      	movs	r2, #0
 8006422:	2180      	movs	r1, #128	; 0x80
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 fbcb 	bl	8006bc0 <UART_WaitOnFlagUntilTimeout>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d001      	beq.n	8006434 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e036      	b.n	80064a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10b      	bne.n	8006452 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	461a      	mov	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006448:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	3302      	adds	r3, #2
 800644e:	61bb      	str	r3, [r7, #24]
 8006450:	e007      	b.n	8006462 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	781a      	ldrb	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	3301      	adds	r3, #1
 8006460:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006466:	b29b      	uxth	r3, r3
 8006468:	3b01      	subs	r3, #1
 800646a:	b29a      	uxth	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006474:	b29b      	uxth	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1cf      	bne.n	800641a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	2200      	movs	r2, #0
 8006482:	2140      	movs	r1, #64	; 0x40
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 fb9b 	bl	8006bc0 <UART_WaitOnFlagUntilTimeout>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d001      	beq.n	8006494 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	e006      	b.n	80064a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2220      	movs	r2, #32
 8006498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800649c:	2300      	movs	r3, #0
 800649e:	e000      	b.n	80064a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80064a0:	2302      	movs	r3, #2
  }
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3720      	adds	r7, #32
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b08a      	sub	sp, #40	; 0x28
 80064ae:	af02      	add	r7, sp, #8
 80064b0:	60f8      	str	r0, [r7, #12]
 80064b2:	60b9      	str	r1, [r7, #8]
 80064b4:	603b      	str	r3, [r7, #0]
 80064b6:	4613      	mov	r3, r2
 80064b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80064ba:	2300      	movs	r3, #0
 80064bc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b20      	cmp	r3, #32
 80064c8:	f040 808c 	bne.w	80065e4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d002      	beq.n	80064d8 <HAL_UART_Receive+0x2e>
 80064d2:	88fb      	ldrh	r3, [r7, #6]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e084      	b.n	80065e6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d101      	bne.n	80064ea <HAL_UART_Receive+0x40>
 80064e6:	2302      	movs	r3, #2
 80064e8:	e07d      	b.n	80065e6 <HAL_UART_Receive+0x13c>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2222      	movs	r2, #34	; 0x22
 80064fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006506:	f7fd fa47 	bl	8003998 <HAL_GetTick>
 800650a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	88fa      	ldrh	r2, [r7, #6]
 8006510:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	88fa      	ldrh	r2, [r7, #6]
 8006516:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006520:	d108      	bne.n	8006534 <HAL_UART_Receive+0x8a>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d104      	bne.n	8006534 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800652a:	2300      	movs	r3, #0
 800652c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	61bb      	str	r3, [r7, #24]
 8006532:	e003      	b.n	800653c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006538:	2300      	movs	r3, #0
 800653a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006544:	e043      	b.n	80065ce <HAL_UART_Receive+0x124>
    {
     if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	9300      	str	r3, [sp, #0]
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	2200      	movs	r2, #0
 800654e:	2120      	movs	r1, #32
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f000 fb35 	bl	8006bc0 <UART_WaitOnFlagUntilTimeout>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d001      	beq.n	8006560 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800655c:	2303      	movs	r3, #3
 800655e:	e042      	b.n	80065e6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10c      	bne.n	8006580 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	b29b      	uxth	r3, r3
 800656e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006572:	b29a      	uxth	r2, r3
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	3302      	adds	r3, #2
 800657c:	61bb      	str	r3, [r7, #24]
 800657e:	e01f      	b.n	80065c0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006588:	d007      	beq.n	800659a <HAL_UART_Receive+0xf0>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10a      	bne.n	80065a8 <HAL_UART_Receive+0xfe>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d106      	bne.n	80065a8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	b2da      	uxtb	r2, r3
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	701a      	strb	r2, [r3, #0]
 80065a6:	e008      	b.n	80065ba <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065b4:	b2da      	uxtb	r2, r3
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	3301      	adds	r3, #1
 80065be:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	3b01      	subs	r3, #1
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d1b6      	bne.n	8006546 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2220      	movs	r2, #32
 80065dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80065e0:	2300      	movs	r3, #0
 80065e2:	e000      	b.n	80065e6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80065e4:	2302      	movs	r3, #2
  }
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3720      	adds	r7, #32
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b084      	sub	sp, #16
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	60f8      	str	r0, [r7, #12]
 80065f6:	60b9      	str	r1, [r7, #8]
 80065f8:	4613      	mov	r3, r2
 80065fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006602:	b2db      	uxtb	r3, r3
 8006604:	2b20      	cmp	r3, #32
 8006606:	d11d      	bne.n	8006644 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d002      	beq.n	8006614 <HAL_UART_Receive_IT+0x26>
 800660e:	88fb      	ldrh	r3, [r7, #6]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d101      	bne.n	8006618 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e016      	b.n	8006646 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800661e:	2b01      	cmp	r3, #1
 8006620:	d101      	bne.n	8006626 <HAL_UART_Receive_IT+0x38>
 8006622:	2302      	movs	r3, #2
 8006624:	e00f      	b.n	8006646 <HAL_UART_Receive_IT+0x58>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006634:	88fb      	ldrh	r3, [r7, #6]
 8006636:	461a      	mov	r2, r3
 8006638:	68b9      	ldr	r1, [r7, #8]
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f000 fb2e 	bl	8006c9c <UART_Start_Receive_IT>
 8006640:	4603      	mov	r3, r0
 8006642:	e000      	b.n	8006646 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006644:	2302      	movs	r3, #2
  }
}
 8006646:	4618      	mov	r0, r3
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
	...

08006650 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b0ba      	sub	sp, #232	; 0xe8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006676:	2300      	movs	r3, #0
 8006678:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800667c:	2300      	movs	r3, #0
 800667e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006686:	f003 030f 	and.w	r3, r3, #15
 800668a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800668e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10f      	bne.n	80066b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800669a:	f003 0320 	and.w	r3, r3, #32
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d009      	beq.n	80066b6 <HAL_UART_IRQHandler+0x66>
 80066a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066a6:	f003 0320 	and.w	r3, r3, #32
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d003      	beq.n	80066b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 fc11 	bl	8006ed6 <UART_Receive_IT>
      return;
 80066b4:	e256      	b.n	8006b64 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80066b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f000 80de 	beq.w	800687c <HAL_UART_IRQHandler+0x22c>
 80066c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066c4:	f003 0301 	and.w	r3, r3, #1
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d106      	bne.n	80066da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80066cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f000 80d1 	beq.w	800687c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80066da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066de:	f003 0301 	and.w	r3, r3, #1
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00b      	beq.n	80066fe <HAL_UART_IRQHandler+0xae>
 80066e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d005      	beq.n	80066fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f6:	f043 0201 	orr.w	r2, r3, #1
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006702:	f003 0304 	and.w	r3, r3, #4
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00b      	beq.n	8006722 <HAL_UART_IRQHandler+0xd2>
 800670a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800670e:	f003 0301 	and.w	r3, r3, #1
 8006712:	2b00      	cmp	r3, #0
 8006714:	d005      	beq.n	8006722 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671a:	f043 0202 	orr.w	r2, r3, #2
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006726:	f003 0302 	and.w	r3, r3, #2
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00b      	beq.n	8006746 <HAL_UART_IRQHandler+0xf6>
 800672e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	2b00      	cmp	r3, #0
 8006738:	d005      	beq.n	8006746 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673e:	f043 0204 	orr.w	r2, r3, #4
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800674a:	f003 0308 	and.w	r3, r3, #8
 800674e:	2b00      	cmp	r3, #0
 8006750:	d011      	beq.n	8006776 <HAL_UART_IRQHandler+0x126>
 8006752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006756:	f003 0320 	and.w	r3, r3, #32
 800675a:	2b00      	cmp	r3, #0
 800675c:	d105      	bne.n	800676a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800675e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b00      	cmp	r3, #0
 8006768:	d005      	beq.n	8006776 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676e:	f043 0208 	orr.w	r2, r3, #8
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677a:	2b00      	cmp	r3, #0
 800677c:	f000 81ed 	beq.w	8006b5a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006784:	f003 0320 	and.w	r3, r3, #32
 8006788:	2b00      	cmp	r3, #0
 800678a:	d008      	beq.n	800679e <HAL_UART_IRQHandler+0x14e>
 800678c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006790:	f003 0320 	and.w	r3, r3, #32
 8006794:	2b00      	cmp	r3, #0
 8006796:	d002      	beq.n	800679e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 fb9c 	bl	8006ed6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	695b      	ldr	r3, [r3, #20]
 80067a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a8:	2b40      	cmp	r3, #64	; 0x40
 80067aa:	bf0c      	ite	eq
 80067ac:	2301      	moveq	r3, #1
 80067ae:	2300      	movne	r3, #0
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ba:	f003 0308 	and.w	r3, r3, #8
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d103      	bne.n	80067ca <HAL_UART_IRQHandler+0x17a>
 80067c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d04f      	beq.n	800686a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 faa4 	bl	8006d18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067da:	2b40      	cmp	r3, #64	; 0x40
 80067dc:	d141      	bne.n	8006862 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	3314      	adds	r3, #20
 80067e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067ec:	e853 3f00 	ldrex	r3, [r3]
 80067f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80067f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	3314      	adds	r3, #20
 8006806:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800680a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800680e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006812:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006816:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800681a:	e841 2300 	strex	r3, r2, [r1]
 800681e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006822:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1d9      	bne.n	80067de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682e:	2b00      	cmp	r3, #0
 8006830:	d013      	beq.n	800685a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006836:	4a7d      	ldr	r2, [pc, #500]	; (8006a2c <HAL_UART_IRQHandler+0x3dc>)
 8006838:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683e:	4618      	mov	r0, r3
 8006840:	f7fe fbf1 	bl	8005026 <HAL_DMA_Abort_IT>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d016      	beq.n	8006878 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006854:	4610      	mov	r0, r2
 8006856:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006858:	e00e      	b.n	8006878 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 f99a 	bl	8006b94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006860:	e00a      	b.n	8006878 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f996 	bl	8006b94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006868:	e006      	b.n	8006878 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f992 	bl	8006b94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006876:	e170      	b.n	8006b5a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006878:	bf00      	nop
    return;
 800687a:	e16e      	b.n	8006b5a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006880:	2b01      	cmp	r3, #1
 8006882:	f040 814a 	bne.w	8006b1a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800688a:	f003 0310 	and.w	r3, r3, #16
 800688e:	2b00      	cmp	r3, #0
 8006890:	f000 8143 	beq.w	8006b1a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006898:	f003 0310 	and.w	r3, r3, #16
 800689c:	2b00      	cmp	r3, #0
 800689e:	f000 813c 	beq.w	8006b1a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068a2:	2300      	movs	r3, #0
 80068a4:	60bb      	str	r3, [r7, #8]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	60bb      	str	r3, [r7, #8]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	60bb      	str	r3, [r7, #8]
 80068b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c2:	2b40      	cmp	r3, #64	; 0x40
 80068c4:	f040 80b4 	bne.w	8006a30 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80068d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f000 8140 	beq.w	8006b5e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068e6:	429a      	cmp	r2, r3
 80068e8:	f080 8139 	bcs.w	8006b5e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068fe:	f000 8088 	beq.w	8006a12 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	330c      	adds	r3, #12
 8006908:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006910:	e853 3f00 	ldrex	r3, [r3]
 8006914:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006918:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800691c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006920:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	330c      	adds	r3, #12
 800692a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800692e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006932:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006936:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800693a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800693e:	e841 2300 	strex	r3, r2, [r1]
 8006942:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006946:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1d9      	bne.n	8006902 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	3314      	adds	r3, #20
 8006954:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006958:	e853 3f00 	ldrex	r3, [r3]
 800695c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800695e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006960:	f023 0301 	bic.w	r3, r3, #1
 8006964:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	3314      	adds	r3, #20
 800696e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006972:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006976:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006978:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800697a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800697e:	e841 2300 	strex	r3, r2, [r1]
 8006982:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006984:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1e1      	bne.n	800694e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	3314      	adds	r3, #20
 8006990:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006992:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006994:	e853 3f00 	ldrex	r3, [r3]
 8006998:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800699a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800699c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	3314      	adds	r3, #20
 80069aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80069ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80069b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80069b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80069b6:	e841 2300 	strex	r3, r2, [r1]
 80069ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80069bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1e3      	bne.n	800698a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2220      	movs	r2, #32
 80069c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	330c      	adds	r3, #12
 80069d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069da:	e853 3f00 	ldrex	r3, [r3]
 80069de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80069e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069e2:	f023 0310 	bic.w	r3, r3, #16
 80069e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	330c      	adds	r3, #12
 80069f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80069f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80069f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069fc:	e841 2300 	strex	r3, r2, [r1]
 8006a00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1e3      	bne.n	80069d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7fe fa9a 	bl	8004f46 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	4619      	mov	r1, r3
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f8c0 	bl	8006ba8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a28:	e099      	b.n	8006b5e <HAL_UART_IRQHandler+0x50e>
 8006a2a:	bf00      	nop
 8006a2c:	08006ddf 	.word	0x08006ddf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f000 808b 	beq.w	8006b62 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006a4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 8086 	beq.w	8006b62 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	330c      	adds	r3, #12
 8006a5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a60:	e853 3f00 	ldrex	r3, [r3]
 8006a64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	330c      	adds	r3, #12
 8006a76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006a7a:	647a      	str	r2, [r7, #68]	; 0x44
 8006a7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a82:	e841 2300 	strex	r3, r2, [r1]
 8006a86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1e3      	bne.n	8006a56 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	3314      	adds	r3, #20
 8006a94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a98:	e853 3f00 	ldrex	r3, [r3]
 8006a9c:	623b      	str	r3, [r7, #32]
   return(result);
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	f023 0301 	bic.w	r3, r3, #1
 8006aa4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	3314      	adds	r3, #20
 8006aae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006ab2:	633a      	str	r2, [r7, #48]	; 0x30
 8006ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aba:	e841 2300 	strex	r3, r2, [r1]
 8006abe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1e3      	bne.n	8006a8e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2220      	movs	r2, #32
 8006aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	330c      	adds	r3, #12
 8006ada:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	e853 3f00 	ldrex	r3, [r3]
 8006ae2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f023 0310 	bic.w	r3, r3, #16
 8006aea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	330c      	adds	r3, #12
 8006af4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006af8:	61fa      	str	r2, [r7, #28]
 8006afa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afc:	69b9      	ldr	r1, [r7, #24]
 8006afe:	69fa      	ldr	r2, [r7, #28]
 8006b00:	e841 2300 	strex	r3, r2, [r1]
 8006b04:	617b      	str	r3, [r7, #20]
   return(result);
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1e3      	bne.n	8006ad4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b10:	4619      	mov	r1, r3
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f848 	bl	8006ba8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b18:	e023      	b.n	8006b62 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d009      	beq.n	8006b3a <HAL_UART_IRQHandler+0x4ea>
 8006b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d003      	beq.n	8006b3a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f967 	bl	8006e06 <UART_Transmit_IT>
    return;
 8006b38:	e014      	b.n	8006b64 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00e      	beq.n	8006b64 <HAL_UART_IRQHandler+0x514>
 8006b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d008      	beq.n	8006b64 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f9a7 	bl	8006ea6 <UART_EndTransmit_IT>
    return;
 8006b58:	e004      	b.n	8006b64 <HAL_UART_IRQHandler+0x514>
    return;
 8006b5a:	bf00      	nop
 8006b5c:	e002      	b.n	8006b64 <HAL_UART_IRQHandler+0x514>
      return;
 8006b5e:	bf00      	nop
 8006b60:	e000      	b.n	8006b64 <HAL_UART_IRQHandler+0x514>
      return;
 8006b62:	bf00      	nop
  }
}
 8006b64:	37e8      	adds	r7, #232	; 0xe8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop

08006b6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006b88:	bf00      	nop
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006b9c:	bf00      	nop
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b090      	sub	sp, #64	; 0x40
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	603b      	str	r3, [r7, #0]
 8006bcc:	4613      	mov	r3, r2
 8006bce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bd0:	e050      	b.n	8006c74 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd8:	d04c      	beq.n	8006c74 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d007      	beq.n	8006bf0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006be0:	f7fc feda 	bl	8003998 <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d241      	bcs.n	8006c74 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	330c      	adds	r3, #12
 8006bf6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfa:	e853 3f00 	ldrex	r3, [r3]
 8006bfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	330c      	adds	r3, #12
 8006c0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006c10:	637a      	str	r2, [r7, #52]	; 0x34
 8006c12:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c18:	e841 2300 	strex	r3, r2, [r1]
 8006c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d1e5      	bne.n	8006bf0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	3314      	adds	r3, #20
 8006c2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	e853 3f00 	ldrex	r3, [r3]
 8006c32:	613b      	str	r3, [r7, #16]
   return(result);
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	f023 0301 	bic.w	r3, r3, #1
 8006c3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	3314      	adds	r3, #20
 8006c42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c44:	623a      	str	r2, [r7, #32]
 8006c46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c48:	69f9      	ldr	r1, [r7, #28]
 8006c4a:	6a3a      	ldr	r2, [r7, #32]
 8006c4c:	e841 2300 	strex	r3, r2, [r1]
 8006c50:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1e5      	bne.n	8006c24 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2220      	movs	r2, #32
 8006c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2220      	movs	r2, #32
 8006c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006c70:	2303      	movs	r3, #3
 8006c72:	e00f      	b.n	8006c94 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	bf0c      	ite	eq
 8006c84:	2301      	moveq	r3, #1
 8006c86:	2300      	movne	r3, #0
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	79fb      	ldrb	r3, [r7, #7]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d09f      	beq.n	8006bd2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3740      	adds	r7, #64	; 0x40
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	88fa      	ldrh	r2, [r7, #6]
 8006cb4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	88fa      	ldrh	r2, [r7, #6]
 8006cba:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2222      	movs	r2, #34	; 0x22
 8006cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d007      	beq.n	8006cea <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68da      	ldr	r2, [r3, #12]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ce8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	695a      	ldr	r2, [r3, #20]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f042 0201 	orr.w	r2, r2, #1
 8006cf8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68da      	ldr	r2, [r3, #12]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f042 0220 	orr.w	r2, r2, #32
 8006d08:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3714      	adds	r7, #20
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b095      	sub	sp, #84	; 0x54
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	330c      	adds	r3, #12
 8006d26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d2a:	e853 3f00 	ldrex	r3, [r3]
 8006d2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	330c      	adds	r3, #12
 8006d3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d40:	643a      	str	r2, [r7, #64]	; 0x40
 8006d42:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d48:	e841 2300 	strex	r3, r2, [r1]
 8006d4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1e5      	bne.n	8006d20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	3314      	adds	r3, #20
 8006d5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5c:	6a3b      	ldr	r3, [r7, #32]
 8006d5e:	e853 3f00 	ldrex	r3, [r3]
 8006d62:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	f023 0301 	bic.w	r3, r3, #1
 8006d6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	3314      	adds	r3, #20
 8006d72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d7c:	e841 2300 	strex	r3, r2, [r1]
 8006d80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1e5      	bne.n	8006d54 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d119      	bne.n	8006dc4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	330c      	adds	r3, #12
 8006d96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	e853 3f00 	ldrex	r3, [r3]
 8006d9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	f023 0310 	bic.w	r3, r3, #16
 8006da6:	647b      	str	r3, [r7, #68]	; 0x44
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	330c      	adds	r3, #12
 8006dae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006db0:	61ba      	str	r2, [r7, #24]
 8006db2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db4:	6979      	ldr	r1, [r7, #20]
 8006db6:	69ba      	ldr	r2, [r7, #24]
 8006db8:	e841 2300 	strex	r3, r2, [r1]
 8006dbc:	613b      	str	r3, [r7, #16]
   return(result);
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d1e5      	bne.n	8006d90 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2220      	movs	r2, #32
 8006dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006dd2:	bf00      	nop
 8006dd4:	3754      	adds	r7, #84	; 0x54
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b084      	sub	sp, #16
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2200      	movs	r2, #0
 8006df0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2200      	movs	r2, #0
 8006df6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f7ff fecb 	bl	8006b94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dfe:	bf00      	nop
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006e06:	b480      	push	{r7}
 8006e08:	b085      	sub	sp, #20
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	2b21      	cmp	r3, #33	; 0x21
 8006e18:	d13e      	bne.n	8006e98 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e22:	d114      	bne.n	8006e4e <UART_Transmit_IT+0x48>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	691b      	ldr	r3, [r3, #16]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d110      	bne.n	8006e4e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a1b      	ldr	r3, [r3, #32]
 8006e30:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	881b      	ldrh	r3, [r3, #0]
 8006e36:	461a      	mov	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e40:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	1c9a      	adds	r2, r3, #2
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	621a      	str	r2, [r3, #32]
 8006e4c:	e008      	b.n	8006e60 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	1c59      	adds	r1, r3, #1
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	6211      	str	r1, [r2, #32]
 8006e58:	781a      	ldrb	r2, [r3, #0]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	3b01      	subs	r3, #1
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10f      	bne.n	8006e94 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68da      	ldr	r2, [r3, #12]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e82:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68da      	ldr	r2, [r3, #12]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e92:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006e94:	2300      	movs	r3, #0
 8006e96:	e000      	b.n	8006e9a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006e98:	2302      	movs	r3, #2
  }
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3714      	adds	r7, #20
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b082      	sub	sp, #8
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68da      	ldr	r2, [r3, #12]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ebc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2220      	movs	r2, #32
 8006ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f7ff fe50 	bl	8006b6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3708      	adds	r7, #8
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b08c      	sub	sp, #48	; 0x30
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	2b22      	cmp	r3, #34	; 0x22
 8006ee8:	f040 80ab 	bne.w	8007042 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ef4:	d117      	bne.n	8006f26 <UART_Receive_IT+0x50>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d113      	bne.n	8006f26 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006efe:	2300      	movs	r3, #0
 8006f00:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f06:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f18:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1e:	1c9a      	adds	r2, r3, #2
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	629a      	str	r2, [r3, #40]	; 0x28
 8006f24:	e026      	b.n	8006f74 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f38:	d007      	beq.n	8006f4a <UART_Receive_IT+0x74>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d10a      	bne.n	8006f58 <UART_Receive_IT+0x82>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d106      	bne.n	8006f58 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	b2da      	uxtb	r2, r3
 8006f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f54:	701a      	strb	r2, [r3, #0]
 8006f56:	e008      	b.n	8006f6a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f64:	b2da      	uxtb	r2, r3
 8006f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f68:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f6e:	1c5a      	adds	r2, r3, #1
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	4619      	mov	r1, r3
 8006f82:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d15a      	bne.n	800703e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68da      	ldr	r2, [r3, #12]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f022 0220 	bic.w	r2, r2, #32
 8006f96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68da      	ldr	r2, [r3, #12]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fa6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	695a      	ldr	r2, [r3, #20]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f022 0201 	bic.w	r2, r2, #1
 8006fb6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2220      	movs	r2, #32
 8006fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d135      	bne.n	8007034 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	330c      	adds	r3, #12
 8006fd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	e853 3f00 	ldrex	r3, [r3]
 8006fdc:	613b      	str	r3, [r7, #16]
   return(result);
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	f023 0310 	bic.w	r3, r3, #16
 8006fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	330c      	adds	r3, #12
 8006fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fee:	623a      	str	r2, [r7, #32]
 8006ff0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff2:	69f9      	ldr	r1, [r7, #28]
 8006ff4:	6a3a      	ldr	r2, [r7, #32]
 8006ff6:	e841 2300 	strex	r3, r2, [r1]
 8006ffa:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1e5      	bne.n	8006fce <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0310 	and.w	r3, r3, #16
 800700c:	2b10      	cmp	r3, #16
 800700e:	d10a      	bne.n	8007026 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007010:	2300      	movs	r3, #0
 8007012:	60fb      	str	r3, [r7, #12]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	60fb      	str	r3, [r7, #12]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	60fb      	str	r3, [r7, #12]
 8007024:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800702a:	4619      	mov	r1, r3
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f7ff fdbb 	bl	8006ba8 <HAL_UARTEx_RxEventCallback>
 8007032:	e002      	b.n	800703a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f7ff fda3 	bl	8006b80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800703a:	2300      	movs	r3, #0
 800703c:	e002      	b.n	8007044 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800703e:	2300      	movs	r3, #0
 8007040:	e000      	b.n	8007044 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007042:	2302      	movs	r3, #2
  }
}
 8007044:	4618      	mov	r0, r3
 8007046:	3730      	adds	r7, #48	; 0x30
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800704c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007050:	b09f      	sub	sp, #124	; 0x7c
 8007052:	af00      	add	r7, sp, #0
 8007054:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007062:	68d9      	ldr	r1, [r3, #12]
 8007064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	ea40 0301 	orr.w	r3, r0, r1
 800706c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800706e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007070:	689a      	ldr	r2, [r3, #8]
 8007072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	431a      	orrs	r2, r3
 8007078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800707a:	695b      	ldr	r3, [r3, #20]
 800707c:	431a      	orrs	r2, r3
 800707e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007080:	69db      	ldr	r3, [r3, #28]
 8007082:	4313      	orrs	r3, r2
 8007084:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007090:	f021 010c 	bic.w	r1, r1, #12
 8007094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800709a:	430b      	orrs	r3, r1
 800709c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800709e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	695b      	ldr	r3, [r3, #20]
 80070a4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80070a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070aa:	6999      	ldr	r1, [r3, #24]
 80070ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	ea40 0301 	orr.w	r3, r0, r1
 80070b4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80070b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	4bc5      	ldr	r3, [pc, #788]	; (80073d0 <UART_SetConfig+0x384>)
 80070bc:	429a      	cmp	r2, r3
 80070be:	d004      	beq.n	80070ca <UART_SetConfig+0x7e>
 80070c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	4bc3      	ldr	r3, [pc, #780]	; (80073d4 <UART_SetConfig+0x388>)
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d103      	bne.n	80070d2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80070ca:	f7fe fe25 	bl	8005d18 <HAL_RCC_GetPCLK2Freq>
 80070ce:	6778      	str	r0, [r7, #116]	; 0x74
 80070d0:	e002      	b.n	80070d8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80070d2:	f7fe fe0d 	bl	8005cf0 <HAL_RCC_GetPCLK1Freq>
 80070d6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070da:	69db      	ldr	r3, [r3, #28]
 80070dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070e0:	f040 80b6 	bne.w	8007250 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80070e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070e6:	461c      	mov	r4, r3
 80070e8:	f04f 0500 	mov.w	r5, #0
 80070ec:	4622      	mov	r2, r4
 80070ee:	462b      	mov	r3, r5
 80070f0:	1891      	adds	r1, r2, r2
 80070f2:	6439      	str	r1, [r7, #64]	; 0x40
 80070f4:	415b      	adcs	r3, r3
 80070f6:	647b      	str	r3, [r7, #68]	; 0x44
 80070f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80070fc:	1912      	adds	r2, r2, r4
 80070fe:	eb45 0303 	adc.w	r3, r5, r3
 8007102:	f04f 0000 	mov.w	r0, #0
 8007106:	f04f 0100 	mov.w	r1, #0
 800710a:	00d9      	lsls	r1, r3, #3
 800710c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007110:	00d0      	lsls	r0, r2, #3
 8007112:	4602      	mov	r2, r0
 8007114:	460b      	mov	r3, r1
 8007116:	1911      	adds	r1, r2, r4
 8007118:	6639      	str	r1, [r7, #96]	; 0x60
 800711a:	416b      	adcs	r3, r5
 800711c:	667b      	str	r3, [r7, #100]	; 0x64
 800711e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	461a      	mov	r2, r3
 8007124:	f04f 0300 	mov.w	r3, #0
 8007128:	1891      	adds	r1, r2, r2
 800712a:	63b9      	str	r1, [r7, #56]	; 0x38
 800712c:	415b      	adcs	r3, r3
 800712e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007130:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007134:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007138:	f7f9 f8ba 	bl	80002b0 <__aeabi_uldivmod>
 800713c:	4602      	mov	r2, r0
 800713e:	460b      	mov	r3, r1
 8007140:	4ba5      	ldr	r3, [pc, #660]	; (80073d8 <UART_SetConfig+0x38c>)
 8007142:	fba3 2302 	umull	r2, r3, r3, r2
 8007146:	095b      	lsrs	r3, r3, #5
 8007148:	011e      	lsls	r6, r3, #4
 800714a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800714c:	461c      	mov	r4, r3
 800714e:	f04f 0500 	mov.w	r5, #0
 8007152:	4622      	mov	r2, r4
 8007154:	462b      	mov	r3, r5
 8007156:	1891      	adds	r1, r2, r2
 8007158:	6339      	str	r1, [r7, #48]	; 0x30
 800715a:	415b      	adcs	r3, r3
 800715c:	637b      	str	r3, [r7, #52]	; 0x34
 800715e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007162:	1912      	adds	r2, r2, r4
 8007164:	eb45 0303 	adc.w	r3, r5, r3
 8007168:	f04f 0000 	mov.w	r0, #0
 800716c:	f04f 0100 	mov.w	r1, #0
 8007170:	00d9      	lsls	r1, r3, #3
 8007172:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007176:	00d0      	lsls	r0, r2, #3
 8007178:	4602      	mov	r2, r0
 800717a:	460b      	mov	r3, r1
 800717c:	1911      	adds	r1, r2, r4
 800717e:	65b9      	str	r1, [r7, #88]	; 0x58
 8007180:	416b      	adcs	r3, r5
 8007182:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	461a      	mov	r2, r3
 800718a:	f04f 0300 	mov.w	r3, #0
 800718e:	1891      	adds	r1, r2, r2
 8007190:	62b9      	str	r1, [r7, #40]	; 0x28
 8007192:	415b      	adcs	r3, r3
 8007194:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007196:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800719a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800719e:	f7f9 f887 	bl	80002b0 <__aeabi_uldivmod>
 80071a2:	4602      	mov	r2, r0
 80071a4:	460b      	mov	r3, r1
 80071a6:	4b8c      	ldr	r3, [pc, #560]	; (80073d8 <UART_SetConfig+0x38c>)
 80071a8:	fba3 1302 	umull	r1, r3, r3, r2
 80071ac:	095b      	lsrs	r3, r3, #5
 80071ae:	2164      	movs	r1, #100	; 0x64
 80071b0:	fb01 f303 	mul.w	r3, r1, r3
 80071b4:	1ad3      	subs	r3, r2, r3
 80071b6:	00db      	lsls	r3, r3, #3
 80071b8:	3332      	adds	r3, #50	; 0x32
 80071ba:	4a87      	ldr	r2, [pc, #540]	; (80073d8 <UART_SetConfig+0x38c>)
 80071bc:	fba2 2303 	umull	r2, r3, r2, r3
 80071c0:	095b      	lsrs	r3, r3, #5
 80071c2:	005b      	lsls	r3, r3, #1
 80071c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80071c8:	441e      	add	r6, r3
 80071ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071cc:	4618      	mov	r0, r3
 80071ce:	f04f 0100 	mov.w	r1, #0
 80071d2:	4602      	mov	r2, r0
 80071d4:	460b      	mov	r3, r1
 80071d6:	1894      	adds	r4, r2, r2
 80071d8:	623c      	str	r4, [r7, #32]
 80071da:	415b      	adcs	r3, r3
 80071dc:	627b      	str	r3, [r7, #36]	; 0x24
 80071de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80071e2:	1812      	adds	r2, r2, r0
 80071e4:	eb41 0303 	adc.w	r3, r1, r3
 80071e8:	f04f 0400 	mov.w	r4, #0
 80071ec:	f04f 0500 	mov.w	r5, #0
 80071f0:	00dd      	lsls	r5, r3, #3
 80071f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80071f6:	00d4      	lsls	r4, r2, #3
 80071f8:	4622      	mov	r2, r4
 80071fa:	462b      	mov	r3, r5
 80071fc:	1814      	adds	r4, r2, r0
 80071fe:	653c      	str	r4, [r7, #80]	; 0x50
 8007200:	414b      	adcs	r3, r1
 8007202:	657b      	str	r3, [r7, #84]	; 0x54
 8007204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	461a      	mov	r2, r3
 800720a:	f04f 0300 	mov.w	r3, #0
 800720e:	1891      	adds	r1, r2, r2
 8007210:	61b9      	str	r1, [r7, #24]
 8007212:	415b      	adcs	r3, r3
 8007214:	61fb      	str	r3, [r7, #28]
 8007216:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800721a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800721e:	f7f9 f847 	bl	80002b0 <__aeabi_uldivmod>
 8007222:	4602      	mov	r2, r0
 8007224:	460b      	mov	r3, r1
 8007226:	4b6c      	ldr	r3, [pc, #432]	; (80073d8 <UART_SetConfig+0x38c>)
 8007228:	fba3 1302 	umull	r1, r3, r3, r2
 800722c:	095b      	lsrs	r3, r3, #5
 800722e:	2164      	movs	r1, #100	; 0x64
 8007230:	fb01 f303 	mul.w	r3, r1, r3
 8007234:	1ad3      	subs	r3, r2, r3
 8007236:	00db      	lsls	r3, r3, #3
 8007238:	3332      	adds	r3, #50	; 0x32
 800723a:	4a67      	ldr	r2, [pc, #412]	; (80073d8 <UART_SetConfig+0x38c>)
 800723c:	fba2 2303 	umull	r2, r3, r2, r3
 8007240:	095b      	lsrs	r3, r3, #5
 8007242:	f003 0207 	and.w	r2, r3, #7
 8007246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4432      	add	r2, r6
 800724c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800724e:	e0b9      	b.n	80073c4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007250:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007252:	461c      	mov	r4, r3
 8007254:	f04f 0500 	mov.w	r5, #0
 8007258:	4622      	mov	r2, r4
 800725a:	462b      	mov	r3, r5
 800725c:	1891      	adds	r1, r2, r2
 800725e:	6139      	str	r1, [r7, #16]
 8007260:	415b      	adcs	r3, r3
 8007262:	617b      	str	r3, [r7, #20]
 8007264:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007268:	1912      	adds	r2, r2, r4
 800726a:	eb45 0303 	adc.w	r3, r5, r3
 800726e:	f04f 0000 	mov.w	r0, #0
 8007272:	f04f 0100 	mov.w	r1, #0
 8007276:	00d9      	lsls	r1, r3, #3
 8007278:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800727c:	00d0      	lsls	r0, r2, #3
 800727e:	4602      	mov	r2, r0
 8007280:	460b      	mov	r3, r1
 8007282:	eb12 0804 	adds.w	r8, r2, r4
 8007286:	eb43 0905 	adc.w	r9, r3, r5
 800728a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	4618      	mov	r0, r3
 8007290:	f04f 0100 	mov.w	r1, #0
 8007294:	f04f 0200 	mov.w	r2, #0
 8007298:	f04f 0300 	mov.w	r3, #0
 800729c:	008b      	lsls	r3, r1, #2
 800729e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80072a2:	0082      	lsls	r2, r0, #2
 80072a4:	4640      	mov	r0, r8
 80072a6:	4649      	mov	r1, r9
 80072a8:	f7f9 f802 	bl	80002b0 <__aeabi_uldivmod>
 80072ac:	4602      	mov	r2, r0
 80072ae:	460b      	mov	r3, r1
 80072b0:	4b49      	ldr	r3, [pc, #292]	; (80073d8 <UART_SetConfig+0x38c>)
 80072b2:	fba3 2302 	umull	r2, r3, r3, r2
 80072b6:	095b      	lsrs	r3, r3, #5
 80072b8:	011e      	lsls	r6, r3, #4
 80072ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072bc:	4618      	mov	r0, r3
 80072be:	f04f 0100 	mov.w	r1, #0
 80072c2:	4602      	mov	r2, r0
 80072c4:	460b      	mov	r3, r1
 80072c6:	1894      	adds	r4, r2, r2
 80072c8:	60bc      	str	r4, [r7, #8]
 80072ca:	415b      	adcs	r3, r3
 80072cc:	60fb      	str	r3, [r7, #12]
 80072ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072d2:	1812      	adds	r2, r2, r0
 80072d4:	eb41 0303 	adc.w	r3, r1, r3
 80072d8:	f04f 0400 	mov.w	r4, #0
 80072dc:	f04f 0500 	mov.w	r5, #0
 80072e0:	00dd      	lsls	r5, r3, #3
 80072e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80072e6:	00d4      	lsls	r4, r2, #3
 80072e8:	4622      	mov	r2, r4
 80072ea:	462b      	mov	r3, r5
 80072ec:	1814      	adds	r4, r2, r0
 80072ee:	64bc      	str	r4, [r7, #72]	; 0x48
 80072f0:	414b      	adcs	r3, r1
 80072f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	4618      	mov	r0, r3
 80072fa:	f04f 0100 	mov.w	r1, #0
 80072fe:	f04f 0200 	mov.w	r2, #0
 8007302:	f04f 0300 	mov.w	r3, #0
 8007306:	008b      	lsls	r3, r1, #2
 8007308:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800730c:	0082      	lsls	r2, r0, #2
 800730e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007312:	f7f8 ffcd 	bl	80002b0 <__aeabi_uldivmod>
 8007316:	4602      	mov	r2, r0
 8007318:	460b      	mov	r3, r1
 800731a:	4b2f      	ldr	r3, [pc, #188]	; (80073d8 <UART_SetConfig+0x38c>)
 800731c:	fba3 1302 	umull	r1, r3, r3, r2
 8007320:	095b      	lsrs	r3, r3, #5
 8007322:	2164      	movs	r1, #100	; 0x64
 8007324:	fb01 f303 	mul.w	r3, r1, r3
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	011b      	lsls	r3, r3, #4
 800732c:	3332      	adds	r3, #50	; 0x32
 800732e:	4a2a      	ldr	r2, [pc, #168]	; (80073d8 <UART_SetConfig+0x38c>)
 8007330:	fba2 2303 	umull	r2, r3, r2, r3
 8007334:	095b      	lsrs	r3, r3, #5
 8007336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800733a:	441e      	add	r6, r3
 800733c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800733e:	4618      	mov	r0, r3
 8007340:	f04f 0100 	mov.w	r1, #0
 8007344:	4602      	mov	r2, r0
 8007346:	460b      	mov	r3, r1
 8007348:	1894      	adds	r4, r2, r2
 800734a:	603c      	str	r4, [r7, #0]
 800734c:	415b      	adcs	r3, r3
 800734e:	607b      	str	r3, [r7, #4]
 8007350:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007354:	1812      	adds	r2, r2, r0
 8007356:	eb41 0303 	adc.w	r3, r1, r3
 800735a:	f04f 0400 	mov.w	r4, #0
 800735e:	f04f 0500 	mov.w	r5, #0
 8007362:	00dd      	lsls	r5, r3, #3
 8007364:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007368:	00d4      	lsls	r4, r2, #3
 800736a:	4622      	mov	r2, r4
 800736c:	462b      	mov	r3, r5
 800736e:	eb12 0a00 	adds.w	sl, r2, r0
 8007372:	eb43 0b01 	adc.w	fp, r3, r1
 8007376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	4618      	mov	r0, r3
 800737c:	f04f 0100 	mov.w	r1, #0
 8007380:	f04f 0200 	mov.w	r2, #0
 8007384:	f04f 0300 	mov.w	r3, #0
 8007388:	008b      	lsls	r3, r1, #2
 800738a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800738e:	0082      	lsls	r2, r0, #2
 8007390:	4650      	mov	r0, sl
 8007392:	4659      	mov	r1, fp
 8007394:	f7f8 ff8c 	bl	80002b0 <__aeabi_uldivmod>
 8007398:	4602      	mov	r2, r0
 800739a:	460b      	mov	r3, r1
 800739c:	4b0e      	ldr	r3, [pc, #56]	; (80073d8 <UART_SetConfig+0x38c>)
 800739e:	fba3 1302 	umull	r1, r3, r3, r2
 80073a2:	095b      	lsrs	r3, r3, #5
 80073a4:	2164      	movs	r1, #100	; 0x64
 80073a6:	fb01 f303 	mul.w	r3, r1, r3
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	011b      	lsls	r3, r3, #4
 80073ae:	3332      	adds	r3, #50	; 0x32
 80073b0:	4a09      	ldr	r2, [pc, #36]	; (80073d8 <UART_SetConfig+0x38c>)
 80073b2:	fba2 2303 	umull	r2, r3, r2, r3
 80073b6:	095b      	lsrs	r3, r3, #5
 80073b8:	f003 020f 	and.w	r2, r3, #15
 80073bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4432      	add	r2, r6
 80073c2:	609a      	str	r2, [r3, #8]
}
 80073c4:	bf00      	nop
 80073c6:	377c      	adds	r7, #124	; 0x7c
 80073c8:	46bd      	mov	sp, r7
 80073ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ce:	bf00      	nop
 80073d0:	40011000 	.word	0x40011000
 80073d4:	40011400 	.word	0x40011400
 80073d8:	51eb851f 	.word	0x51eb851f

080073dc <__NVIC_SetPriority>:
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	4603      	mov	r3, r0
 80073e4:	6039      	str	r1, [r7, #0]
 80073e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80073e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	db0a      	blt.n	8007406 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	b2da      	uxtb	r2, r3
 80073f4:	490c      	ldr	r1, [pc, #48]	; (8007428 <__NVIC_SetPriority+0x4c>)
 80073f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073fa:	0112      	lsls	r2, r2, #4
 80073fc:	b2d2      	uxtb	r2, r2
 80073fe:	440b      	add	r3, r1
 8007400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007404:	e00a      	b.n	800741c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	b2da      	uxtb	r2, r3
 800740a:	4908      	ldr	r1, [pc, #32]	; (800742c <__NVIC_SetPriority+0x50>)
 800740c:	79fb      	ldrb	r3, [r7, #7]
 800740e:	f003 030f 	and.w	r3, r3, #15
 8007412:	3b04      	subs	r3, #4
 8007414:	0112      	lsls	r2, r2, #4
 8007416:	b2d2      	uxtb	r2, r2
 8007418:	440b      	add	r3, r1
 800741a:	761a      	strb	r2, [r3, #24]
}
 800741c:	bf00      	nop
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr
 8007428:	e000e100 	.word	0xe000e100
 800742c:	e000ed00 	.word	0xe000ed00

08007430 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007430:	b580      	push	{r7, lr}
 8007432:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007434:	4b05      	ldr	r3, [pc, #20]	; (800744c <SysTick_Handler+0x1c>)
 8007436:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007438:	f001 fe9c 	bl	8009174 <xTaskGetSchedulerState>
 800743c:	4603      	mov	r3, r0
 800743e:	2b01      	cmp	r3, #1
 8007440:	d001      	beq.n	8007446 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007442:	f002 fd81 	bl	8009f48 <xPortSysTickHandler>

  }
}
 8007446:	bf00      	nop
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	e000e010 	.word	0xe000e010

08007450 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007450:	b580      	push	{r7, lr}
 8007452:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007454:	2100      	movs	r1, #0
 8007456:	f06f 0004 	mvn.w	r0, #4
 800745a:	f7ff ffbf 	bl	80073dc <__NVIC_SetPriority>
#endif
}
 800745e:	bf00      	nop
 8007460:	bd80      	pop	{r7, pc}
	...

08007464 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800746a:	f3ef 8305 	mrs	r3, IPSR
 800746e:	603b      	str	r3, [r7, #0]
  return(result);
 8007470:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007472:	2b00      	cmp	r3, #0
 8007474:	d003      	beq.n	800747e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007476:	f06f 0305 	mvn.w	r3, #5
 800747a:	607b      	str	r3, [r7, #4]
 800747c:	e00c      	b.n	8007498 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800747e:	4b0a      	ldr	r3, [pc, #40]	; (80074a8 <osKernelInitialize+0x44>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d105      	bne.n	8007492 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007486:	4b08      	ldr	r3, [pc, #32]	; (80074a8 <osKernelInitialize+0x44>)
 8007488:	2201      	movs	r2, #1
 800748a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800748c:	2300      	movs	r3, #0
 800748e:	607b      	str	r3, [r7, #4]
 8007490:	e002      	b.n	8007498 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007492:	f04f 33ff 	mov.w	r3, #4294967295
 8007496:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007498:	687b      	ldr	r3, [r7, #4]
}
 800749a:	4618      	mov	r0, r3
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop
 80074a8:	20001380 	.word	0x20001380

080074ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074b2:	f3ef 8305 	mrs	r3, IPSR
 80074b6:	603b      	str	r3, [r7, #0]
  return(result);
 80074b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d003      	beq.n	80074c6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80074be:	f06f 0305 	mvn.w	r3, #5
 80074c2:	607b      	str	r3, [r7, #4]
 80074c4:	e010      	b.n	80074e8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80074c6:	4b0b      	ldr	r3, [pc, #44]	; (80074f4 <osKernelStart+0x48>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d109      	bne.n	80074e2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80074ce:	f7ff ffbf 	bl	8007450 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80074d2:	4b08      	ldr	r3, [pc, #32]	; (80074f4 <osKernelStart+0x48>)
 80074d4:	2202      	movs	r2, #2
 80074d6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80074d8:	f001 f9f0 	bl	80088bc <vTaskStartScheduler>
      stat = osOK;
 80074dc:	2300      	movs	r3, #0
 80074de:	607b      	str	r3, [r7, #4]
 80074e0:	e002      	b.n	80074e8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80074e2:	f04f 33ff 	mov.w	r3, #4294967295
 80074e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80074e8:	687b      	ldr	r3, [r7, #4]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	20001380 	.word	0x20001380

080074f8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b08e      	sub	sp, #56	; 0x38
 80074fc:	af04      	add	r7, sp, #16
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007504:	2300      	movs	r3, #0
 8007506:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007508:	f3ef 8305 	mrs	r3, IPSR
 800750c:	617b      	str	r3, [r7, #20]
  return(result);
 800750e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007510:	2b00      	cmp	r3, #0
 8007512:	d17e      	bne.n	8007612 <osThreadNew+0x11a>
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d07b      	beq.n	8007612 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800751a:	2380      	movs	r3, #128	; 0x80
 800751c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800751e:	2318      	movs	r3, #24
 8007520:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007522:	2300      	movs	r3, #0
 8007524:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007526:	f04f 33ff 	mov.w	r3, #4294967295
 800752a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d045      	beq.n	80075be <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d002      	beq.n	8007540 <osThreadNew+0x48>
        name = attr->name;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	699b      	ldr	r3, [r3, #24]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d002      	beq.n	800754e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	699b      	ldr	r3, [r3, #24]
 800754c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d008      	beq.n	8007566 <osThreadNew+0x6e>
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	2b38      	cmp	r3, #56	; 0x38
 8007558:	d805      	bhi.n	8007566 <osThreadNew+0x6e>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	f003 0301 	and.w	r3, r3, #1
 8007562:	2b00      	cmp	r3, #0
 8007564:	d001      	beq.n	800756a <osThreadNew+0x72>
        return (NULL);
 8007566:	2300      	movs	r3, #0
 8007568:	e054      	b.n	8007614 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	695b      	ldr	r3, [r3, #20]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d003      	beq.n	800757a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	695b      	ldr	r3, [r3, #20]
 8007576:	089b      	lsrs	r3, r3, #2
 8007578:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00e      	beq.n	80075a0 <osThreadNew+0xa8>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	2bbb      	cmp	r3, #187	; 0xbb
 8007588:	d90a      	bls.n	80075a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800758e:	2b00      	cmp	r3, #0
 8007590:	d006      	beq.n	80075a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	695b      	ldr	r3, [r3, #20]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d002      	beq.n	80075a0 <osThreadNew+0xa8>
        mem = 1;
 800759a:	2301      	movs	r3, #1
 800759c:	61bb      	str	r3, [r7, #24]
 800759e:	e010      	b.n	80075c2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10c      	bne.n	80075c2 <osThreadNew+0xca>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d108      	bne.n	80075c2 <osThreadNew+0xca>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d104      	bne.n	80075c2 <osThreadNew+0xca>
          mem = 0;
 80075b8:	2300      	movs	r3, #0
 80075ba:	61bb      	str	r3, [r7, #24]
 80075bc:	e001      	b.n	80075c2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80075be:	2300      	movs	r3, #0
 80075c0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d110      	bne.n	80075ea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80075d0:	9202      	str	r2, [sp, #8]
 80075d2:	9301      	str	r3, [sp, #4]
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	6a3a      	ldr	r2, [r7, #32]
 80075dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f000 ff80 	bl	80084e4 <xTaskCreateStatic>
 80075e4:	4603      	mov	r3, r0
 80075e6:	613b      	str	r3, [r7, #16]
 80075e8:	e013      	b.n	8007612 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d110      	bne.n	8007612 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80075f0:	6a3b      	ldr	r3, [r7, #32]
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	f107 0310 	add.w	r3, r7, #16
 80075f8:	9301      	str	r3, [sp, #4]
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	9300      	str	r3, [sp, #0]
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	f000 ffcb 	bl	800859e <xTaskCreate>
 8007608:	4603      	mov	r3, r0
 800760a:	2b01      	cmp	r3, #1
 800760c:	d001      	beq.n	8007612 <osThreadNew+0x11a>
            hTask = NULL;
 800760e:	2300      	movs	r3, #0
 8007610:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007612:	693b      	ldr	r3, [r7, #16]
}
 8007614:	4618      	mov	r0, r3
 8007616:	3728      	adds	r7, #40	; 0x28
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800761c:	b480      	push	{r7}
 800761e:	b085      	sub	sp, #20
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	4a07      	ldr	r2, [pc, #28]	; (8007648 <vApplicationGetIdleTaskMemory+0x2c>)
 800762c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	4a06      	ldr	r2, [pc, #24]	; (800764c <vApplicationGetIdleTaskMemory+0x30>)
 8007632:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2280      	movs	r2, #128	; 0x80
 8007638:	601a      	str	r2, [r3, #0]
}
 800763a:	bf00      	nop
 800763c:	3714      	adds	r7, #20
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr
 8007646:	bf00      	nop
 8007648:	20001384 	.word	0x20001384
 800764c:	20001440 	.word	0x20001440

08007650 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007650:	b480      	push	{r7}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	4a07      	ldr	r2, [pc, #28]	; (800767c <vApplicationGetTimerTaskMemory+0x2c>)
 8007660:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	4a06      	ldr	r2, [pc, #24]	; (8007680 <vApplicationGetTimerTaskMemory+0x30>)
 8007666:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800766e:	601a      	str	r2, [r3, #0]
}
 8007670:	bf00      	nop
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr
 800767c:	20001640 	.word	0x20001640
 8007680:	200016fc 	.word	0x200016fc

08007684 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f103 0208 	add.w	r2, r3, #8
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f04f 32ff 	mov.w	r2, #4294967295
 800769c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f103 0208 	add.w	r2, r3, #8
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f103 0208 	add.w	r2, r3, #8
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80076b8:	bf00      	nop
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80076d2:	bf00      	nop
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80076de:	b480      	push	{r7}
 80076e0:	b085      	sub	sp, #20
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
 80076e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	689a      	ldr	r2, [r3, #8]
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	683a      	ldr	r2, [r7, #0]
 8007702:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	683a      	ldr	r2, [r7, #0]
 8007708:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	1c5a      	adds	r2, r3, #1
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	601a      	str	r2, [r3, #0]
}
 800771a:	bf00      	nop
 800771c:	3714      	adds	r7, #20
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr

08007726 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007726:	b480      	push	{r7}
 8007728:	b085      	sub	sp, #20
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
 800772e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800773c:	d103      	bne.n	8007746 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	60fb      	str	r3, [r7, #12]
 8007744:	e00c      	b.n	8007760 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	3308      	adds	r3, #8
 800774a:	60fb      	str	r3, [r7, #12]
 800774c:	e002      	b.n	8007754 <vListInsert+0x2e>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	60fb      	str	r3, [r7, #12]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68ba      	ldr	r2, [r7, #8]
 800775c:	429a      	cmp	r2, r3
 800775e:	d2f6      	bcs.n	800774e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	683a      	ldr	r2, [r7, #0]
 800776e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	683a      	ldr	r2, [r7, #0]
 800777a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	1c5a      	adds	r2, r3, #1
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	601a      	str	r2, [r3, #0]
}
 800778c:	bf00      	nop
 800778e:	3714      	adds	r7, #20
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	6892      	ldr	r2, [r2, #8]
 80077ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	6852      	ldr	r2, [r2, #4]
 80077b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d103      	bne.n	80077cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	689a      	ldr	r2, [r3, #8]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	1e5a      	subs	r2, r3, #1
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3714      	adds	r7, #20
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10a      	bne.n	8007816 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007804:	f383 8811 	msr	BASEPRI, r3
 8007808:	f3bf 8f6f 	isb	sy
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007812:	bf00      	nop
 8007814:	e7fe      	b.n	8007814 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007816:	f002 fb05 	bl	8009e24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007822:	68f9      	ldr	r1, [r7, #12]
 8007824:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007826:	fb01 f303 	mul.w	r3, r1, r3
 800782a:	441a      	add	r2, r3
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2200      	movs	r2, #0
 8007834:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007846:	3b01      	subs	r3, #1
 8007848:	68f9      	ldr	r1, [r7, #12]
 800784a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800784c:	fb01 f303 	mul.w	r3, r1, r3
 8007850:	441a      	add	r2, r3
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	22ff      	movs	r2, #255	; 0xff
 800785a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	22ff      	movs	r2, #255	; 0xff
 8007862:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d114      	bne.n	8007896 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d01a      	beq.n	80078aa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	3310      	adds	r3, #16
 8007878:	4618      	mov	r0, r3
 800787a:	f001 fab9 	bl	8008df0 <xTaskRemoveFromEventList>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d012      	beq.n	80078aa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007884:	4b0c      	ldr	r3, [pc, #48]	; (80078b8 <xQueueGenericReset+0xcc>)
 8007886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800788a:	601a      	str	r2, [r3, #0]
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	f3bf 8f6f 	isb	sy
 8007894:	e009      	b.n	80078aa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	3310      	adds	r3, #16
 800789a:	4618      	mov	r0, r3
 800789c:	f7ff fef2 	bl	8007684 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	3324      	adds	r3, #36	; 0x24
 80078a4:	4618      	mov	r0, r3
 80078a6:	f7ff feed 	bl	8007684 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80078aa:	f002 faeb 	bl	8009e84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80078ae:	2301      	movs	r3, #1
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3710      	adds	r7, #16
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	e000ed04 	.word	0xe000ed04

080078bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b08e      	sub	sp, #56	; 0x38
 80078c0:	af02      	add	r7, sp, #8
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
 80078c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d10a      	bne.n	80078e6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80078d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d4:	f383 8811 	msr	BASEPRI, r3
 80078d8:	f3bf 8f6f 	isb	sy
 80078dc:	f3bf 8f4f 	dsb	sy
 80078e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80078e2:	bf00      	nop
 80078e4:	e7fe      	b.n	80078e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d10a      	bne.n	8007902 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80078ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f0:	f383 8811 	msr	BASEPRI, r3
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	f3bf 8f4f 	dsb	sy
 80078fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80078fe:	bf00      	nop
 8007900:	e7fe      	b.n	8007900 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d002      	beq.n	800790e <xQueueGenericCreateStatic+0x52>
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d001      	beq.n	8007912 <xQueueGenericCreateStatic+0x56>
 800790e:	2301      	movs	r3, #1
 8007910:	e000      	b.n	8007914 <xQueueGenericCreateStatic+0x58>
 8007912:	2300      	movs	r3, #0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d10a      	bne.n	800792e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800791c:	f383 8811 	msr	BASEPRI, r3
 8007920:	f3bf 8f6f 	isb	sy
 8007924:	f3bf 8f4f 	dsb	sy
 8007928:	623b      	str	r3, [r7, #32]
}
 800792a:	bf00      	nop
 800792c:	e7fe      	b.n	800792c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d102      	bne.n	800793a <xQueueGenericCreateStatic+0x7e>
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d101      	bne.n	800793e <xQueueGenericCreateStatic+0x82>
 800793a:	2301      	movs	r3, #1
 800793c:	e000      	b.n	8007940 <xQueueGenericCreateStatic+0x84>
 800793e:	2300      	movs	r3, #0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10a      	bne.n	800795a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007948:	f383 8811 	msr	BASEPRI, r3
 800794c:	f3bf 8f6f 	isb	sy
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	61fb      	str	r3, [r7, #28]
}
 8007956:	bf00      	nop
 8007958:	e7fe      	b.n	8007958 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800795a:	2350      	movs	r3, #80	; 0x50
 800795c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	2b50      	cmp	r3, #80	; 0x50
 8007962:	d00a      	beq.n	800797a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007968:	f383 8811 	msr	BASEPRI, r3
 800796c:	f3bf 8f6f 	isb	sy
 8007970:	f3bf 8f4f 	dsb	sy
 8007974:	61bb      	str	r3, [r7, #24]
}
 8007976:	bf00      	nop
 8007978:	e7fe      	b.n	8007978 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800797a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00d      	beq.n	80079a2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007988:	2201      	movs	r2, #1
 800798a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800798e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007994:	9300      	str	r3, [sp, #0]
 8007996:	4613      	mov	r3, r2
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	68b9      	ldr	r1, [r7, #8]
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f000 f83f 	bl	8007a20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80079a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3730      	adds	r7, #48	; 0x30
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b08a      	sub	sp, #40	; 0x28
 80079b0:	af02      	add	r7, sp, #8
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	4613      	mov	r3, r2
 80079b8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d10a      	bne.n	80079d6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80079c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c4:	f383 8811 	msr	BASEPRI, r3
 80079c8:	f3bf 8f6f 	isb	sy
 80079cc:	f3bf 8f4f 	dsb	sy
 80079d0:	613b      	str	r3, [r7, #16]
}
 80079d2:	bf00      	nop
 80079d4:	e7fe      	b.n	80079d4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	68ba      	ldr	r2, [r7, #8]
 80079da:	fb02 f303 	mul.w	r3, r2, r3
 80079de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	3350      	adds	r3, #80	; 0x50
 80079e4:	4618      	mov	r0, r3
 80079e6:	f002 fb3f 	bl	800a068 <pvPortMalloc>
 80079ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d011      	beq.n	8007a16 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	3350      	adds	r3, #80	; 0x50
 80079fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a04:	79fa      	ldrb	r2, [r7, #7]
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	9300      	str	r3, [sp, #0]
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	697a      	ldr	r2, [r7, #20]
 8007a0e:	68b9      	ldr	r1, [r7, #8]
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f000 f805 	bl	8007a20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007a16:	69bb      	ldr	r3, [r7, #24]
	}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3720      	adds	r7, #32
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	607a      	str	r2, [r7, #4]
 8007a2c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d103      	bne.n	8007a3c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	69ba      	ldr	r2, [r7, #24]
 8007a38:	601a      	str	r2, [r3, #0]
 8007a3a:	e002      	b.n	8007a42 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007a4e:	2101      	movs	r1, #1
 8007a50:	69b8      	ldr	r0, [r7, #24]
 8007a52:	f7ff fecb 	bl	80077ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	78fa      	ldrb	r2, [r7, #3]
 8007a5a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007a5e:	bf00      	nop
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b082      	sub	sp, #8
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00e      	beq.n	8007a92 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007a86:	2300      	movs	r3, #0
 8007a88:	2200      	movs	r2, #0
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 f81d 	bl	8007acc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007a92:	bf00      	nop
 8007a94:	3708      	adds	r7, #8
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b086      	sub	sp, #24
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	617b      	str	r3, [r7, #20]
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007aac:	79fb      	ldrb	r3, [r7, #7]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	6939      	ldr	r1, [r7, #16]
 8007ab2:	6978      	ldr	r0, [r7, #20]
 8007ab4:	f7ff ff7a 	bl	80079ac <xQueueGenericCreate>
 8007ab8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f7ff ffd3 	bl	8007a66 <prvInitialiseMutex>

		return xNewQueue;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
	}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3718      	adds	r7, #24
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
	...

08007acc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b08e      	sub	sp, #56	; 0x38
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	607a      	str	r2, [r7, #4]
 8007ad8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007ada:	2300      	movs	r3, #0
 8007adc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10a      	bne.n	8007afe <xQueueGenericSend+0x32>
	__asm volatile
 8007ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aec:	f383 8811 	msr	BASEPRI, r3
 8007af0:	f3bf 8f6f 	isb	sy
 8007af4:	f3bf 8f4f 	dsb	sy
 8007af8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007afa:	bf00      	nop
 8007afc:	e7fe      	b.n	8007afc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d103      	bne.n	8007b0c <xQueueGenericSend+0x40>
 8007b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d101      	bne.n	8007b10 <xQueueGenericSend+0x44>
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e000      	b.n	8007b12 <xQueueGenericSend+0x46>
 8007b10:	2300      	movs	r3, #0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d10a      	bne.n	8007b2c <xQueueGenericSend+0x60>
	__asm volatile
 8007b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1a:	f383 8811 	msr	BASEPRI, r3
 8007b1e:	f3bf 8f6f 	isb	sy
 8007b22:	f3bf 8f4f 	dsb	sy
 8007b26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b28:	bf00      	nop
 8007b2a:	e7fe      	b.n	8007b2a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	d103      	bne.n	8007b3a <xQueueGenericSend+0x6e>
 8007b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d101      	bne.n	8007b3e <xQueueGenericSend+0x72>
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e000      	b.n	8007b40 <xQueueGenericSend+0x74>
 8007b3e:	2300      	movs	r3, #0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d10a      	bne.n	8007b5a <xQueueGenericSend+0x8e>
	__asm volatile
 8007b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b48:	f383 8811 	msr	BASEPRI, r3
 8007b4c:	f3bf 8f6f 	isb	sy
 8007b50:	f3bf 8f4f 	dsb	sy
 8007b54:	623b      	str	r3, [r7, #32]
}
 8007b56:	bf00      	nop
 8007b58:	e7fe      	b.n	8007b58 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b5a:	f001 fb0b 	bl	8009174 <xTaskGetSchedulerState>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d102      	bne.n	8007b6a <xQueueGenericSend+0x9e>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d101      	bne.n	8007b6e <xQueueGenericSend+0xa2>
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e000      	b.n	8007b70 <xQueueGenericSend+0xa4>
 8007b6e:	2300      	movs	r3, #0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10a      	bne.n	8007b8a <xQueueGenericSend+0xbe>
	__asm volatile
 8007b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b78:	f383 8811 	msr	BASEPRI, r3
 8007b7c:	f3bf 8f6f 	isb	sy
 8007b80:	f3bf 8f4f 	dsb	sy
 8007b84:	61fb      	str	r3, [r7, #28]
}
 8007b86:	bf00      	nop
 8007b88:	e7fe      	b.n	8007b88 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b8a:	f002 f94b 	bl	8009e24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d302      	bcc.n	8007ba0 <xQueueGenericSend+0xd4>
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d129      	bne.n	8007bf4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ba0:	683a      	ldr	r2, [r7, #0]
 8007ba2:	68b9      	ldr	r1, [r7, #8]
 8007ba4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ba6:	f000 fb2f 	bl	8008208 <prvCopyDataToQueue>
 8007baa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d010      	beq.n	8007bd6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb6:	3324      	adds	r3, #36	; 0x24
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f001 f919 	bl	8008df0 <xTaskRemoveFromEventList>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d013      	beq.n	8007bec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007bc4:	4b3f      	ldr	r3, [pc, #252]	; (8007cc4 <xQueueGenericSend+0x1f8>)
 8007bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bca:	601a      	str	r2, [r3, #0]
 8007bcc:	f3bf 8f4f 	dsb	sy
 8007bd0:	f3bf 8f6f 	isb	sy
 8007bd4:	e00a      	b.n	8007bec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d007      	beq.n	8007bec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007bdc:	4b39      	ldr	r3, [pc, #228]	; (8007cc4 <xQueueGenericSend+0x1f8>)
 8007bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007be2:	601a      	str	r2, [r3, #0]
 8007be4:	f3bf 8f4f 	dsb	sy
 8007be8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007bec:	f002 f94a 	bl	8009e84 <vPortExitCritical>
				return pdPASS;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e063      	b.n	8007cbc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d103      	bne.n	8007c02 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007bfa:	f002 f943 	bl	8009e84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	e05c      	b.n	8007cbc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d106      	bne.n	8007c16 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c08:	f107 0314 	add.w	r3, r7, #20
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f001 f953 	bl	8008eb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c12:	2301      	movs	r3, #1
 8007c14:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c16:	f002 f935 	bl	8009e84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c1a:	f000 febf 	bl	800899c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c1e:	f002 f901 	bl	8009e24 <vPortEnterCritical>
 8007c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c28:	b25b      	sxtb	r3, r3
 8007c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c2e:	d103      	bne.n	8007c38 <xQueueGenericSend+0x16c>
 8007c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c32:	2200      	movs	r2, #0
 8007c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c3e:	b25b      	sxtb	r3, r3
 8007c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c44:	d103      	bne.n	8007c4e <xQueueGenericSend+0x182>
 8007c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c4e:	f002 f919 	bl	8009e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c52:	1d3a      	adds	r2, r7, #4
 8007c54:	f107 0314 	add.w	r3, r7, #20
 8007c58:	4611      	mov	r1, r2
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f001 f942 	bl	8008ee4 <xTaskCheckForTimeOut>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d124      	bne.n	8007cb0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007c66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c68:	f000 fbc6 	bl	80083f8 <prvIsQueueFull>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d018      	beq.n	8007ca4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c74:	3310      	adds	r3, #16
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	4611      	mov	r1, r2
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f001 f868 	bl	8008d50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007c80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c82:	f000 fb51 	bl	8008328 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007c86:	f000 fe97 	bl	80089b8 <xTaskResumeAll>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f47f af7c 	bne.w	8007b8a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007c92:	4b0c      	ldr	r3, [pc, #48]	; (8007cc4 <xQueueGenericSend+0x1f8>)
 8007c94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c98:	601a      	str	r2, [r3, #0]
 8007c9a:	f3bf 8f4f 	dsb	sy
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	e772      	b.n	8007b8a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007ca4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ca6:	f000 fb3f 	bl	8008328 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007caa:	f000 fe85 	bl	80089b8 <xTaskResumeAll>
 8007cae:	e76c      	b.n	8007b8a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007cb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cb2:	f000 fb39 	bl	8008328 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007cb6:	f000 fe7f 	bl	80089b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007cba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3738      	adds	r7, #56	; 0x38
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	e000ed04 	.word	0xe000ed04

08007cc8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b090      	sub	sp, #64	; 0x40
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	607a      	str	r2, [r7, #4]
 8007cd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10a      	bne.n	8007cf6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce4:	f383 8811 	msr	BASEPRI, r3
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007cf2:	bf00      	nop
 8007cf4:	e7fe      	b.n	8007cf4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d103      	bne.n	8007d04 <xQueueGenericSendFromISR+0x3c>
 8007cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d101      	bne.n	8007d08 <xQueueGenericSendFromISR+0x40>
 8007d04:	2301      	movs	r3, #1
 8007d06:	e000      	b.n	8007d0a <xQueueGenericSendFromISR+0x42>
 8007d08:	2300      	movs	r3, #0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d10a      	bne.n	8007d24 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d12:	f383 8811 	msr	BASEPRI, r3
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	f3bf 8f4f 	dsb	sy
 8007d1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007d20:	bf00      	nop
 8007d22:	e7fe      	b.n	8007d22 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	2b02      	cmp	r3, #2
 8007d28:	d103      	bne.n	8007d32 <xQueueGenericSendFromISR+0x6a>
 8007d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d101      	bne.n	8007d36 <xQueueGenericSendFromISR+0x6e>
 8007d32:	2301      	movs	r3, #1
 8007d34:	e000      	b.n	8007d38 <xQueueGenericSendFromISR+0x70>
 8007d36:	2300      	movs	r3, #0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d10a      	bne.n	8007d52 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d40:	f383 8811 	msr	BASEPRI, r3
 8007d44:	f3bf 8f6f 	isb	sy
 8007d48:	f3bf 8f4f 	dsb	sy
 8007d4c:	623b      	str	r3, [r7, #32]
}
 8007d4e:	bf00      	nop
 8007d50:	e7fe      	b.n	8007d50 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d52:	f002 f949 	bl	8009fe8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007d56:	f3ef 8211 	mrs	r2, BASEPRI
 8007d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5e:	f383 8811 	msr	BASEPRI, r3
 8007d62:	f3bf 8f6f 	isb	sy
 8007d66:	f3bf 8f4f 	dsb	sy
 8007d6a:	61fa      	str	r2, [r7, #28]
 8007d6c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007d6e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d70:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d302      	bcc.n	8007d84 <xQueueGenericSendFromISR+0xbc>
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	2b02      	cmp	r3, #2
 8007d82:	d12f      	bne.n	8007de4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d92:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d94:	683a      	ldr	r2, [r7, #0]
 8007d96:	68b9      	ldr	r1, [r7, #8]
 8007d98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d9a:	f000 fa35 	bl	8008208 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007d9e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da6:	d112      	bne.n	8007dce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d016      	beq.n	8007dde <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db2:	3324      	adds	r3, #36	; 0x24
 8007db4:	4618      	mov	r0, r3
 8007db6:	f001 f81b 	bl	8008df0 <xTaskRemoveFromEventList>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00e      	beq.n	8007dde <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00b      	beq.n	8007dde <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	601a      	str	r2, [r3, #0]
 8007dcc:	e007      	b.n	8007dde <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007dce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	b25a      	sxtb	r2, r3
 8007dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007dde:	2301      	movs	r3, #1
 8007de0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007de2:	e001      	b.n	8007de8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007de4:	2300      	movs	r3, #0
 8007de6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007df2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3740      	adds	r7, #64	; 0x40
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
	...

08007e00 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b08c      	sub	sp, #48	; 0x30
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10a      	bne.n	8007e30 <xQueueReceive+0x30>
	__asm volatile
 8007e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1e:	f383 8811 	msr	BASEPRI, r3
 8007e22:	f3bf 8f6f 	isb	sy
 8007e26:	f3bf 8f4f 	dsb	sy
 8007e2a:	623b      	str	r3, [r7, #32]
}
 8007e2c:	bf00      	nop
 8007e2e:	e7fe      	b.n	8007e2e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d103      	bne.n	8007e3e <xQueueReceive+0x3e>
 8007e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d101      	bne.n	8007e42 <xQueueReceive+0x42>
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e000      	b.n	8007e44 <xQueueReceive+0x44>
 8007e42:	2300      	movs	r3, #0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d10a      	bne.n	8007e5e <xQueueReceive+0x5e>
	__asm volatile
 8007e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4c:	f383 8811 	msr	BASEPRI, r3
 8007e50:	f3bf 8f6f 	isb	sy
 8007e54:	f3bf 8f4f 	dsb	sy
 8007e58:	61fb      	str	r3, [r7, #28]
}
 8007e5a:	bf00      	nop
 8007e5c:	e7fe      	b.n	8007e5c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e5e:	f001 f989 	bl	8009174 <xTaskGetSchedulerState>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d102      	bne.n	8007e6e <xQueueReceive+0x6e>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d101      	bne.n	8007e72 <xQueueReceive+0x72>
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e000      	b.n	8007e74 <xQueueReceive+0x74>
 8007e72:	2300      	movs	r3, #0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d10a      	bne.n	8007e8e <xQueueReceive+0x8e>
	__asm volatile
 8007e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7c:	f383 8811 	msr	BASEPRI, r3
 8007e80:	f3bf 8f6f 	isb	sy
 8007e84:	f3bf 8f4f 	dsb	sy
 8007e88:	61bb      	str	r3, [r7, #24]
}
 8007e8a:	bf00      	nop
 8007e8c:	e7fe      	b.n	8007e8c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e8e:	f001 ffc9 	bl	8009e24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e96:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d01f      	beq.n	8007ede <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007e9e:	68b9      	ldr	r1, [r7, #8]
 8007ea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ea2:	f000 fa1b 	bl	80082dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea8:	1e5a      	subs	r2, r3, #1
 8007eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb0:	691b      	ldr	r3, [r3, #16]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d00f      	beq.n	8007ed6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb8:	3310      	adds	r3, #16
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f000 ff98 	bl	8008df0 <xTaskRemoveFromEventList>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d007      	beq.n	8007ed6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007ec6:	4b3d      	ldr	r3, [pc, #244]	; (8007fbc <xQueueReceive+0x1bc>)
 8007ec8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ecc:	601a      	str	r2, [r3, #0]
 8007ece:	f3bf 8f4f 	dsb	sy
 8007ed2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007ed6:	f001 ffd5 	bl	8009e84 <vPortExitCritical>
				return pdPASS;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e069      	b.n	8007fb2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d103      	bne.n	8007eec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ee4:	f001 ffce 	bl	8009e84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	e062      	b.n	8007fb2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d106      	bne.n	8007f00 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ef2:	f107 0310 	add.w	r3, r7, #16
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f000 ffde 	bl	8008eb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007efc:	2301      	movs	r3, #1
 8007efe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f00:	f001 ffc0 	bl	8009e84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f04:	f000 fd4a 	bl	800899c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f08:	f001 ff8c 	bl	8009e24 <vPortEnterCritical>
 8007f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f12:	b25b      	sxtb	r3, r3
 8007f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f18:	d103      	bne.n	8007f22 <xQueueReceive+0x122>
 8007f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f28:	b25b      	sxtb	r3, r3
 8007f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f2e:	d103      	bne.n	8007f38 <xQueueReceive+0x138>
 8007f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f32:	2200      	movs	r2, #0
 8007f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f38:	f001 ffa4 	bl	8009e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f3c:	1d3a      	adds	r2, r7, #4
 8007f3e:	f107 0310 	add.w	r3, r7, #16
 8007f42:	4611      	mov	r1, r2
 8007f44:	4618      	mov	r0, r3
 8007f46:	f000 ffcd 	bl	8008ee4 <xTaskCheckForTimeOut>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d123      	bne.n	8007f98 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f52:	f000 fa3b 	bl	80083cc <prvIsQueueEmpty>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d017      	beq.n	8007f8c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5e:	3324      	adds	r3, #36	; 0x24
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	4611      	mov	r1, r2
 8007f64:	4618      	mov	r0, r3
 8007f66:	f000 fef3 	bl	8008d50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f6c:	f000 f9dc 	bl	8008328 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f70:	f000 fd22 	bl	80089b8 <xTaskResumeAll>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d189      	bne.n	8007e8e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007f7a:	4b10      	ldr	r3, [pc, #64]	; (8007fbc <xQueueReceive+0x1bc>)
 8007f7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f80:	601a      	str	r2, [r3, #0]
 8007f82:	f3bf 8f4f 	dsb	sy
 8007f86:	f3bf 8f6f 	isb	sy
 8007f8a:	e780      	b.n	8007e8e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007f8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f8e:	f000 f9cb 	bl	8008328 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f92:	f000 fd11 	bl	80089b8 <xTaskResumeAll>
 8007f96:	e77a      	b.n	8007e8e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007f98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f9a:	f000 f9c5 	bl	8008328 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f9e:	f000 fd0b 	bl	80089b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fa4:	f000 fa12 	bl	80083cc <prvIsQueueEmpty>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f43f af6f 	beq.w	8007e8e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007fb0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3730      	adds	r7, #48	; 0x30
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	e000ed04 	.word	0xe000ed04

08007fc0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b08e      	sub	sp, #56	; 0x38
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d10a      	bne.n	8007ff2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe0:	f383 8811 	msr	BASEPRI, r3
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	f3bf 8f4f 	dsb	sy
 8007fec:	623b      	str	r3, [r7, #32]
}
 8007fee:	bf00      	nop
 8007ff0:	e7fe      	b.n	8007ff0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00a      	beq.n	8008010 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffe:	f383 8811 	msr	BASEPRI, r3
 8008002:	f3bf 8f6f 	isb	sy
 8008006:	f3bf 8f4f 	dsb	sy
 800800a:	61fb      	str	r3, [r7, #28]
}
 800800c:	bf00      	nop
 800800e:	e7fe      	b.n	800800e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008010:	f001 f8b0 	bl	8009174 <xTaskGetSchedulerState>
 8008014:	4603      	mov	r3, r0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d102      	bne.n	8008020 <xQueueSemaphoreTake+0x60>
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d101      	bne.n	8008024 <xQueueSemaphoreTake+0x64>
 8008020:	2301      	movs	r3, #1
 8008022:	e000      	b.n	8008026 <xQueueSemaphoreTake+0x66>
 8008024:	2300      	movs	r3, #0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d10a      	bne.n	8008040 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800802a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802e:	f383 8811 	msr	BASEPRI, r3
 8008032:	f3bf 8f6f 	isb	sy
 8008036:	f3bf 8f4f 	dsb	sy
 800803a:	61bb      	str	r3, [r7, #24]
}
 800803c:	bf00      	nop
 800803e:	e7fe      	b.n	800803e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008040:	f001 fef0 	bl	8009e24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008048:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800804a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804c:	2b00      	cmp	r3, #0
 800804e:	d024      	beq.n	800809a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008052:	1e5a      	subs	r2, r3, #1
 8008054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008056:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d104      	bne.n	800806a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008060:	f001 f9fe 	bl	8009460 <pvTaskIncrementMutexHeldCount>
 8008064:	4602      	mov	r2, r0
 8008066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008068:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800806a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00f      	beq.n	8008092 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008074:	3310      	adds	r3, #16
 8008076:	4618      	mov	r0, r3
 8008078:	f000 feba 	bl	8008df0 <xTaskRemoveFromEventList>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d007      	beq.n	8008092 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008082:	4b54      	ldr	r3, [pc, #336]	; (80081d4 <xQueueSemaphoreTake+0x214>)
 8008084:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008088:	601a      	str	r2, [r3, #0]
 800808a:	f3bf 8f4f 	dsb	sy
 800808e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008092:	f001 fef7 	bl	8009e84 <vPortExitCritical>
				return pdPASS;
 8008096:	2301      	movs	r3, #1
 8008098:	e097      	b.n	80081ca <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d111      	bne.n	80080c4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80080a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00a      	beq.n	80080bc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80080a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080aa:	f383 8811 	msr	BASEPRI, r3
 80080ae:	f3bf 8f6f 	isb	sy
 80080b2:	f3bf 8f4f 	dsb	sy
 80080b6:	617b      	str	r3, [r7, #20]
}
 80080b8:	bf00      	nop
 80080ba:	e7fe      	b.n	80080ba <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80080bc:	f001 fee2 	bl	8009e84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80080c0:	2300      	movs	r3, #0
 80080c2:	e082      	b.n	80081ca <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d106      	bne.n	80080d8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080ca:	f107 030c 	add.w	r3, r7, #12
 80080ce:	4618      	mov	r0, r3
 80080d0:	f000 fef2 	bl	8008eb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080d4:	2301      	movs	r3, #1
 80080d6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080d8:	f001 fed4 	bl	8009e84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080dc:	f000 fc5e 	bl	800899c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080e0:	f001 fea0 	bl	8009e24 <vPortEnterCritical>
 80080e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080ea:	b25b      	sxtb	r3, r3
 80080ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f0:	d103      	bne.n	80080fa <xQueueSemaphoreTake+0x13a>
 80080f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008100:	b25b      	sxtb	r3, r3
 8008102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008106:	d103      	bne.n	8008110 <xQueueSemaphoreTake+0x150>
 8008108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810a:	2200      	movs	r2, #0
 800810c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008110:	f001 feb8 	bl	8009e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008114:	463a      	mov	r2, r7
 8008116:	f107 030c 	add.w	r3, r7, #12
 800811a:	4611      	mov	r1, r2
 800811c:	4618      	mov	r0, r3
 800811e:	f000 fee1 	bl	8008ee4 <xTaskCheckForTimeOut>
 8008122:	4603      	mov	r3, r0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d132      	bne.n	800818e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008128:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800812a:	f000 f94f 	bl	80083cc <prvIsQueueEmpty>
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d026      	beq.n	8008182 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d109      	bne.n	8008150 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800813c:	f001 fe72 	bl	8009e24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	4618      	mov	r0, r3
 8008146:	f001 f833 	bl	80091b0 <xTaskPriorityInherit>
 800814a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800814c:	f001 fe9a 	bl	8009e84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008152:	3324      	adds	r3, #36	; 0x24
 8008154:	683a      	ldr	r2, [r7, #0]
 8008156:	4611      	mov	r1, r2
 8008158:	4618      	mov	r0, r3
 800815a:	f000 fdf9 	bl	8008d50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800815e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008160:	f000 f8e2 	bl	8008328 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008164:	f000 fc28 	bl	80089b8 <xTaskResumeAll>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	f47f af68 	bne.w	8008040 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008170:	4b18      	ldr	r3, [pc, #96]	; (80081d4 <xQueueSemaphoreTake+0x214>)
 8008172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008176:	601a      	str	r2, [r3, #0]
 8008178:	f3bf 8f4f 	dsb	sy
 800817c:	f3bf 8f6f 	isb	sy
 8008180:	e75e      	b.n	8008040 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008182:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008184:	f000 f8d0 	bl	8008328 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008188:	f000 fc16 	bl	80089b8 <xTaskResumeAll>
 800818c:	e758      	b.n	8008040 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800818e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008190:	f000 f8ca 	bl	8008328 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008194:	f000 fc10 	bl	80089b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008198:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800819a:	f000 f917 	bl	80083cc <prvIsQueueEmpty>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	f43f af4d 	beq.w	8008040 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80081a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00d      	beq.n	80081c8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80081ac:	f001 fe3a 	bl	8009e24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80081b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80081b2:	f000 f811 	bl	80081d8 <prvGetDisinheritPriorityAfterTimeout>
 80081b6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80081b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80081be:	4618      	mov	r0, r3
 80081c0:	f001 f8cc 	bl	800935c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80081c4:	f001 fe5e 	bl	8009e84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80081c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3738      	adds	r7, #56	; 0x38
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	e000ed04 	.word	0xe000ed04

080081d8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d006      	beq.n	80081f6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80081f2:	60fb      	str	r3, [r7, #12]
 80081f4:	e001      	b.n	80081fa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80081f6:	2300      	movs	r3, #0
 80081f8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80081fa:	68fb      	ldr	r3, [r7, #12]
	}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3714      	adds	r7, #20
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b086      	sub	sp, #24
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008214:	2300      	movs	r3, #0
 8008216:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800821c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008222:	2b00      	cmp	r3, #0
 8008224:	d10d      	bne.n	8008242 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d14d      	bne.n	80082ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	4618      	mov	r0, r3
 8008234:	f001 f824 	bl	8009280 <xTaskPriorityDisinherit>
 8008238:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2200      	movs	r2, #0
 800823e:	609a      	str	r2, [r3, #8]
 8008240:	e043      	b.n	80082ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d119      	bne.n	800827c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6858      	ldr	r0, [r3, #4]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008250:	461a      	mov	r2, r3
 8008252:	68b9      	ldr	r1, [r7, #8]
 8008254:	f002 feea 	bl	800b02c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	685a      	ldr	r2, [r3, #4]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008260:	441a      	add	r2, r3
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	685a      	ldr	r2, [r3, #4]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	429a      	cmp	r2, r3
 8008270:	d32b      	bcc.n	80082ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	605a      	str	r2, [r3, #4]
 800827a:	e026      	b.n	80082ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	68d8      	ldr	r0, [r3, #12]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008284:	461a      	mov	r2, r3
 8008286:	68b9      	ldr	r1, [r7, #8]
 8008288:	f002 fed0 	bl	800b02c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	68da      	ldr	r2, [r3, #12]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008294:	425b      	negs	r3, r3
 8008296:	441a      	add	r2, r3
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	68da      	ldr	r2, [r3, #12]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d207      	bcs.n	80082b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	689a      	ldr	r2, [r3, #8]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b0:	425b      	negs	r3, r3
 80082b2:	441a      	add	r2, r3
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2b02      	cmp	r3, #2
 80082bc:	d105      	bne.n	80082ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d002      	beq.n	80082ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	3b01      	subs	r3, #1
 80082c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	1c5a      	adds	r2, r3, #1
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80082d2:	697b      	ldr	r3, [r7, #20]
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3718      	adds	r7, #24
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d018      	beq.n	8008320 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	68da      	ldr	r2, [r3, #12]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f6:	441a      	add	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	68da      	ldr	r2, [r3, #12]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	429a      	cmp	r2, r3
 8008306:	d303      	bcc.n	8008310 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	68d9      	ldr	r1, [r3, #12]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008318:	461a      	mov	r2, r3
 800831a:	6838      	ldr	r0, [r7, #0]
 800831c:	f002 fe86 	bl	800b02c <memcpy>
	}
}
 8008320:	bf00      	nop
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008330:	f001 fd78 	bl	8009e24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800833a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800833c:	e011      	b.n	8008362 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008342:	2b00      	cmp	r3, #0
 8008344:	d012      	beq.n	800836c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	3324      	adds	r3, #36	; 0x24
 800834a:	4618      	mov	r0, r3
 800834c:	f000 fd50 	bl	8008df0 <xTaskRemoveFromEventList>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d001      	beq.n	800835a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008356:	f000 fe27 	bl	8008fa8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800835a:	7bfb      	ldrb	r3, [r7, #15]
 800835c:	3b01      	subs	r3, #1
 800835e:	b2db      	uxtb	r3, r3
 8008360:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008366:	2b00      	cmp	r3, #0
 8008368:	dce9      	bgt.n	800833e <prvUnlockQueue+0x16>
 800836a:	e000      	b.n	800836e <prvUnlockQueue+0x46>
					break;
 800836c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	22ff      	movs	r2, #255	; 0xff
 8008372:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008376:	f001 fd85 	bl	8009e84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800837a:	f001 fd53 	bl	8009e24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008384:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008386:	e011      	b.n	80083ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	691b      	ldr	r3, [r3, #16]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d012      	beq.n	80083b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	3310      	adds	r3, #16
 8008394:	4618      	mov	r0, r3
 8008396:	f000 fd2b 	bl	8008df0 <xTaskRemoveFromEventList>
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d001      	beq.n	80083a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80083a0:	f000 fe02 	bl	8008fa8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80083a4:	7bbb      	ldrb	r3, [r7, #14]
 80083a6:	3b01      	subs	r3, #1
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80083ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	dce9      	bgt.n	8008388 <prvUnlockQueue+0x60>
 80083b4:	e000      	b.n	80083b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80083b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	22ff      	movs	r2, #255	; 0xff
 80083bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80083c0:	f001 fd60 	bl	8009e84 <vPortExitCritical>
}
 80083c4:	bf00      	nop
 80083c6:	3710      	adds	r7, #16
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80083d4:	f001 fd26 	bl	8009e24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d102      	bne.n	80083e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80083e0:	2301      	movs	r3, #1
 80083e2:	60fb      	str	r3, [r7, #12]
 80083e4:	e001      	b.n	80083ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80083e6:	2300      	movs	r3, #0
 80083e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083ea:	f001 fd4b 	bl	8009e84 <vPortExitCritical>

	return xReturn;
 80083ee:	68fb      	ldr	r3, [r7, #12]
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008400:	f001 fd10 	bl	8009e24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800840c:	429a      	cmp	r2, r3
 800840e:	d102      	bne.n	8008416 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008410:	2301      	movs	r3, #1
 8008412:	60fb      	str	r3, [r7, #12]
 8008414:	e001      	b.n	800841a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008416:	2300      	movs	r3, #0
 8008418:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800841a:	f001 fd33 	bl	8009e84 <vPortExitCritical>

	return xReturn;
 800841e:	68fb      	ldr	r3, [r7, #12]
}
 8008420:	4618      	mov	r0, r3
 8008422:	3710      	adds	r7, #16
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008432:	2300      	movs	r3, #0
 8008434:	60fb      	str	r3, [r7, #12]
 8008436:	e014      	b.n	8008462 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008438:	4a0f      	ldr	r2, [pc, #60]	; (8008478 <vQueueAddToRegistry+0x50>)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d10b      	bne.n	800845c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008444:	490c      	ldr	r1, [pc, #48]	; (8008478 <vQueueAddToRegistry+0x50>)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	683a      	ldr	r2, [r7, #0]
 800844a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800844e:	4a0a      	ldr	r2, [pc, #40]	; (8008478 <vQueueAddToRegistry+0x50>)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	00db      	lsls	r3, r3, #3
 8008454:	4413      	add	r3, r2
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800845a:	e006      	b.n	800846a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	3301      	adds	r3, #1
 8008460:	60fb      	str	r3, [r7, #12]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2b07      	cmp	r3, #7
 8008466:	d9e7      	bls.n	8008438 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008468:	bf00      	nop
 800846a:	bf00      	nop
 800846c:	3714      	adds	r7, #20
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop
 8008478:	20006e48 	.word	0x20006e48

0800847c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800847c:	b580      	push	{r7, lr}
 800847e:	b086      	sub	sp, #24
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800848c:	f001 fcca 	bl	8009e24 <vPortEnterCritical>
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008496:	b25b      	sxtb	r3, r3
 8008498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800849c:	d103      	bne.n	80084a6 <vQueueWaitForMessageRestricted+0x2a>
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	2200      	movs	r2, #0
 80084a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084ac:	b25b      	sxtb	r3, r3
 80084ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b2:	d103      	bne.n	80084bc <vQueueWaitForMessageRestricted+0x40>
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084bc:	f001 fce2 	bl	8009e84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d106      	bne.n	80084d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	3324      	adds	r3, #36	; 0x24
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	68b9      	ldr	r1, [r7, #8]
 80084d0:	4618      	mov	r0, r3
 80084d2:	f000 fc61 	bl	8008d98 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80084d6:	6978      	ldr	r0, [r7, #20]
 80084d8:	f7ff ff26 	bl	8008328 <prvUnlockQueue>
	}
 80084dc:	bf00      	nop
 80084de:	3718      	adds	r7, #24
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b08e      	sub	sp, #56	; 0x38
 80084e8:	af04      	add	r7, sp, #16
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	607a      	str	r2, [r7, #4]
 80084f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80084f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d10a      	bne.n	800850e <xTaskCreateStatic+0x2a>
	__asm volatile
 80084f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084fc:	f383 8811 	msr	BASEPRI, r3
 8008500:	f3bf 8f6f 	isb	sy
 8008504:	f3bf 8f4f 	dsb	sy
 8008508:	623b      	str	r3, [r7, #32]
}
 800850a:	bf00      	nop
 800850c:	e7fe      	b.n	800850c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800850e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008510:	2b00      	cmp	r3, #0
 8008512:	d10a      	bne.n	800852a <xTaskCreateStatic+0x46>
	__asm volatile
 8008514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008518:	f383 8811 	msr	BASEPRI, r3
 800851c:	f3bf 8f6f 	isb	sy
 8008520:	f3bf 8f4f 	dsb	sy
 8008524:	61fb      	str	r3, [r7, #28]
}
 8008526:	bf00      	nop
 8008528:	e7fe      	b.n	8008528 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800852a:	23bc      	movs	r3, #188	; 0xbc
 800852c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	2bbc      	cmp	r3, #188	; 0xbc
 8008532:	d00a      	beq.n	800854a <xTaskCreateStatic+0x66>
	__asm volatile
 8008534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008538:	f383 8811 	msr	BASEPRI, r3
 800853c:	f3bf 8f6f 	isb	sy
 8008540:	f3bf 8f4f 	dsb	sy
 8008544:	61bb      	str	r3, [r7, #24]
}
 8008546:	bf00      	nop
 8008548:	e7fe      	b.n	8008548 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800854a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800854c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854e:	2b00      	cmp	r3, #0
 8008550:	d01e      	beq.n	8008590 <xTaskCreateStatic+0xac>
 8008552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008554:	2b00      	cmp	r3, #0
 8008556:	d01b      	beq.n	8008590 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800855a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800855c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008560:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008564:	2202      	movs	r2, #2
 8008566:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800856a:	2300      	movs	r3, #0
 800856c:	9303      	str	r3, [sp, #12]
 800856e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008570:	9302      	str	r3, [sp, #8]
 8008572:	f107 0314 	add.w	r3, r7, #20
 8008576:	9301      	str	r3, [sp, #4]
 8008578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857a:	9300      	str	r3, [sp, #0]
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	68b9      	ldr	r1, [r7, #8]
 8008582:	68f8      	ldr	r0, [r7, #12]
 8008584:	f000 f850 	bl	8008628 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008588:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800858a:	f000 f8f3 	bl	8008774 <prvAddNewTaskToReadyList>
 800858e:	e001      	b.n	8008594 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008590:	2300      	movs	r3, #0
 8008592:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008594:	697b      	ldr	r3, [r7, #20]
	}
 8008596:	4618      	mov	r0, r3
 8008598:	3728      	adds	r7, #40	; 0x28
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}

0800859e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800859e:	b580      	push	{r7, lr}
 80085a0:	b08c      	sub	sp, #48	; 0x30
 80085a2:	af04      	add	r7, sp, #16
 80085a4:	60f8      	str	r0, [r7, #12]
 80085a6:	60b9      	str	r1, [r7, #8]
 80085a8:	603b      	str	r3, [r7, #0]
 80085aa:	4613      	mov	r3, r2
 80085ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80085ae:	88fb      	ldrh	r3, [r7, #6]
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4618      	mov	r0, r3
 80085b4:	f001 fd58 	bl	800a068 <pvPortMalloc>
 80085b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d00e      	beq.n	80085de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80085c0:	20bc      	movs	r0, #188	; 0xbc
 80085c2:	f001 fd51 	bl	800a068 <pvPortMalloc>
 80085c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d003      	beq.n	80085d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	697a      	ldr	r2, [r7, #20]
 80085d2:	631a      	str	r2, [r3, #48]	; 0x30
 80085d4:	e005      	b.n	80085e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80085d6:	6978      	ldr	r0, [r7, #20]
 80085d8:	f001 fe12 	bl	800a200 <vPortFree>
 80085dc:	e001      	b.n	80085e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80085de:	2300      	movs	r3, #0
 80085e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d017      	beq.n	8008618 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	2200      	movs	r2, #0
 80085ec:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80085f0:	88fa      	ldrh	r2, [r7, #6]
 80085f2:	2300      	movs	r3, #0
 80085f4:	9303      	str	r3, [sp, #12]
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	9302      	str	r3, [sp, #8]
 80085fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fc:	9301      	str	r3, [sp, #4]
 80085fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008600:	9300      	str	r3, [sp, #0]
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	68b9      	ldr	r1, [r7, #8]
 8008606:	68f8      	ldr	r0, [r7, #12]
 8008608:	f000 f80e 	bl	8008628 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800860c:	69f8      	ldr	r0, [r7, #28]
 800860e:	f000 f8b1 	bl	8008774 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008612:	2301      	movs	r3, #1
 8008614:	61bb      	str	r3, [r7, #24]
 8008616:	e002      	b.n	800861e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008618:	f04f 33ff 	mov.w	r3, #4294967295
 800861c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800861e:	69bb      	ldr	r3, [r7, #24]
	}
 8008620:	4618      	mov	r0, r3
 8008622:	3720      	adds	r7, #32
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b088      	sub	sp, #32
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	607a      	str	r2, [r7, #4]
 8008634:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008638:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	461a      	mov	r2, r3
 8008640:	21a5      	movs	r1, #165	; 0xa5
 8008642:	f002 fd01 	bl	800b048 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008650:	3b01      	subs	r3, #1
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	4413      	add	r3, r2
 8008656:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008658:	69bb      	ldr	r3, [r7, #24]
 800865a:	f023 0307 	bic.w	r3, r3, #7
 800865e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	f003 0307 	and.w	r3, r3, #7
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00a      	beq.n	8008680 <prvInitialiseNewTask+0x58>
	__asm volatile
 800866a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866e:	f383 8811 	msr	BASEPRI, r3
 8008672:	f3bf 8f6f 	isb	sy
 8008676:	f3bf 8f4f 	dsb	sy
 800867a:	617b      	str	r3, [r7, #20]
}
 800867c:	bf00      	nop
 800867e:	e7fe      	b.n	800867e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d01f      	beq.n	80086c6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008686:	2300      	movs	r3, #0
 8008688:	61fb      	str	r3, [r7, #28]
 800868a:	e012      	b.n	80086b2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800868c:	68ba      	ldr	r2, [r7, #8]
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	4413      	add	r3, r2
 8008692:	7819      	ldrb	r1, [r3, #0]
 8008694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	4413      	add	r3, r2
 800869a:	3334      	adds	r3, #52	; 0x34
 800869c:	460a      	mov	r2, r1
 800869e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80086a0:	68ba      	ldr	r2, [r7, #8]
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	4413      	add	r3, r2
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d006      	beq.n	80086ba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80086ac:	69fb      	ldr	r3, [r7, #28]
 80086ae:	3301      	adds	r3, #1
 80086b0:	61fb      	str	r3, [r7, #28]
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	2b0f      	cmp	r3, #15
 80086b6:	d9e9      	bls.n	800868c <prvInitialiseNewTask+0x64>
 80086b8:	e000      	b.n	80086bc <prvInitialiseNewTask+0x94>
			{
				break;
 80086ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80086bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086be:	2200      	movs	r2, #0
 80086c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80086c4:	e003      	b.n	80086ce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80086c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80086ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d0:	2b37      	cmp	r3, #55	; 0x37
 80086d2:	d901      	bls.n	80086d8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80086d4:	2337      	movs	r3, #55	; 0x37
 80086d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80086d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80086de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80086e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e6:	2200      	movs	r2, #0
 80086e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80086ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ec:	3304      	adds	r3, #4
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7fe ffe8 	bl	80076c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80086f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f6:	3318      	adds	r3, #24
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7fe ffe3 	bl	80076c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80086fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008702:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008706:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800870a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800870e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008712:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008716:	2200      	movs	r2, #0
 8008718:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800871c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871e:	2200      	movs	r2, #0
 8008720:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008726:	3354      	adds	r3, #84	; 0x54
 8008728:	2260      	movs	r2, #96	; 0x60
 800872a:	2100      	movs	r1, #0
 800872c:	4618      	mov	r0, r3
 800872e:	f002 fc8b 	bl	800b048 <memset>
 8008732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008734:	4a0c      	ldr	r2, [pc, #48]	; (8008768 <prvInitialiseNewTask+0x140>)
 8008736:	659a      	str	r2, [r3, #88]	; 0x58
 8008738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873a:	4a0c      	ldr	r2, [pc, #48]	; (800876c <prvInitialiseNewTask+0x144>)
 800873c:	65da      	str	r2, [r3, #92]	; 0x5c
 800873e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008740:	4a0b      	ldr	r2, [pc, #44]	; (8008770 <prvInitialiseNewTask+0x148>)
 8008742:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008744:	683a      	ldr	r2, [r7, #0]
 8008746:	68f9      	ldr	r1, [r7, #12]
 8008748:	69b8      	ldr	r0, [r7, #24]
 800874a:	f001 fa3f 	bl	8009bcc <pxPortInitialiseStack>
 800874e:	4602      	mov	r2, r0
 8008750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008752:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008756:	2b00      	cmp	r3, #0
 8008758:	d002      	beq.n	8008760 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800875a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800875e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008760:	bf00      	nop
 8008762:	3720      	adds	r7, #32
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}
 8008768:	0801d164 	.word	0x0801d164
 800876c:	0801d184 	.word	0x0801d184
 8008770:	0801d144 	.word	0x0801d144

08008774 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800877c:	f001 fb52 	bl	8009e24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008780:	4b2d      	ldr	r3, [pc, #180]	; (8008838 <prvAddNewTaskToReadyList+0xc4>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	3301      	adds	r3, #1
 8008786:	4a2c      	ldr	r2, [pc, #176]	; (8008838 <prvAddNewTaskToReadyList+0xc4>)
 8008788:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800878a:	4b2c      	ldr	r3, [pc, #176]	; (800883c <prvAddNewTaskToReadyList+0xc8>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d109      	bne.n	80087a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008792:	4a2a      	ldr	r2, [pc, #168]	; (800883c <prvAddNewTaskToReadyList+0xc8>)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008798:	4b27      	ldr	r3, [pc, #156]	; (8008838 <prvAddNewTaskToReadyList+0xc4>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2b01      	cmp	r3, #1
 800879e:	d110      	bne.n	80087c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80087a0:	f000 fc26 	bl	8008ff0 <prvInitialiseTaskLists>
 80087a4:	e00d      	b.n	80087c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80087a6:	4b26      	ldr	r3, [pc, #152]	; (8008840 <prvAddNewTaskToReadyList+0xcc>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d109      	bne.n	80087c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80087ae:	4b23      	ldr	r3, [pc, #140]	; (800883c <prvAddNewTaskToReadyList+0xc8>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d802      	bhi.n	80087c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80087bc:	4a1f      	ldr	r2, [pc, #124]	; (800883c <prvAddNewTaskToReadyList+0xc8>)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80087c2:	4b20      	ldr	r3, [pc, #128]	; (8008844 <prvAddNewTaskToReadyList+0xd0>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	3301      	adds	r3, #1
 80087c8:	4a1e      	ldr	r2, [pc, #120]	; (8008844 <prvAddNewTaskToReadyList+0xd0>)
 80087ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80087cc:	4b1d      	ldr	r3, [pc, #116]	; (8008844 <prvAddNewTaskToReadyList+0xd0>)
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087d8:	4b1b      	ldr	r3, [pc, #108]	; (8008848 <prvAddNewTaskToReadyList+0xd4>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d903      	bls.n	80087e8 <prvAddNewTaskToReadyList+0x74>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e4:	4a18      	ldr	r2, [pc, #96]	; (8008848 <prvAddNewTaskToReadyList+0xd4>)
 80087e6:	6013      	str	r3, [r2, #0]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ec:	4613      	mov	r3, r2
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	4413      	add	r3, r2
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	4a15      	ldr	r2, [pc, #84]	; (800884c <prvAddNewTaskToReadyList+0xd8>)
 80087f6:	441a      	add	r2, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	3304      	adds	r3, #4
 80087fc:	4619      	mov	r1, r3
 80087fe:	4610      	mov	r0, r2
 8008800:	f7fe ff6d 	bl	80076de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008804:	f001 fb3e 	bl	8009e84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008808:	4b0d      	ldr	r3, [pc, #52]	; (8008840 <prvAddNewTaskToReadyList+0xcc>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00e      	beq.n	800882e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008810:	4b0a      	ldr	r3, [pc, #40]	; (800883c <prvAddNewTaskToReadyList+0xc8>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800881a:	429a      	cmp	r2, r3
 800881c:	d207      	bcs.n	800882e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800881e:	4b0c      	ldr	r3, [pc, #48]	; (8008850 <prvAddNewTaskToReadyList+0xdc>)
 8008820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008824:	601a      	str	r2, [r3, #0]
 8008826:	f3bf 8f4f 	dsb	sy
 800882a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800882e:	bf00      	nop
 8008830:	3708      	adds	r7, #8
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	20001fd0 	.word	0x20001fd0
 800883c:	20001afc 	.word	0x20001afc
 8008840:	20001fdc 	.word	0x20001fdc
 8008844:	20001fec 	.word	0x20001fec
 8008848:	20001fd8 	.word	0x20001fd8
 800884c:	20001b00 	.word	0x20001b00
 8008850:	e000ed04 	.word	0xe000ed04

08008854 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800885c:	2300      	movs	r3, #0
 800885e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d017      	beq.n	8008896 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008866:	4b13      	ldr	r3, [pc, #76]	; (80088b4 <vTaskDelay+0x60>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d00a      	beq.n	8008884 <vTaskDelay+0x30>
	__asm volatile
 800886e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008872:	f383 8811 	msr	BASEPRI, r3
 8008876:	f3bf 8f6f 	isb	sy
 800887a:	f3bf 8f4f 	dsb	sy
 800887e:	60bb      	str	r3, [r7, #8]
}
 8008880:	bf00      	nop
 8008882:	e7fe      	b.n	8008882 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008884:	f000 f88a 	bl	800899c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008888:	2100      	movs	r1, #0
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 fdfc 	bl	8009488 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008890:	f000 f892 	bl	80089b8 <xTaskResumeAll>
 8008894:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d107      	bne.n	80088ac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800889c:	4b06      	ldr	r3, [pc, #24]	; (80088b8 <vTaskDelay+0x64>)
 800889e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088a2:	601a      	str	r2, [r3, #0]
 80088a4:	f3bf 8f4f 	dsb	sy
 80088a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80088ac:	bf00      	nop
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	20001ff8 	.word	0x20001ff8
 80088b8:	e000ed04 	.word	0xe000ed04

080088bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b08a      	sub	sp, #40	; 0x28
 80088c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80088c2:	2300      	movs	r3, #0
 80088c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80088c6:	2300      	movs	r3, #0
 80088c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80088ca:	463a      	mov	r2, r7
 80088cc:	1d39      	adds	r1, r7, #4
 80088ce:	f107 0308 	add.w	r3, r7, #8
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7fe fea2 	bl	800761c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80088d8:	6839      	ldr	r1, [r7, #0]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	68ba      	ldr	r2, [r7, #8]
 80088de:	9202      	str	r2, [sp, #8]
 80088e0:	9301      	str	r3, [sp, #4]
 80088e2:	2300      	movs	r3, #0
 80088e4:	9300      	str	r3, [sp, #0]
 80088e6:	2300      	movs	r3, #0
 80088e8:	460a      	mov	r2, r1
 80088ea:	4924      	ldr	r1, [pc, #144]	; (800897c <vTaskStartScheduler+0xc0>)
 80088ec:	4824      	ldr	r0, [pc, #144]	; (8008980 <vTaskStartScheduler+0xc4>)
 80088ee:	f7ff fdf9 	bl	80084e4 <xTaskCreateStatic>
 80088f2:	4603      	mov	r3, r0
 80088f4:	4a23      	ldr	r2, [pc, #140]	; (8008984 <vTaskStartScheduler+0xc8>)
 80088f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80088f8:	4b22      	ldr	r3, [pc, #136]	; (8008984 <vTaskStartScheduler+0xc8>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d002      	beq.n	8008906 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008900:	2301      	movs	r3, #1
 8008902:	617b      	str	r3, [r7, #20]
 8008904:	e001      	b.n	800890a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008906:	2300      	movs	r3, #0
 8008908:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	2b01      	cmp	r3, #1
 800890e:	d102      	bne.n	8008916 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008910:	f000 fe0e 	bl	8009530 <xTimerCreateTimerTask>
 8008914:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	2b01      	cmp	r3, #1
 800891a:	d11b      	bne.n	8008954 <vTaskStartScheduler+0x98>
	__asm volatile
 800891c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008920:	f383 8811 	msr	BASEPRI, r3
 8008924:	f3bf 8f6f 	isb	sy
 8008928:	f3bf 8f4f 	dsb	sy
 800892c:	613b      	str	r3, [r7, #16]
}
 800892e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008930:	4b15      	ldr	r3, [pc, #84]	; (8008988 <vTaskStartScheduler+0xcc>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	3354      	adds	r3, #84	; 0x54
 8008936:	4a15      	ldr	r2, [pc, #84]	; (800898c <vTaskStartScheduler+0xd0>)
 8008938:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800893a:	4b15      	ldr	r3, [pc, #84]	; (8008990 <vTaskStartScheduler+0xd4>)
 800893c:	f04f 32ff 	mov.w	r2, #4294967295
 8008940:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008942:	4b14      	ldr	r3, [pc, #80]	; (8008994 <vTaskStartScheduler+0xd8>)
 8008944:	2201      	movs	r2, #1
 8008946:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008948:	4b13      	ldr	r3, [pc, #76]	; (8008998 <vTaskStartScheduler+0xdc>)
 800894a:	2200      	movs	r2, #0
 800894c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800894e:	f001 f9c7 	bl	8009ce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008952:	e00e      	b.n	8008972 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800895a:	d10a      	bne.n	8008972 <vTaskStartScheduler+0xb6>
	__asm volatile
 800895c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008960:	f383 8811 	msr	BASEPRI, r3
 8008964:	f3bf 8f6f 	isb	sy
 8008968:	f3bf 8f4f 	dsb	sy
 800896c:	60fb      	str	r3, [r7, #12]
}
 800896e:	bf00      	nop
 8008970:	e7fe      	b.n	8008970 <vTaskStartScheduler+0xb4>
}
 8008972:	bf00      	nop
 8008974:	3718      	adds	r7, #24
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	0800b260 	.word	0x0800b260
 8008980:	08008fc1 	.word	0x08008fc1
 8008984:	20001ff4 	.word	0x20001ff4
 8008988:	20001afc 	.word	0x20001afc
 800898c:	200002fc 	.word	0x200002fc
 8008990:	20001ff0 	.word	0x20001ff0
 8008994:	20001fdc 	.word	0x20001fdc
 8008998:	20001fd4 	.word	0x20001fd4

0800899c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800899c:	b480      	push	{r7}
 800899e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80089a0:	4b04      	ldr	r3, [pc, #16]	; (80089b4 <vTaskSuspendAll+0x18>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	3301      	adds	r3, #1
 80089a6:	4a03      	ldr	r2, [pc, #12]	; (80089b4 <vTaskSuspendAll+0x18>)
 80089a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80089aa:	bf00      	nop
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr
 80089b4:	20001ff8 	.word	0x20001ff8

080089b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80089be:	2300      	movs	r3, #0
 80089c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80089c2:	2300      	movs	r3, #0
 80089c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80089c6:	4b42      	ldr	r3, [pc, #264]	; (8008ad0 <xTaskResumeAll+0x118>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d10a      	bne.n	80089e4 <xTaskResumeAll+0x2c>
	__asm volatile
 80089ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d2:	f383 8811 	msr	BASEPRI, r3
 80089d6:	f3bf 8f6f 	isb	sy
 80089da:	f3bf 8f4f 	dsb	sy
 80089de:	603b      	str	r3, [r7, #0]
}
 80089e0:	bf00      	nop
 80089e2:	e7fe      	b.n	80089e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80089e4:	f001 fa1e 	bl	8009e24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80089e8:	4b39      	ldr	r3, [pc, #228]	; (8008ad0 <xTaskResumeAll+0x118>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	3b01      	subs	r3, #1
 80089ee:	4a38      	ldr	r2, [pc, #224]	; (8008ad0 <xTaskResumeAll+0x118>)
 80089f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089f2:	4b37      	ldr	r3, [pc, #220]	; (8008ad0 <xTaskResumeAll+0x118>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d162      	bne.n	8008ac0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80089fa:	4b36      	ldr	r3, [pc, #216]	; (8008ad4 <xTaskResumeAll+0x11c>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d05e      	beq.n	8008ac0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a02:	e02f      	b.n	8008a64 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a04:	4b34      	ldr	r3, [pc, #208]	; (8008ad8 <xTaskResumeAll+0x120>)
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	3318      	adds	r3, #24
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7fe fec1 	bl	8007798 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	3304      	adds	r3, #4
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7fe febc 	bl	8007798 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a24:	4b2d      	ldr	r3, [pc, #180]	; (8008adc <xTaskResumeAll+0x124>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d903      	bls.n	8008a34 <xTaskResumeAll+0x7c>
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a30:	4a2a      	ldr	r2, [pc, #168]	; (8008adc <xTaskResumeAll+0x124>)
 8008a32:	6013      	str	r3, [r2, #0]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a38:	4613      	mov	r3, r2
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	4413      	add	r3, r2
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	4a27      	ldr	r2, [pc, #156]	; (8008ae0 <xTaskResumeAll+0x128>)
 8008a42:	441a      	add	r2, r3
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	3304      	adds	r3, #4
 8008a48:	4619      	mov	r1, r3
 8008a4a:	4610      	mov	r0, r2
 8008a4c:	f7fe fe47 	bl	80076de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a54:	4b23      	ldr	r3, [pc, #140]	; (8008ae4 <xTaskResumeAll+0x12c>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d302      	bcc.n	8008a64 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008a5e:	4b22      	ldr	r3, [pc, #136]	; (8008ae8 <xTaskResumeAll+0x130>)
 8008a60:	2201      	movs	r2, #1
 8008a62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a64:	4b1c      	ldr	r3, [pc, #112]	; (8008ad8 <xTaskResumeAll+0x120>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d1cb      	bne.n	8008a04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d001      	beq.n	8008a76 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008a72:	f000 fb5f 	bl	8009134 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008a76:	4b1d      	ldr	r3, [pc, #116]	; (8008aec <xTaskResumeAll+0x134>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d010      	beq.n	8008aa4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008a82:	f000 f847 	bl	8008b14 <xTaskIncrementTick>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d002      	beq.n	8008a92 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008a8c:	4b16      	ldr	r3, [pc, #88]	; (8008ae8 <xTaskResumeAll+0x130>)
 8008a8e:	2201      	movs	r2, #1
 8008a90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	3b01      	subs	r3, #1
 8008a96:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d1f1      	bne.n	8008a82 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008a9e:	4b13      	ldr	r3, [pc, #76]	; (8008aec <xTaskResumeAll+0x134>)
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008aa4:	4b10      	ldr	r3, [pc, #64]	; (8008ae8 <xTaskResumeAll+0x130>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d009      	beq.n	8008ac0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008aac:	2301      	movs	r3, #1
 8008aae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008ab0:	4b0f      	ldr	r3, [pc, #60]	; (8008af0 <xTaskResumeAll+0x138>)
 8008ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ab6:	601a      	str	r2, [r3, #0]
 8008ab8:	f3bf 8f4f 	dsb	sy
 8008abc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ac0:	f001 f9e0 	bl	8009e84 <vPortExitCritical>

	return xAlreadyYielded;
 8008ac4:	68bb      	ldr	r3, [r7, #8]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	20001ff8 	.word	0x20001ff8
 8008ad4:	20001fd0 	.word	0x20001fd0
 8008ad8:	20001f90 	.word	0x20001f90
 8008adc:	20001fd8 	.word	0x20001fd8
 8008ae0:	20001b00 	.word	0x20001b00
 8008ae4:	20001afc 	.word	0x20001afc
 8008ae8:	20001fe4 	.word	0x20001fe4
 8008aec:	20001fe0 	.word	0x20001fe0
 8008af0:	e000ed04 	.word	0xe000ed04

08008af4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008afa:	4b05      	ldr	r3, [pc, #20]	; (8008b10 <xTaskGetTickCount+0x1c>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008b00:	687b      	ldr	r3, [r7, #4]
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	370c      	adds	r7, #12
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr
 8008b0e:	bf00      	nop
 8008b10:	20001fd4 	.word	0x20001fd4

08008b14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b086      	sub	sp, #24
 8008b18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b1e:	4b4f      	ldr	r3, [pc, #316]	; (8008c5c <xTaskIncrementTick+0x148>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	f040 808f 	bne.w	8008c46 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008b28:	4b4d      	ldr	r3, [pc, #308]	; (8008c60 <xTaskIncrementTick+0x14c>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008b30:	4a4b      	ldr	r2, [pc, #300]	; (8008c60 <xTaskIncrementTick+0x14c>)
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d120      	bne.n	8008b7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008b3c:	4b49      	ldr	r3, [pc, #292]	; (8008c64 <xTaskIncrementTick+0x150>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d00a      	beq.n	8008b5c <xTaskIncrementTick+0x48>
	__asm volatile
 8008b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4a:	f383 8811 	msr	BASEPRI, r3
 8008b4e:	f3bf 8f6f 	isb	sy
 8008b52:	f3bf 8f4f 	dsb	sy
 8008b56:	603b      	str	r3, [r7, #0]
}
 8008b58:	bf00      	nop
 8008b5a:	e7fe      	b.n	8008b5a <xTaskIncrementTick+0x46>
 8008b5c:	4b41      	ldr	r3, [pc, #260]	; (8008c64 <xTaskIncrementTick+0x150>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	60fb      	str	r3, [r7, #12]
 8008b62:	4b41      	ldr	r3, [pc, #260]	; (8008c68 <xTaskIncrementTick+0x154>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a3f      	ldr	r2, [pc, #252]	; (8008c64 <xTaskIncrementTick+0x150>)
 8008b68:	6013      	str	r3, [r2, #0]
 8008b6a:	4a3f      	ldr	r2, [pc, #252]	; (8008c68 <xTaskIncrementTick+0x154>)
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	6013      	str	r3, [r2, #0]
 8008b70:	4b3e      	ldr	r3, [pc, #248]	; (8008c6c <xTaskIncrementTick+0x158>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	3301      	adds	r3, #1
 8008b76:	4a3d      	ldr	r2, [pc, #244]	; (8008c6c <xTaskIncrementTick+0x158>)
 8008b78:	6013      	str	r3, [r2, #0]
 8008b7a:	f000 fadb 	bl	8009134 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008b7e:	4b3c      	ldr	r3, [pc, #240]	; (8008c70 <xTaskIncrementTick+0x15c>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	693a      	ldr	r2, [r7, #16]
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d349      	bcc.n	8008c1c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b88:	4b36      	ldr	r3, [pc, #216]	; (8008c64 <xTaskIncrementTick+0x150>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d104      	bne.n	8008b9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b92:	4b37      	ldr	r3, [pc, #220]	; (8008c70 <xTaskIncrementTick+0x15c>)
 8008b94:	f04f 32ff 	mov.w	r2, #4294967295
 8008b98:	601a      	str	r2, [r3, #0]
					break;
 8008b9a:	e03f      	b.n	8008c1c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b9c:	4b31      	ldr	r3, [pc, #196]	; (8008c64 <xTaskIncrementTick+0x150>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	68db      	ldr	r3, [r3, #12]
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008bac:	693a      	ldr	r2, [r7, #16]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d203      	bcs.n	8008bbc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008bb4:	4a2e      	ldr	r2, [pc, #184]	; (8008c70 <xTaskIncrementTick+0x15c>)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008bba:	e02f      	b.n	8008c1c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	3304      	adds	r3, #4
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f7fe fde9 	bl	8007798 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d004      	beq.n	8008bd8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	3318      	adds	r3, #24
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7fe fde0 	bl	8007798 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bdc:	4b25      	ldr	r3, [pc, #148]	; (8008c74 <xTaskIncrementTick+0x160>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d903      	bls.n	8008bec <xTaskIncrementTick+0xd8>
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be8:	4a22      	ldr	r2, [pc, #136]	; (8008c74 <xTaskIncrementTick+0x160>)
 8008bea:	6013      	str	r3, [r2, #0]
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bf0:	4613      	mov	r3, r2
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	4413      	add	r3, r2
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	4a1f      	ldr	r2, [pc, #124]	; (8008c78 <xTaskIncrementTick+0x164>)
 8008bfa:	441a      	add	r2, r3
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	3304      	adds	r3, #4
 8008c00:	4619      	mov	r1, r3
 8008c02:	4610      	mov	r0, r2
 8008c04:	f7fe fd6b 	bl	80076de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c0c:	4b1b      	ldr	r3, [pc, #108]	; (8008c7c <xTaskIncrementTick+0x168>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d3b8      	bcc.n	8008b88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008c16:	2301      	movs	r3, #1
 8008c18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c1a:	e7b5      	b.n	8008b88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008c1c:	4b17      	ldr	r3, [pc, #92]	; (8008c7c <xTaskIncrementTick+0x168>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c22:	4915      	ldr	r1, [pc, #84]	; (8008c78 <xTaskIncrementTick+0x164>)
 8008c24:	4613      	mov	r3, r2
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	4413      	add	r3, r2
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	440b      	add	r3, r1
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d901      	bls.n	8008c38 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008c34:	2301      	movs	r3, #1
 8008c36:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008c38:	4b11      	ldr	r3, [pc, #68]	; (8008c80 <xTaskIncrementTick+0x16c>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d007      	beq.n	8008c50 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008c40:	2301      	movs	r3, #1
 8008c42:	617b      	str	r3, [r7, #20]
 8008c44:	e004      	b.n	8008c50 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008c46:	4b0f      	ldr	r3, [pc, #60]	; (8008c84 <xTaskIncrementTick+0x170>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	4a0d      	ldr	r2, [pc, #52]	; (8008c84 <xTaskIncrementTick+0x170>)
 8008c4e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008c50:	697b      	ldr	r3, [r7, #20]
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3718      	adds	r7, #24
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	20001ff8 	.word	0x20001ff8
 8008c60:	20001fd4 	.word	0x20001fd4
 8008c64:	20001f88 	.word	0x20001f88
 8008c68:	20001f8c 	.word	0x20001f8c
 8008c6c:	20001fe8 	.word	0x20001fe8
 8008c70:	20001ff0 	.word	0x20001ff0
 8008c74:	20001fd8 	.word	0x20001fd8
 8008c78:	20001b00 	.word	0x20001b00
 8008c7c:	20001afc 	.word	0x20001afc
 8008c80:	20001fe4 	.word	0x20001fe4
 8008c84:	20001fe0 	.word	0x20001fe0

08008c88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c8e:	4b2a      	ldr	r3, [pc, #168]	; (8008d38 <vTaskSwitchContext+0xb0>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d003      	beq.n	8008c9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c96:	4b29      	ldr	r3, [pc, #164]	; (8008d3c <vTaskSwitchContext+0xb4>)
 8008c98:	2201      	movs	r2, #1
 8008c9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c9c:	e046      	b.n	8008d2c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008c9e:	4b27      	ldr	r3, [pc, #156]	; (8008d3c <vTaskSwitchContext+0xb4>)
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ca4:	4b26      	ldr	r3, [pc, #152]	; (8008d40 <vTaskSwitchContext+0xb8>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	60fb      	str	r3, [r7, #12]
 8008caa:	e010      	b.n	8008cce <vTaskSwitchContext+0x46>
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10a      	bne.n	8008cc8 <vTaskSwitchContext+0x40>
	__asm volatile
 8008cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb6:	f383 8811 	msr	BASEPRI, r3
 8008cba:	f3bf 8f6f 	isb	sy
 8008cbe:	f3bf 8f4f 	dsb	sy
 8008cc2:	607b      	str	r3, [r7, #4]
}
 8008cc4:	bf00      	nop
 8008cc6:	e7fe      	b.n	8008cc6 <vTaskSwitchContext+0x3e>
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	3b01      	subs	r3, #1
 8008ccc:	60fb      	str	r3, [r7, #12]
 8008cce:	491d      	ldr	r1, [pc, #116]	; (8008d44 <vTaskSwitchContext+0xbc>)
 8008cd0:	68fa      	ldr	r2, [r7, #12]
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	4413      	add	r3, r2
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	440b      	add	r3, r1
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d0e4      	beq.n	8008cac <vTaskSwitchContext+0x24>
 8008ce2:	68fa      	ldr	r2, [r7, #12]
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	4413      	add	r3, r2
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	4a15      	ldr	r2, [pc, #84]	; (8008d44 <vTaskSwitchContext+0xbc>)
 8008cee:	4413      	add	r3, r2
 8008cf0:	60bb      	str	r3, [r7, #8]
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	685a      	ldr	r2, [r3, #4]
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	605a      	str	r2, [r3, #4]
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	685a      	ldr	r2, [r3, #4]
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	3308      	adds	r3, #8
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d104      	bne.n	8008d12 <vTaskSwitchContext+0x8a>
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	685a      	ldr	r2, [r3, #4]
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	605a      	str	r2, [r3, #4]
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	4a0b      	ldr	r2, [pc, #44]	; (8008d48 <vTaskSwitchContext+0xc0>)
 8008d1a:	6013      	str	r3, [r2, #0]
 8008d1c:	4a08      	ldr	r2, [pc, #32]	; (8008d40 <vTaskSwitchContext+0xb8>)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008d22:	4b09      	ldr	r3, [pc, #36]	; (8008d48 <vTaskSwitchContext+0xc0>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	3354      	adds	r3, #84	; 0x54
 8008d28:	4a08      	ldr	r2, [pc, #32]	; (8008d4c <vTaskSwitchContext+0xc4>)
 8008d2a:	6013      	str	r3, [r2, #0]
}
 8008d2c:	bf00      	nop
 8008d2e:	3714      	adds	r7, #20
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr
 8008d38:	20001ff8 	.word	0x20001ff8
 8008d3c:	20001fe4 	.word	0x20001fe4
 8008d40:	20001fd8 	.word	0x20001fd8
 8008d44:	20001b00 	.word	0x20001b00
 8008d48:	20001afc 	.word	0x20001afc
 8008d4c:	200002fc 	.word	0x200002fc

08008d50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d10a      	bne.n	8008d76 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d64:	f383 8811 	msr	BASEPRI, r3
 8008d68:	f3bf 8f6f 	isb	sy
 8008d6c:	f3bf 8f4f 	dsb	sy
 8008d70:	60fb      	str	r3, [r7, #12]
}
 8008d72:	bf00      	nop
 8008d74:	e7fe      	b.n	8008d74 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d76:	4b07      	ldr	r3, [pc, #28]	; (8008d94 <vTaskPlaceOnEventList+0x44>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	3318      	adds	r3, #24
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f7fe fcd1 	bl	8007726 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d84:	2101      	movs	r1, #1
 8008d86:	6838      	ldr	r0, [r7, #0]
 8008d88:	f000 fb7e 	bl	8009488 <prvAddCurrentTaskToDelayedList>
}
 8008d8c:	bf00      	nop
 8008d8e:	3710      	adds	r7, #16
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	20001afc 	.word	0x20001afc

08008d98 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b086      	sub	sp, #24
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d10a      	bne.n	8008dc0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dae:	f383 8811 	msr	BASEPRI, r3
 8008db2:	f3bf 8f6f 	isb	sy
 8008db6:	f3bf 8f4f 	dsb	sy
 8008dba:	617b      	str	r3, [r7, #20]
}
 8008dbc:	bf00      	nop
 8008dbe:	e7fe      	b.n	8008dbe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008dc0:	4b0a      	ldr	r3, [pc, #40]	; (8008dec <vTaskPlaceOnEventListRestricted+0x54>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	3318      	adds	r3, #24
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f7fe fc88 	bl	80076de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d002      	beq.n	8008dda <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8008dd8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008dda:	6879      	ldr	r1, [r7, #4]
 8008ddc:	68b8      	ldr	r0, [r7, #8]
 8008dde:	f000 fb53 	bl	8009488 <prvAddCurrentTaskToDelayedList>
	}
 8008de2:	bf00      	nop
 8008de4:	3718      	adds	r7, #24
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	20001afc 	.word	0x20001afc

08008df0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b086      	sub	sp, #24
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	68db      	ldr	r3, [r3, #12]
 8008dfe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d10a      	bne.n	8008e1c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0a:	f383 8811 	msr	BASEPRI, r3
 8008e0e:	f3bf 8f6f 	isb	sy
 8008e12:	f3bf 8f4f 	dsb	sy
 8008e16:	60fb      	str	r3, [r7, #12]
}
 8008e18:	bf00      	nop
 8008e1a:	e7fe      	b.n	8008e1a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	3318      	adds	r3, #24
 8008e20:	4618      	mov	r0, r3
 8008e22:	f7fe fcb9 	bl	8007798 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e26:	4b1e      	ldr	r3, [pc, #120]	; (8008ea0 <xTaskRemoveFromEventList+0xb0>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d11d      	bne.n	8008e6a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	3304      	adds	r3, #4
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7fe fcb0 	bl	8007798 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e3c:	4b19      	ldr	r3, [pc, #100]	; (8008ea4 <xTaskRemoveFromEventList+0xb4>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d903      	bls.n	8008e4c <xTaskRemoveFromEventList+0x5c>
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e48:	4a16      	ldr	r2, [pc, #88]	; (8008ea4 <xTaskRemoveFromEventList+0xb4>)
 8008e4a:	6013      	str	r3, [r2, #0]
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e50:	4613      	mov	r3, r2
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	4413      	add	r3, r2
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	4a13      	ldr	r2, [pc, #76]	; (8008ea8 <xTaskRemoveFromEventList+0xb8>)
 8008e5a:	441a      	add	r2, r3
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	3304      	adds	r3, #4
 8008e60:	4619      	mov	r1, r3
 8008e62:	4610      	mov	r0, r2
 8008e64:	f7fe fc3b 	bl	80076de <vListInsertEnd>
 8008e68:	e005      	b.n	8008e76 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	3318      	adds	r3, #24
 8008e6e:	4619      	mov	r1, r3
 8008e70:	480e      	ldr	r0, [pc, #56]	; (8008eac <xTaskRemoveFromEventList+0xbc>)
 8008e72:	f7fe fc34 	bl	80076de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e7a:	4b0d      	ldr	r3, [pc, #52]	; (8008eb0 <xTaskRemoveFromEventList+0xc0>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d905      	bls.n	8008e90 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008e84:	2301      	movs	r3, #1
 8008e86:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008e88:	4b0a      	ldr	r3, [pc, #40]	; (8008eb4 <xTaskRemoveFromEventList+0xc4>)
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	601a      	str	r2, [r3, #0]
 8008e8e:	e001      	b.n	8008e94 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008e90:	2300      	movs	r3, #0
 8008e92:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008e94:	697b      	ldr	r3, [r7, #20]
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3718      	adds	r7, #24
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	20001ff8 	.word	0x20001ff8
 8008ea4:	20001fd8 	.word	0x20001fd8
 8008ea8:	20001b00 	.word	0x20001b00
 8008eac:	20001f90 	.word	0x20001f90
 8008eb0:	20001afc 	.word	0x20001afc
 8008eb4:	20001fe4 	.word	0x20001fe4

08008eb8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008ec0:	4b06      	ldr	r3, [pc, #24]	; (8008edc <vTaskInternalSetTimeOutState+0x24>)
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008ec8:	4b05      	ldr	r3, [pc, #20]	; (8008ee0 <vTaskInternalSetTimeOutState+0x28>)
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	605a      	str	r2, [r3, #4]
}
 8008ed0:	bf00      	nop
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr
 8008edc:	20001fe8 	.word	0x20001fe8
 8008ee0:	20001fd4 	.word	0x20001fd4

08008ee4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b088      	sub	sp, #32
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d10a      	bne.n	8008f0a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef8:	f383 8811 	msr	BASEPRI, r3
 8008efc:	f3bf 8f6f 	isb	sy
 8008f00:	f3bf 8f4f 	dsb	sy
 8008f04:	613b      	str	r3, [r7, #16]
}
 8008f06:	bf00      	nop
 8008f08:	e7fe      	b.n	8008f08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d10a      	bne.n	8008f26 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f14:	f383 8811 	msr	BASEPRI, r3
 8008f18:	f3bf 8f6f 	isb	sy
 8008f1c:	f3bf 8f4f 	dsb	sy
 8008f20:	60fb      	str	r3, [r7, #12]
}
 8008f22:	bf00      	nop
 8008f24:	e7fe      	b.n	8008f24 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008f26:	f000 ff7d 	bl	8009e24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008f2a:	4b1d      	ldr	r3, [pc, #116]	; (8008fa0 <xTaskCheckForTimeOut+0xbc>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	69ba      	ldr	r2, [r7, #24]
 8008f36:	1ad3      	subs	r3, r2, r3
 8008f38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f42:	d102      	bne.n	8008f4a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008f44:	2300      	movs	r3, #0
 8008f46:	61fb      	str	r3, [r7, #28]
 8008f48:	e023      	b.n	8008f92 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	4b15      	ldr	r3, [pc, #84]	; (8008fa4 <xTaskCheckForTimeOut+0xc0>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d007      	beq.n	8008f66 <xTaskCheckForTimeOut+0x82>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	69ba      	ldr	r2, [r7, #24]
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d302      	bcc.n	8008f66 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008f60:	2301      	movs	r3, #1
 8008f62:	61fb      	str	r3, [r7, #28]
 8008f64:	e015      	b.n	8008f92 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	697a      	ldr	r2, [r7, #20]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d20b      	bcs.n	8008f88 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	1ad2      	subs	r2, r2, r3
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f7ff ff9b 	bl	8008eb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008f82:	2300      	movs	r3, #0
 8008f84:	61fb      	str	r3, [r7, #28]
 8008f86:	e004      	b.n	8008f92 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008f92:	f000 ff77 	bl	8009e84 <vPortExitCritical>

	return xReturn;
 8008f96:	69fb      	ldr	r3, [r7, #28]
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3720      	adds	r7, #32
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	20001fd4 	.word	0x20001fd4
 8008fa4:	20001fe8 	.word	0x20001fe8

08008fa8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008fa8:	b480      	push	{r7}
 8008faa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008fac:	4b03      	ldr	r3, [pc, #12]	; (8008fbc <vTaskMissedYield+0x14>)
 8008fae:	2201      	movs	r2, #1
 8008fb0:	601a      	str	r2, [r3, #0]
}
 8008fb2:	bf00      	nop
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr
 8008fbc:	20001fe4 	.word	0x20001fe4

08008fc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008fc8:	f000 f852 	bl	8009070 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008fcc:	4b06      	ldr	r3, [pc, #24]	; (8008fe8 <prvIdleTask+0x28>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d9f9      	bls.n	8008fc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008fd4:	4b05      	ldr	r3, [pc, #20]	; (8008fec <prvIdleTask+0x2c>)
 8008fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fda:	601a      	str	r2, [r3, #0]
 8008fdc:	f3bf 8f4f 	dsb	sy
 8008fe0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008fe4:	e7f0      	b.n	8008fc8 <prvIdleTask+0x8>
 8008fe6:	bf00      	nop
 8008fe8:	20001b00 	.word	0x20001b00
 8008fec:	e000ed04 	.word	0xe000ed04

08008ff0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	607b      	str	r3, [r7, #4]
 8008ffa:	e00c      	b.n	8009016 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	4613      	mov	r3, r2
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	4413      	add	r3, r2
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	4a12      	ldr	r2, [pc, #72]	; (8009050 <prvInitialiseTaskLists+0x60>)
 8009008:	4413      	add	r3, r2
 800900a:	4618      	mov	r0, r3
 800900c:	f7fe fb3a 	bl	8007684 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	3301      	adds	r3, #1
 8009014:	607b      	str	r3, [r7, #4]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2b37      	cmp	r3, #55	; 0x37
 800901a:	d9ef      	bls.n	8008ffc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800901c:	480d      	ldr	r0, [pc, #52]	; (8009054 <prvInitialiseTaskLists+0x64>)
 800901e:	f7fe fb31 	bl	8007684 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009022:	480d      	ldr	r0, [pc, #52]	; (8009058 <prvInitialiseTaskLists+0x68>)
 8009024:	f7fe fb2e 	bl	8007684 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009028:	480c      	ldr	r0, [pc, #48]	; (800905c <prvInitialiseTaskLists+0x6c>)
 800902a:	f7fe fb2b 	bl	8007684 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800902e:	480c      	ldr	r0, [pc, #48]	; (8009060 <prvInitialiseTaskLists+0x70>)
 8009030:	f7fe fb28 	bl	8007684 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009034:	480b      	ldr	r0, [pc, #44]	; (8009064 <prvInitialiseTaskLists+0x74>)
 8009036:	f7fe fb25 	bl	8007684 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800903a:	4b0b      	ldr	r3, [pc, #44]	; (8009068 <prvInitialiseTaskLists+0x78>)
 800903c:	4a05      	ldr	r2, [pc, #20]	; (8009054 <prvInitialiseTaskLists+0x64>)
 800903e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009040:	4b0a      	ldr	r3, [pc, #40]	; (800906c <prvInitialiseTaskLists+0x7c>)
 8009042:	4a05      	ldr	r2, [pc, #20]	; (8009058 <prvInitialiseTaskLists+0x68>)
 8009044:	601a      	str	r2, [r3, #0]
}
 8009046:	bf00      	nop
 8009048:	3708      	adds	r7, #8
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	20001b00 	.word	0x20001b00
 8009054:	20001f60 	.word	0x20001f60
 8009058:	20001f74 	.word	0x20001f74
 800905c:	20001f90 	.word	0x20001f90
 8009060:	20001fa4 	.word	0x20001fa4
 8009064:	20001fbc 	.word	0x20001fbc
 8009068:	20001f88 	.word	0x20001f88
 800906c:	20001f8c 	.word	0x20001f8c

08009070 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009076:	e019      	b.n	80090ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009078:	f000 fed4 	bl	8009e24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800907c:	4b10      	ldr	r3, [pc, #64]	; (80090c0 <prvCheckTasksWaitingTermination+0x50>)
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	3304      	adds	r3, #4
 8009088:	4618      	mov	r0, r3
 800908a:	f7fe fb85 	bl	8007798 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800908e:	4b0d      	ldr	r3, [pc, #52]	; (80090c4 <prvCheckTasksWaitingTermination+0x54>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	3b01      	subs	r3, #1
 8009094:	4a0b      	ldr	r2, [pc, #44]	; (80090c4 <prvCheckTasksWaitingTermination+0x54>)
 8009096:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009098:	4b0b      	ldr	r3, [pc, #44]	; (80090c8 <prvCheckTasksWaitingTermination+0x58>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	3b01      	subs	r3, #1
 800909e:	4a0a      	ldr	r2, [pc, #40]	; (80090c8 <prvCheckTasksWaitingTermination+0x58>)
 80090a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80090a2:	f000 feef 	bl	8009e84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 f810 	bl	80090cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80090ac:	4b06      	ldr	r3, [pc, #24]	; (80090c8 <prvCheckTasksWaitingTermination+0x58>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d1e1      	bne.n	8009078 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80090b4:	bf00      	nop
 80090b6:	bf00      	nop
 80090b8:	3708      	adds	r7, #8
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	20001fa4 	.word	0x20001fa4
 80090c4:	20001fd0 	.word	0x20001fd0
 80090c8:	20001fb8 	.word	0x20001fb8

080090cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	3354      	adds	r3, #84	; 0x54
 80090d8:	4618      	mov	r0, r3
 80090da:	f001 ffcb 	bl	800b074 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d108      	bne.n	80090fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ec:	4618      	mov	r0, r3
 80090ee:	f001 f887 	bl	800a200 <vPortFree>
				vPortFree( pxTCB );
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f001 f884 	bl	800a200 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80090f8:	e018      	b.n	800912c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009100:	2b01      	cmp	r3, #1
 8009102:	d103      	bne.n	800910c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f001 f87b 	bl	800a200 <vPortFree>
	}
 800910a:	e00f      	b.n	800912c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009112:	2b02      	cmp	r3, #2
 8009114:	d00a      	beq.n	800912c <prvDeleteTCB+0x60>
	__asm volatile
 8009116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911a:	f383 8811 	msr	BASEPRI, r3
 800911e:	f3bf 8f6f 	isb	sy
 8009122:	f3bf 8f4f 	dsb	sy
 8009126:	60fb      	str	r3, [r7, #12]
}
 8009128:	bf00      	nop
 800912a:	e7fe      	b.n	800912a <prvDeleteTCB+0x5e>
	}
 800912c:	bf00      	nop
 800912e:	3710      	adds	r7, #16
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800913a:	4b0c      	ldr	r3, [pc, #48]	; (800916c <prvResetNextTaskUnblockTime+0x38>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d104      	bne.n	800914e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009144:	4b0a      	ldr	r3, [pc, #40]	; (8009170 <prvResetNextTaskUnblockTime+0x3c>)
 8009146:	f04f 32ff 	mov.w	r2, #4294967295
 800914a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800914c:	e008      	b.n	8009160 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800914e:	4b07      	ldr	r3, [pc, #28]	; (800916c <prvResetNextTaskUnblockTime+0x38>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	4a04      	ldr	r2, [pc, #16]	; (8009170 <prvResetNextTaskUnblockTime+0x3c>)
 800915e:	6013      	str	r3, [r2, #0]
}
 8009160:	bf00      	nop
 8009162:	370c      	adds	r7, #12
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr
 800916c:	20001f88 	.word	0x20001f88
 8009170:	20001ff0 	.word	0x20001ff0

08009174 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800917a:	4b0b      	ldr	r3, [pc, #44]	; (80091a8 <xTaskGetSchedulerState+0x34>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d102      	bne.n	8009188 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009182:	2301      	movs	r3, #1
 8009184:	607b      	str	r3, [r7, #4]
 8009186:	e008      	b.n	800919a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009188:	4b08      	ldr	r3, [pc, #32]	; (80091ac <xTaskGetSchedulerState+0x38>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d102      	bne.n	8009196 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009190:	2302      	movs	r3, #2
 8009192:	607b      	str	r3, [r7, #4]
 8009194:	e001      	b.n	800919a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009196:	2300      	movs	r3, #0
 8009198:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800919a:	687b      	ldr	r3, [r7, #4]
	}
 800919c:	4618      	mov	r0, r3
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr
 80091a8:	20001fdc 	.word	0x20001fdc
 80091ac:	20001ff8 	.word	0x20001ff8

080091b0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80091bc:	2300      	movs	r3, #0
 80091be:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d051      	beq.n	800926a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ca:	4b2a      	ldr	r3, [pc, #168]	; (8009274 <xTaskPriorityInherit+0xc4>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d241      	bcs.n	8009258 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	699b      	ldr	r3, [r3, #24]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	db06      	blt.n	80091ea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091dc:	4b25      	ldr	r3, [pc, #148]	; (8009274 <xTaskPriorityInherit+0xc4>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	6959      	ldr	r1, [r3, #20]
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091f2:	4613      	mov	r3, r2
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	4413      	add	r3, r2
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	4a1f      	ldr	r2, [pc, #124]	; (8009278 <xTaskPriorityInherit+0xc8>)
 80091fc:	4413      	add	r3, r2
 80091fe:	4299      	cmp	r1, r3
 8009200:	d122      	bne.n	8009248 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	3304      	adds	r3, #4
 8009206:	4618      	mov	r0, r3
 8009208:	f7fe fac6 	bl	8007798 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800920c:	4b19      	ldr	r3, [pc, #100]	; (8009274 <xTaskPriorityInherit+0xc4>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800921a:	4b18      	ldr	r3, [pc, #96]	; (800927c <xTaskPriorityInherit+0xcc>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	429a      	cmp	r2, r3
 8009220:	d903      	bls.n	800922a <xTaskPriorityInherit+0x7a>
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009226:	4a15      	ldr	r2, [pc, #84]	; (800927c <xTaskPriorityInherit+0xcc>)
 8009228:	6013      	str	r3, [r2, #0]
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800922e:	4613      	mov	r3, r2
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	4413      	add	r3, r2
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	4a10      	ldr	r2, [pc, #64]	; (8009278 <xTaskPriorityInherit+0xc8>)
 8009238:	441a      	add	r2, r3
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	3304      	adds	r3, #4
 800923e:	4619      	mov	r1, r3
 8009240:	4610      	mov	r0, r2
 8009242:	f7fe fa4c 	bl	80076de <vListInsertEnd>
 8009246:	e004      	b.n	8009252 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009248:	4b0a      	ldr	r3, [pc, #40]	; (8009274 <xTaskPriorityInherit+0xc4>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009252:	2301      	movs	r3, #1
 8009254:	60fb      	str	r3, [r7, #12]
 8009256:	e008      	b.n	800926a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800925c:	4b05      	ldr	r3, [pc, #20]	; (8009274 <xTaskPriorityInherit+0xc4>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009262:	429a      	cmp	r2, r3
 8009264:	d201      	bcs.n	800926a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009266:	2301      	movs	r3, #1
 8009268:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800926a:	68fb      	ldr	r3, [r7, #12]
	}
 800926c:	4618      	mov	r0, r3
 800926e:	3710      	adds	r7, #16
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}
 8009274:	20001afc 	.word	0x20001afc
 8009278:	20001b00 	.word	0x20001b00
 800927c:	20001fd8 	.word	0x20001fd8

08009280 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009280:	b580      	push	{r7, lr}
 8009282:	b086      	sub	sp, #24
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800928c:	2300      	movs	r3, #0
 800928e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d056      	beq.n	8009344 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009296:	4b2e      	ldr	r3, [pc, #184]	; (8009350 <xTaskPriorityDisinherit+0xd0>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	693a      	ldr	r2, [r7, #16]
 800929c:	429a      	cmp	r2, r3
 800929e:	d00a      	beq.n	80092b6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80092a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a4:	f383 8811 	msr	BASEPRI, r3
 80092a8:	f3bf 8f6f 	isb	sy
 80092ac:	f3bf 8f4f 	dsb	sy
 80092b0:	60fb      	str	r3, [r7, #12]
}
 80092b2:	bf00      	nop
 80092b4:	e7fe      	b.n	80092b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d10a      	bne.n	80092d4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80092be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c2:	f383 8811 	msr	BASEPRI, r3
 80092c6:	f3bf 8f6f 	isb	sy
 80092ca:	f3bf 8f4f 	dsb	sy
 80092ce:	60bb      	str	r3, [r7, #8]
}
 80092d0:	bf00      	nop
 80092d2:	e7fe      	b.n	80092d2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092d8:	1e5a      	subs	r2, r3, #1
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d02c      	beq.n	8009344 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d128      	bne.n	8009344 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	3304      	adds	r3, #4
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7fe fa4e 	bl	8007798 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009308:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009314:	4b0f      	ldr	r3, [pc, #60]	; (8009354 <xTaskPriorityDisinherit+0xd4>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	429a      	cmp	r2, r3
 800931a:	d903      	bls.n	8009324 <xTaskPriorityDisinherit+0xa4>
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009320:	4a0c      	ldr	r2, [pc, #48]	; (8009354 <xTaskPriorityDisinherit+0xd4>)
 8009322:	6013      	str	r3, [r2, #0]
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009328:	4613      	mov	r3, r2
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	4413      	add	r3, r2
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	4a09      	ldr	r2, [pc, #36]	; (8009358 <xTaskPriorityDisinherit+0xd8>)
 8009332:	441a      	add	r2, r3
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	3304      	adds	r3, #4
 8009338:	4619      	mov	r1, r3
 800933a:	4610      	mov	r0, r2
 800933c:	f7fe f9cf 	bl	80076de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009340:	2301      	movs	r3, #1
 8009342:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009344:	697b      	ldr	r3, [r7, #20]
	}
 8009346:	4618      	mov	r0, r3
 8009348:	3718      	adds	r7, #24
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	20001afc 	.word	0x20001afc
 8009354:	20001fd8 	.word	0x20001fd8
 8009358:	20001b00 	.word	0x20001b00

0800935c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800935c:	b580      	push	{r7, lr}
 800935e:	b088      	sub	sp, #32
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800936a:	2301      	movs	r3, #1
 800936c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d06a      	beq.n	800944a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009374:	69bb      	ldr	r3, [r7, #24]
 8009376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009378:	2b00      	cmp	r3, #0
 800937a:	d10a      	bne.n	8009392 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800937c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009380:	f383 8811 	msr	BASEPRI, r3
 8009384:	f3bf 8f6f 	isb	sy
 8009388:	f3bf 8f4f 	dsb	sy
 800938c:	60fb      	str	r3, [r7, #12]
}
 800938e:	bf00      	nop
 8009390:	e7fe      	b.n	8009390 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009396:	683a      	ldr	r2, [r7, #0]
 8009398:	429a      	cmp	r2, r3
 800939a:	d902      	bls.n	80093a2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	61fb      	str	r3, [r7, #28]
 80093a0:	e002      	b.n	80093a8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093a6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ac:	69fa      	ldr	r2, [r7, #28]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d04b      	beq.n	800944a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093b6:	697a      	ldr	r2, [r7, #20]
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d146      	bne.n	800944a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80093bc:	4b25      	ldr	r3, [pc, #148]	; (8009454 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	69ba      	ldr	r2, [r7, #24]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d10a      	bne.n	80093dc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80093c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ca:	f383 8811 	msr	BASEPRI, r3
 80093ce:	f3bf 8f6f 	isb	sy
 80093d2:	f3bf 8f4f 	dsb	sy
 80093d6:	60bb      	str	r3, [r7, #8]
}
 80093d8:	bf00      	nop
 80093da:	e7fe      	b.n	80093da <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80093dc:	69bb      	ldr	r3, [r7, #24]
 80093de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80093e2:	69bb      	ldr	r3, [r7, #24]
 80093e4:	69fa      	ldr	r2, [r7, #28]
 80093e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80093e8:	69bb      	ldr	r3, [r7, #24]
 80093ea:	699b      	ldr	r3, [r3, #24]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	db04      	blt.n	80093fa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	6959      	ldr	r1, [r3, #20]
 80093fe:	693a      	ldr	r2, [r7, #16]
 8009400:	4613      	mov	r3, r2
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	4413      	add	r3, r2
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	4a13      	ldr	r2, [pc, #76]	; (8009458 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800940a:	4413      	add	r3, r2
 800940c:	4299      	cmp	r1, r3
 800940e:	d11c      	bne.n	800944a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009410:	69bb      	ldr	r3, [r7, #24]
 8009412:	3304      	adds	r3, #4
 8009414:	4618      	mov	r0, r3
 8009416:	f7fe f9bf 	bl	8007798 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800941a:	69bb      	ldr	r3, [r7, #24]
 800941c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800941e:	4b0f      	ldr	r3, [pc, #60]	; (800945c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	429a      	cmp	r2, r3
 8009424:	d903      	bls.n	800942e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8009426:	69bb      	ldr	r3, [r7, #24]
 8009428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800942a:	4a0c      	ldr	r2, [pc, #48]	; (800945c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800942c:	6013      	str	r3, [r2, #0]
 800942e:	69bb      	ldr	r3, [r7, #24]
 8009430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009432:	4613      	mov	r3, r2
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	4413      	add	r3, r2
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	4a07      	ldr	r2, [pc, #28]	; (8009458 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800943c:	441a      	add	r2, r3
 800943e:	69bb      	ldr	r3, [r7, #24]
 8009440:	3304      	adds	r3, #4
 8009442:	4619      	mov	r1, r3
 8009444:	4610      	mov	r0, r2
 8009446:	f7fe f94a 	bl	80076de <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800944a:	bf00      	nop
 800944c:	3720      	adds	r7, #32
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	20001afc 	.word	0x20001afc
 8009458:	20001b00 	.word	0x20001b00
 800945c:	20001fd8 	.word	0x20001fd8

08009460 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009460:	b480      	push	{r7}
 8009462:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009464:	4b07      	ldr	r3, [pc, #28]	; (8009484 <pvTaskIncrementMutexHeldCount+0x24>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d004      	beq.n	8009476 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800946c:	4b05      	ldr	r3, [pc, #20]	; (8009484 <pvTaskIncrementMutexHeldCount+0x24>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009472:	3201      	adds	r2, #1
 8009474:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009476:	4b03      	ldr	r3, [pc, #12]	; (8009484 <pvTaskIncrementMutexHeldCount+0x24>)
 8009478:	681b      	ldr	r3, [r3, #0]
	}
 800947a:	4618      	mov	r0, r3
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr
 8009484:	20001afc 	.word	0x20001afc

08009488 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009492:	4b21      	ldr	r3, [pc, #132]	; (8009518 <prvAddCurrentTaskToDelayedList+0x90>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009498:	4b20      	ldr	r3, [pc, #128]	; (800951c <prvAddCurrentTaskToDelayedList+0x94>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	3304      	adds	r3, #4
 800949e:	4618      	mov	r0, r3
 80094a0:	f7fe f97a 	bl	8007798 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094aa:	d10a      	bne.n	80094c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d007      	beq.n	80094c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094b2:	4b1a      	ldr	r3, [pc, #104]	; (800951c <prvAddCurrentTaskToDelayedList+0x94>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	3304      	adds	r3, #4
 80094b8:	4619      	mov	r1, r3
 80094ba:	4819      	ldr	r0, [pc, #100]	; (8009520 <prvAddCurrentTaskToDelayedList+0x98>)
 80094bc:	f7fe f90f 	bl	80076de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80094c0:	e026      	b.n	8009510 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80094c2:	68fa      	ldr	r2, [r7, #12]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	4413      	add	r3, r2
 80094c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80094ca:	4b14      	ldr	r3, [pc, #80]	; (800951c <prvAddCurrentTaskToDelayedList+0x94>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	68ba      	ldr	r2, [r7, #8]
 80094d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80094d2:	68ba      	ldr	r2, [r7, #8]
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d209      	bcs.n	80094ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094da:	4b12      	ldr	r3, [pc, #72]	; (8009524 <prvAddCurrentTaskToDelayedList+0x9c>)
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	4b0f      	ldr	r3, [pc, #60]	; (800951c <prvAddCurrentTaskToDelayedList+0x94>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	3304      	adds	r3, #4
 80094e4:	4619      	mov	r1, r3
 80094e6:	4610      	mov	r0, r2
 80094e8:	f7fe f91d 	bl	8007726 <vListInsert>
}
 80094ec:	e010      	b.n	8009510 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094ee:	4b0e      	ldr	r3, [pc, #56]	; (8009528 <prvAddCurrentTaskToDelayedList+0xa0>)
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	4b0a      	ldr	r3, [pc, #40]	; (800951c <prvAddCurrentTaskToDelayedList+0x94>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	3304      	adds	r3, #4
 80094f8:	4619      	mov	r1, r3
 80094fa:	4610      	mov	r0, r2
 80094fc:	f7fe f913 	bl	8007726 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009500:	4b0a      	ldr	r3, [pc, #40]	; (800952c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	68ba      	ldr	r2, [r7, #8]
 8009506:	429a      	cmp	r2, r3
 8009508:	d202      	bcs.n	8009510 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800950a:	4a08      	ldr	r2, [pc, #32]	; (800952c <prvAddCurrentTaskToDelayedList+0xa4>)
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	6013      	str	r3, [r2, #0]
}
 8009510:	bf00      	nop
 8009512:	3710      	adds	r7, #16
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	20001fd4 	.word	0x20001fd4
 800951c:	20001afc 	.word	0x20001afc
 8009520:	20001fbc 	.word	0x20001fbc
 8009524:	20001f8c 	.word	0x20001f8c
 8009528:	20001f88 	.word	0x20001f88
 800952c:	20001ff0 	.word	0x20001ff0

08009530 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b08a      	sub	sp, #40	; 0x28
 8009534:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009536:	2300      	movs	r3, #0
 8009538:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800953a:	f000 fb07 	bl	8009b4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800953e:	4b1c      	ldr	r3, [pc, #112]	; (80095b0 <xTimerCreateTimerTask+0x80>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d021      	beq.n	800958a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009546:	2300      	movs	r3, #0
 8009548:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800954a:	2300      	movs	r3, #0
 800954c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800954e:	1d3a      	adds	r2, r7, #4
 8009550:	f107 0108 	add.w	r1, r7, #8
 8009554:	f107 030c 	add.w	r3, r7, #12
 8009558:	4618      	mov	r0, r3
 800955a:	f7fe f879 	bl	8007650 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800955e:	6879      	ldr	r1, [r7, #4]
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	68fa      	ldr	r2, [r7, #12]
 8009564:	9202      	str	r2, [sp, #8]
 8009566:	9301      	str	r3, [sp, #4]
 8009568:	2302      	movs	r3, #2
 800956a:	9300      	str	r3, [sp, #0]
 800956c:	2300      	movs	r3, #0
 800956e:	460a      	mov	r2, r1
 8009570:	4910      	ldr	r1, [pc, #64]	; (80095b4 <xTimerCreateTimerTask+0x84>)
 8009572:	4811      	ldr	r0, [pc, #68]	; (80095b8 <xTimerCreateTimerTask+0x88>)
 8009574:	f7fe ffb6 	bl	80084e4 <xTaskCreateStatic>
 8009578:	4603      	mov	r3, r0
 800957a:	4a10      	ldr	r2, [pc, #64]	; (80095bc <xTimerCreateTimerTask+0x8c>)
 800957c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800957e:	4b0f      	ldr	r3, [pc, #60]	; (80095bc <xTimerCreateTimerTask+0x8c>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d001      	beq.n	800958a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009586:	2301      	movs	r3, #1
 8009588:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d10a      	bne.n	80095a6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009594:	f383 8811 	msr	BASEPRI, r3
 8009598:	f3bf 8f6f 	isb	sy
 800959c:	f3bf 8f4f 	dsb	sy
 80095a0:	613b      	str	r3, [r7, #16]
}
 80095a2:	bf00      	nop
 80095a4:	e7fe      	b.n	80095a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80095a6:	697b      	ldr	r3, [r7, #20]
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3718      	adds	r7, #24
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}
 80095b0:	2000202c 	.word	0x2000202c
 80095b4:	0800b268 	.word	0x0800b268
 80095b8:	080096f5 	.word	0x080096f5
 80095bc:	20002030 	.word	0x20002030

080095c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b08a      	sub	sp, #40	; 0x28
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	607a      	str	r2, [r7, #4]
 80095cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80095ce:	2300      	movs	r3, #0
 80095d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d10a      	bne.n	80095ee <xTimerGenericCommand+0x2e>
	__asm volatile
 80095d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095dc:	f383 8811 	msr	BASEPRI, r3
 80095e0:	f3bf 8f6f 	isb	sy
 80095e4:	f3bf 8f4f 	dsb	sy
 80095e8:	623b      	str	r3, [r7, #32]
}
 80095ea:	bf00      	nop
 80095ec:	e7fe      	b.n	80095ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80095ee:	4b1a      	ldr	r3, [pc, #104]	; (8009658 <xTimerGenericCommand+0x98>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d02a      	beq.n	800964c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	2b05      	cmp	r3, #5
 8009606:	dc18      	bgt.n	800963a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009608:	f7ff fdb4 	bl	8009174 <xTaskGetSchedulerState>
 800960c:	4603      	mov	r3, r0
 800960e:	2b02      	cmp	r3, #2
 8009610:	d109      	bne.n	8009626 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009612:	4b11      	ldr	r3, [pc, #68]	; (8009658 <xTimerGenericCommand+0x98>)
 8009614:	6818      	ldr	r0, [r3, #0]
 8009616:	f107 0110 	add.w	r1, r7, #16
 800961a:	2300      	movs	r3, #0
 800961c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800961e:	f7fe fa55 	bl	8007acc <xQueueGenericSend>
 8009622:	6278      	str	r0, [r7, #36]	; 0x24
 8009624:	e012      	b.n	800964c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009626:	4b0c      	ldr	r3, [pc, #48]	; (8009658 <xTimerGenericCommand+0x98>)
 8009628:	6818      	ldr	r0, [r3, #0]
 800962a:	f107 0110 	add.w	r1, r7, #16
 800962e:	2300      	movs	r3, #0
 8009630:	2200      	movs	r2, #0
 8009632:	f7fe fa4b 	bl	8007acc <xQueueGenericSend>
 8009636:	6278      	str	r0, [r7, #36]	; 0x24
 8009638:	e008      	b.n	800964c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800963a:	4b07      	ldr	r3, [pc, #28]	; (8009658 <xTimerGenericCommand+0x98>)
 800963c:	6818      	ldr	r0, [r3, #0]
 800963e:	f107 0110 	add.w	r1, r7, #16
 8009642:	2300      	movs	r3, #0
 8009644:	683a      	ldr	r2, [r7, #0]
 8009646:	f7fe fb3f 	bl	8007cc8 <xQueueGenericSendFromISR>
 800964a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800964c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800964e:	4618      	mov	r0, r3
 8009650:	3728      	adds	r7, #40	; 0x28
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	2000202c 	.word	0x2000202c

0800965c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b088      	sub	sp, #32
 8009660:	af02      	add	r7, sp, #8
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009666:	4b22      	ldr	r3, [pc, #136]	; (80096f0 <prvProcessExpiredTimer+0x94>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	68db      	ldr	r3, [r3, #12]
 800966e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	3304      	adds	r3, #4
 8009674:	4618      	mov	r0, r3
 8009676:	f7fe f88f 	bl	8007798 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009680:	f003 0304 	and.w	r3, r3, #4
 8009684:	2b00      	cmp	r3, #0
 8009686:	d022      	beq.n	80096ce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	699a      	ldr	r2, [r3, #24]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	18d1      	adds	r1, r2, r3
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	683a      	ldr	r2, [r7, #0]
 8009694:	6978      	ldr	r0, [r7, #20]
 8009696:	f000 f8d1 	bl	800983c <prvInsertTimerInActiveList>
 800969a:	4603      	mov	r3, r0
 800969c:	2b00      	cmp	r3, #0
 800969e:	d01f      	beq.n	80096e0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80096a0:	2300      	movs	r3, #0
 80096a2:	9300      	str	r3, [sp, #0]
 80096a4:	2300      	movs	r3, #0
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	2100      	movs	r1, #0
 80096aa:	6978      	ldr	r0, [r7, #20]
 80096ac:	f7ff ff88 	bl	80095c0 <xTimerGenericCommand>
 80096b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d113      	bne.n	80096e0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80096b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096bc:	f383 8811 	msr	BASEPRI, r3
 80096c0:	f3bf 8f6f 	isb	sy
 80096c4:	f3bf 8f4f 	dsb	sy
 80096c8:	60fb      	str	r3, [r7, #12]
}
 80096ca:	bf00      	nop
 80096cc:	e7fe      	b.n	80096cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096d4:	f023 0301 	bic.w	r3, r3, #1
 80096d8:	b2da      	uxtb	r2, r3
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	6a1b      	ldr	r3, [r3, #32]
 80096e4:	6978      	ldr	r0, [r7, #20]
 80096e6:	4798      	blx	r3
}
 80096e8:	bf00      	nop
 80096ea:	3718      	adds	r7, #24
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}
 80096f0:	20002024 	.word	0x20002024

080096f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80096fc:	f107 0308 	add.w	r3, r7, #8
 8009700:	4618      	mov	r0, r3
 8009702:	f000 f857 	bl	80097b4 <prvGetNextExpireTime>
 8009706:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	4619      	mov	r1, r3
 800970c:	68f8      	ldr	r0, [r7, #12]
 800970e:	f000 f803 	bl	8009718 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009712:	f000 f8d5 	bl	80098c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009716:	e7f1      	b.n	80096fc <prvTimerTask+0x8>

08009718 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009722:	f7ff f93b 	bl	800899c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009726:	f107 0308 	add.w	r3, r7, #8
 800972a:	4618      	mov	r0, r3
 800972c:	f000 f866 	bl	80097fc <prvSampleTimeNow>
 8009730:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d130      	bne.n	800979a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d10a      	bne.n	8009754 <prvProcessTimerOrBlockTask+0x3c>
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	429a      	cmp	r2, r3
 8009744:	d806      	bhi.n	8009754 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009746:	f7ff f937 	bl	80089b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800974a:	68f9      	ldr	r1, [r7, #12]
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f7ff ff85 	bl	800965c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009752:	e024      	b.n	800979e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d008      	beq.n	800976c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800975a:	4b13      	ldr	r3, [pc, #76]	; (80097a8 <prvProcessTimerOrBlockTask+0x90>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d101      	bne.n	8009768 <prvProcessTimerOrBlockTask+0x50>
 8009764:	2301      	movs	r3, #1
 8009766:	e000      	b.n	800976a <prvProcessTimerOrBlockTask+0x52>
 8009768:	2300      	movs	r3, #0
 800976a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800976c:	4b0f      	ldr	r3, [pc, #60]	; (80097ac <prvProcessTimerOrBlockTask+0x94>)
 800976e:	6818      	ldr	r0, [r3, #0]
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	1ad3      	subs	r3, r2, r3
 8009776:	683a      	ldr	r2, [r7, #0]
 8009778:	4619      	mov	r1, r3
 800977a:	f7fe fe7f 	bl	800847c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800977e:	f7ff f91b 	bl	80089b8 <xTaskResumeAll>
 8009782:	4603      	mov	r3, r0
 8009784:	2b00      	cmp	r3, #0
 8009786:	d10a      	bne.n	800979e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009788:	4b09      	ldr	r3, [pc, #36]	; (80097b0 <prvProcessTimerOrBlockTask+0x98>)
 800978a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800978e:	601a      	str	r2, [r3, #0]
 8009790:	f3bf 8f4f 	dsb	sy
 8009794:	f3bf 8f6f 	isb	sy
}
 8009798:	e001      	b.n	800979e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800979a:	f7ff f90d 	bl	80089b8 <xTaskResumeAll>
}
 800979e:	bf00      	nop
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	20002028 	.word	0x20002028
 80097ac:	2000202c 	.word	0x2000202c
 80097b0:	e000ed04 	.word	0xe000ed04

080097b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80097b4:	b480      	push	{r7}
 80097b6:	b085      	sub	sp, #20
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80097bc:	4b0e      	ldr	r3, [pc, #56]	; (80097f8 <prvGetNextExpireTime+0x44>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d101      	bne.n	80097ca <prvGetNextExpireTime+0x16>
 80097c6:	2201      	movs	r2, #1
 80097c8:	e000      	b.n	80097cc <prvGetNextExpireTime+0x18>
 80097ca:	2200      	movs	r2, #0
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d105      	bne.n	80097e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80097d8:	4b07      	ldr	r3, [pc, #28]	; (80097f8 <prvGetNextExpireTime+0x44>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	68db      	ldr	r3, [r3, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	60fb      	str	r3, [r7, #12]
 80097e2:	e001      	b.n	80097e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80097e4:	2300      	movs	r3, #0
 80097e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80097e8:	68fb      	ldr	r3, [r7, #12]
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3714      	adds	r7, #20
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr
 80097f6:	bf00      	nop
 80097f8:	20002024 	.word	0x20002024

080097fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009804:	f7ff f976 	bl	8008af4 <xTaskGetTickCount>
 8009808:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800980a:	4b0b      	ldr	r3, [pc, #44]	; (8009838 <prvSampleTimeNow+0x3c>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	68fa      	ldr	r2, [r7, #12]
 8009810:	429a      	cmp	r2, r3
 8009812:	d205      	bcs.n	8009820 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009814:	f000 f936 	bl	8009a84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	601a      	str	r2, [r3, #0]
 800981e:	e002      	b.n	8009826 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009826:	4a04      	ldr	r2, [pc, #16]	; (8009838 <prvSampleTimeNow+0x3c>)
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800982c:	68fb      	ldr	r3, [r7, #12]
}
 800982e:	4618      	mov	r0, r3
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	20002034 	.word	0x20002034

0800983c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b086      	sub	sp, #24
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	607a      	str	r2, [r7, #4]
 8009848:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800984a:	2300      	movs	r3, #0
 800984c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	68ba      	ldr	r2, [r7, #8]
 8009852:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	68fa      	ldr	r2, [r7, #12]
 8009858:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800985a:	68ba      	ldr	r2, [r7, #8]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	429a      	cmp	r2, r3
 8009860:	d812      	bhi.n	8009888 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	1ad2      	subs	r2, r2, r3
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	699b      	ldr	r3, [r3, #24]
 800986c:	429a      	cmp	r2, r3
 800986e:	d302      	bcc.n	8009876 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009870:	2301      	movs	r3, #1
 8009872:	617b      	str	r3, [r7, #20]
 8009874:	e01b      	b.n	80098ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009876:	4b10      	ldr	r3, [pc, #64]	; (80098b8 <prvInsertTimerInActiveList+0x7c>)
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	3304      	adds	r3, #4
 800987e:	4619      	mov	r1, r3
 8009880:	4610      	mov	r0, r2
 8009882:	f7fd ff50 	bl	8007726 <vListInsert>
 8009886:	e012      	b.n	80098ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	429a      	cmp	r2, r3
 800988e:	d206      	bcs.n	800989e <prvInsertTimerInActiveList+0x62>
 8009890:	68ba      	ldr	r2, [r7, #8]
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	429a      	cmp	r2, r3
 8009896:	d302      	bcc.n	800989e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009898:	2301      	movs	r3, #1
 800989a:	617b      	str	r3, [r7, #20]
 800989c:	e007      	b.n	80098ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800989e:	4b07      	ldr	r3, [pc, #28]	; (80098bc <prvInsertTimerInActiveList+0x80>)
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	3304      	adds	r3, #4
 80098a6:	4619      	mov	r1, r3
 80098a8:	4610      	mov	r0, r2
 80098aa:	f7fd ff3c 	bl	8007726 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80098ae:	697b      	ldr	r3, [r7, #20]
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3718      	adds	r7, #24
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}
 80098b8:	20002028 	.word	0x20002028
 80098bc:	20002024 	.word	0x20002024

080098c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b08e      	sub	sp, #56	; 0x38
 80098c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80098c6:	e0ca      	b.n	8009a5e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	da18      	bge.n	8009900 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80098ce:	1d3b      	adds	r3, r7, #4
 80098d0:	3304      	adds	r3, #4
 80098d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80098d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d10a      	bne.n	80098f0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80098da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098de:	f383 8811 	msr	BASEPRI, r3
 80098e2:	f3bf 8f6f 	isb	sy
 80098e6:	f3bf 8f4f 	dsb	sy
 80098ea:	61fb      	str	r3, [r7, #28]
}
 80098ec:	bf00      	nop
 80098ee:	e7fe      	b.n	80098ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80098f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098f6:	6850      	ldr	r0, [r2, #4]
 80098f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098fa:	6892      	ldr	r2, [r2, #8]
 80098fc:	4611      	mov	r1, r2
 80098fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2b00      	cmp	r3, #0
 8009904:	f2c0 80aa 	blt.w	8009a5c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800990c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800990e:	695b      	ldr	r3, [r3, #20]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d004      	beq.n	800991e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009916:	3304      	adds	r3, #4
 8009918:	4618      	mov	r0, r3
 800991a:	f7fd ff3d 	bl	8007798 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800991e:	463b      	mov	r3, r7
 8009920:	4618      	mov	r0, r3
 8009922:	f7ff ff6b 	bl	80097fc <prvSampleTimeNow>
 8009926:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2b09      	cmp	r3, #9
 800992c:	f200 8097 	bhi.w	8009a5e <prvProcessReceivedCommands+0x19e>
 8009930:	a201      	add	r2, pc, #4	; (adr r2, 8009938 <prvProcessReceivedCommands+0x78>)
 8009932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009936:	bf00      	nop
 8009938:	08009961 	.word	0x08009961
 800993c:	08009961 	.word	0x08009961
 8009940:	08009961 	.word	0x08009961
 8009944:	080099d5 	.word	0x080099d5
 8009948:	080099e9 	.word	0x080099e9
 800994c:	08009a33 	.word	0x08009a33
 8009950:	08009961 	.word	0x08009961
 8009954:	08009961 	.word	0x08009961
 8009958:	080099d5 	.word	0x080099d5
 800995c:	080099e9 	.word	0x080099e9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009962:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009966:	f043 0301 	orr.w	r3, r3, #1
 800996a:	b2da      	uxtb	r2, r3
 800996c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800996e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009972:	68ba      	ldr	r2, [r7, #8]
 8009974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009976:	699b      	ldr	r3, [r3, #24]
 8009978:	18d1      	adds	r1, r2, r3
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800997e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009980:	f7ff ff5c 	bl	800983c <prvInsertTimerInActiveList>
 8009984:	4603      	mov	r3, r0
 8009986:	2b00      	cmp	r3, #0
 8009988:	d069      	beq.n	8009a5e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800998a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800998c:	6a1b      	ldr	r3, [r3, #32]
 800998e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009990:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009994:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009998:	f003 0304 	and.w	r3, r3, #4
 800999c:	2b00      	cmp	r3, #0
 800999e:	d05e      	beq.n	8009a5e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80099a0:	68ba      	ldr	r2, [r7, #8]
 80099a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a4:	699b      	ldr	r3, [r3, #24]
 80099a6:	441a      	add	r2, r3
 80099a8:	2300      	movs	r3, #0
 80099aa:	9300      	str	r3, [sp, #0]
 80099ac:	2300      	movs	r3, #0
 80099ae:	2100      	movs	r1, #0
 80099b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099b2:	f7ff fe05 	bl	80095c0 <xTimerGenericCommand>
 80099b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80099b8:	6a3b      	ldr	r3, [r7, #32]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d14f      	bne.n	8009a5e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80099be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c2:	f383 8811 	msr	BASEPRI, r3
 80099c6:	f3bf 8f6f 	isb	sy
 80099ca:	f3bf 8f4f 	dsb	sy
 80099ce:	61bb      	str	r3, [r7, #24]
}
 80099d0:	bf00      	nop
 80099d2:	e7fe      	b.n	80099d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80099d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099da:	f023 0301 	bic.w	r3, r3, #1
 80099de:	b2da      	uxtb	r2, r3
 80099e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80099e6:	e03a      	b.n	8009a5e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80099e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099ee:	f043 0301 	orr.w	r3, r3, #1
 80099f2:	b2da      	uxtb	r2, r3
 80099f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80099fa:	68ba      	ldr	r2, [r7, #8]
 80099fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a02:	699b      	ldr	r3, [r3, #24]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d10a      	bne.n	8009a1e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0c:	f383 8811 	msr	BASEPRI, r3
 8009a10:	f3bf 8f6f 	isb	sy
 8009a14:	f3bf 8f4f 	dsb	sy
 8009a18:	617b      	str	r3, [r7, #20]
}
 8009a1a:	bf00      	nop
 8009a1c:	e7fe      	b.n	8009a1c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a20:	699a      	ldr	r2, [r3, #24]
 8009a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a24:	18d1      	adds	r1, r2, r3
 8009a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a2c:	f7ff ff06 	bl	800983c <prvInsertTimerInActiveList>
					break;
 8009a30:	e015      	b.n	8009a5e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a38:	f003 0302 	and.w	r3, r3, #2
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d103      	bne.n	8009a48 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009a40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a42:	f000 fbdd 	bl	800a200 <vPortFree>
 8009a46:	e00a      	b.n	8009a5e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a4e:	f023 0301 	bic.w	r3, r3, #1
 8009a52:	b2da      	uxtb	r2, r3
 8009a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009a5a:	e000      	b.n	8009a5e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009a5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a5e:	4b08      	ldr	r3, [pc, #32]	; (8009a80 <prvProcessReceivedCommands+0x1c0>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	1d39      	adds	r1, r7, #4
 8009a64:	2200      	movs	r2, #0
 8009a66:	4618      	mov	r0, r3
 8009a68:	f7fe f9ca 	bl	8007e00 <xQueueReceive>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	f47f af2a 	bne.w	80098c8 <prvProcessReceivedCommands+0x8>
	}
}
 8009a74:	bf00      	nop
 8009a76:	bf00      	nop
 8009a78:	3730      	adds	r7, #48	; 0x30
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	2000202c 	.word	0x2000202c

08009a84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b088      	sub	sp, #32
 8009a88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a8a:	e048      	b.n	8009b1e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a8c:	4b2d      	ldr	r3, [pc, #180]	; (8009b44 <prvSwitchTimerLists+0xc0>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	68db      	ldr	r3, [r3, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a96:	4b2b      	ldr	r3, [pc, #172]	; (8009b44 <prvSwitchTimerLists+0xc0>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	68db      	ldr	r3, [r3, #12]
 8009a9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	3304      	adds	r3, #4
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f7fd fe77 	bl	8007798 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	6a1b      	ldr	r3, [r3, #32]
 8009aae:	68f8      	ldr	r0, [r7, #12]
 8009ab0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ab8:	f003 0304 	and.w	r3, r3, #4
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d02e      	beq.n	8009b1e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	699b      	ldr	r3, [r3, #24]
 8009ac4:	693a      	ldr	r2, [r7, #16]
 8009ac6:	4413      	add	r3, r2
 8009ac8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009aca:	68ba      	ldr	r2, [r7, #8]
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d90e      	bls.n	8009af0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	68ba      	ldr	r2, [r7, #8]
 8009ad6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	68fa      	ldr	r2, [r7, #12]
 8009adc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ade:	4b19      	ldr	r3, [pc, #100]	; (8009b44 <prvSwitchTimerLists+0xc0>)
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	3304      	adds	r3, #4
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	4610      	mov	r0, r2
 8009aea:	f7fd fe1c 	bl	8007726 <vListInsert>
 8009aee:	e016      	b.n	8009b1e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009af0:	2300      	movs	r3, #0
 8009af2:	9300      	str	r3, [sp, #0]
 8009af4:	2300      	movs	r3, #0
 8009af6:	693a      	ldr	r2, [r7, #16]
 8009af8:	2100      	movs	r1, #0
 8009afa:	68f8      	ldr	r0, [r7, #12]
 8009afc:	f7ff fd60 	bl	80095c0 <xTimerGenericCommand>
 8009b00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d10a      	bne.n	8009b1e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b0c:	f383 8811 	msr	BASEPRI, r3
 8009b10:	f3bf 8f6f 	isb	sy
 8009b14:	f3bf 8f4f 	dsb	sy
 8009b18:	603b      	str	r3, [r7, #0]
}
 8009b1a:	bf00      	nop
 8009b1c:	e7fe      	b.n	8009b1c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b1e:	4b09      	ldr	r3, [pc, #36]	; (8009b44 <prvSwitchTimerLists+0xc0>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d1b1      	bne.n	8009a8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009b28:	4b06      	ldr	r3, [pc, #24]	; (8009b44 <prvSwitchTimerLists+0xc0>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009b2e:	4b06      	ldr	r3, [pc, #24]	; (8009b48 <prvSwitchTimerLists+0xc4>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a04      	ldr	r2, [pc, #16]	; (8009b44 <prvSwitchTimerLists+0xc0>)
 8009b34:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009b36:	4a04      	ldr	r2, [pc, #16]	; (8009b48 <prvSwitchTimerLists+0xc4>)
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	6013      	str	r3, [r2, #0]
}
 8009b3c:	bf00      	nop
 8009b3e:	3718      	adds	r7, #24
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}
 8009b44:	20002024 	.word	0x20002024
 8009b48:	20002028 	.word	0x20002028

08009b4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009b52:	f000 f967 	bl	8009e24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009b56:	4b15      	ldr	r3, [pc, #84]	; (8009bac <prvCheckForValidListAndQueue+0x60>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d120      	bne.n	8009ba0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009b5e:	4814      	ldr	r0, [pc, #80]	; (8009bb0 <prvCheckForValidListAndQueue+0x64>)
 8009b60:	f7fd fd90 	bl	8007684 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009b64:	4813      	ldr	r0, [pc, #76]	; (8009bb4 <prvCheckForValidListAndQueue+0x68>)
 8009b66:	f7fd fd8d 	bl	8007684 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009b6a:	4b13      	ldr	r3, [pc, #76]	; (8009bb8 <prvCheckForValidListAndQueue+0x6c>)
 8009b6c:	4a10      	ldr	r2, [pc, #64]	; (8009bb0 <prvCheckForValidListAndQueue+0x64>)
 8009b6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009b70:	4b12      	ldr	r3, [pc, #72]	; (8009bbc <prvCheckForValidListAndQueue+0x70>)
 8009b72:	4a10      	ldr	r2, [pc, #64]	; (8009bb4 <prvCheckForValidListAndQueue+0x68>)
 8009b74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009b76:	2300      	movs	r3, #0
 8009b78:	9300      	str	r3, [sp, #0]
 8009b7a:	4b11      	ldr	r3, [pc, #68]	; (8009bc0 <prvCheckForValidListAndQueue+0x74>)
 8009b7c:	4a11      	ldr	r2, [pc, #68]	; (8009bc4 <prvCheckForValidListAndQueue+0x78>)
 8009b7e:	2110      	movs	r1, #16
 8009b80:	200a      	movs	r0, #10
 8009b82:	f7fd fe9b 	bl	80078bc <xQueueGenericCreateStatic>
 8009b86:	4603      	mov	r3, r0
 8009b88:	4a08      	ldr	r2, [pc, #32]	; (8009bac <prvCheckForValidListAndQueue+0x60>)
 8009b8a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009b8c:	4b07      	ldr	r3, [pc, #28]	; (8009bac <prvCheckForValidListAndQueue+0x60>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d005      	beq.n	8009ba0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009b94:	4b05      	ldr	r3, [pc, #20]	; (8009bac <prvCheckForValidListAndQueue+0x60>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	490b      	ldr	r1, [pc, #44]	; (8009bc8 <prvCheckForValidListAndQueue+0x7c>)
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7fe fc44 	bl	8008428 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ba0:	f000 f970 	bl	8009e84 <vPortExitCritical>
}
 8009ba4:	bf00      	nop
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	2000202c 	.word	0x2000202c
 8009bb0:	20001ffc 	.word	0x20001ffc
 8009bb4:	20002010 	.word	0x20002010
 8009bb8:	20002024 	.word	0x20002024
 8009bbc:	20002028 	.word	0x20002028
 8009bc0:	200020d8 	.word	0x200020d8
 8009bc4:	20002038 	.word	0x20002038
 8009bc8:	0800b270 	.word	0x0800b270

08009bcc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b085      	sub	sp, #20
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	60f8      	str	r0, [r7, #12]
 8009bd4:	60b9      	str	r1, [r7, #8]
 8009bd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	3b04      	subs	r3, #4
 8009bdc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009be4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	3b04      	subs	r3, #4
 8009bea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	f023 0201 	bic.w	r2, r3, #1
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	3b04      	subs	r3, #4
 8009bfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009bfc:	4a0c      	ldr	r2, [pc, #48]	; (8009c30 <pxPortInitialiseStack+0x64>)
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	3b14      	subs	r3, #20
 8009c06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	3b04      	subs	r3, #4
 8009c12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f06f 0202 	mvn.w	r2, #2
 8009c1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	3b20      	subs	r3, #32
 8009c20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009c22:	68fb      	ldr	r3, [r7, #12]
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3714      	adds	r7, #20
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr
 8009c30:	08009c35 	.word	0x08009c35

08009c34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009c34:	b480      	push	{r7}
 8009c36:	b085      	sub	sp, #20
 8009c38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009c3e:	4b12      	ldr	r3, [pc, #72]	; (8009c88 <prvTaskExitError+0x54>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c46:	d00a      	beq.n	8009c5e <prvTaskExitError+0x2a>
	__asm volatile
 8009c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c4c:	f383 8811 	msr	BASEPRI, r3
 8009c50:	f3bf 8f6f 	isb	sy
 8009c54:	f3bf 8f4f 	dsb	sy
 8009c58:	60fb      	str	r3, [r7, #12]
}
 8009c5a:	bf00      	nop
 8009c5c:	e7fe      	b.n	8009c5c <prvTaskExitError+0x28>
	__asm volatile
 8009c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c62:	f383 8811 	msr	BASEPRI, r3
 8009c66:	f3bf 8f6f 	isb	sy
 8009c6a:	f3bf 8f4f 	dsb	sy
 8009c6e:	60bb      	str	r3, [r7, #8]
}
 8009c70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009c72:	bf00      	nop
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d0fc      	beq.n	8009c74 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009c7a:	bf00      	nop
 8009c7c:	bf00      	nop
 8009c7e:	3714      	adds	r7, #20
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr
 8009c88:	200002f8 	.word	0x200002f8
 8009c8c:	00000000 	.word	0x00000000

08009c90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009c90:	4b07      	ldr	r3, [pc, #28]	; (8009cb0 <pxCurrentTCBConst2>)
 8009c92:	6819      	ldr	r1, [r3, #0]
 8009c94:	6808      	ldr	r0, [r1, #0]
 8009c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c9a:	f380 8809 	msr	PSP, r0
 8009c9e:	f3bf 8f6f 	isb	sy
 8009ca2:	f04f 0000 	mov.w	r0, #0
 8009ca6:	f380 8811 	msr	BASEPRI, r0
 8009caa:	4770      	bx	lr
 8009cac:	f3af 8000 	nop.w

08009cb0 <pxCurrentTCBConst2>:
 8009cb0:	20001afc 	.word	0x20001afc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009cb4:	bf00      	nop
 8009cb6:	bf00      	nop

08009cb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009cb8:	4808      	ldr	r0, [pc, #32]	; (8009cdc <prvPortStartFirstTask+0x24>)
 8009cba:	6800      	ldr	r0, [r0, #0]
 8009cbc:	6800      	ldr	r0, [r0, #0]
 8009cbe:	f380 8808 	msr	MSP, r0
 8009cc2:	f04f 0000 	mov.w	r0, #0
 8009cc6:	f380 8814 	msr	CONTROL, r0
 8009cca:	b662      	cpsie	i
 8009ccc:	b661      	cpsie	f
 8009cce:	f3bf 8f4f 	dsb	sy
 8009cd2:	f3bf 8f6f 	isb	sy
 8009cd6:	df00      	svc	0
 8009cd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009cda:	bf00      	nop
 8009cdc:	e000ed08 	.word	0xe000ed08

08009ce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b086      	sub	sp, #24
 8009ce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009ce6:	4b46      	ldr	r3, [pc, #280]	; (8009e00 <xPortStartScheduler+0x120>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a46      	ldr	r2, [pc, #280]	; (8009e04 <xPortStartScheduler+0x124>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d10a      	bne.n	8009d06 <xPortStartScheduler+0x26>
	__asm volatile
 8009cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf4:	f383 8811 	msr	BASEPRI, r3
 8009cf8:	f3bf 8f6f 	isb	sy
 8009cfc:	f3bf 8f4f 	dsb	sy
 8009d00:	613b      	str	r3, [r7, #16]
}
 8009d02:	bf00      	nop
 8009d04:	e7fe      	b.n	8009d04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009d06:	4b3e      	ldr	r3, [pc, #248]	; (8009e00 <xPortStartScheduler+0x120>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a3f      	ldr	r2, [pc, #252]	; (8009e08 <xPortStartScheduler+0x128>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d10a      	bne.n	8009d26 <xPortStartScheduler+0x46>
	__asm volatile
 8009d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d14:	f383 8811 	msr	BASEPRI, r3
 8009d18:	f3bf 8f6f 	isb	sy
 8009d1c:	f3bf 8f4f 	dsb	sy
 8009d20:	60fb      	str	r3, [r7, #12]
}
 8009d22:	bf00      	nop
 8009d24:	e7fe      	b.n	8009d24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009d26:	4b39      	ldr	r3, [pc, #228]	; (8009e0c <xPortStartScheduler+0x12c>)
 8009d28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	b2db      	uxtb	r3, r3
 8009d30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	22ff      	movs	r2, #255	; 0xff
 8009d36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009d40:	78fb      	ldrb	r3, [r7, #3]
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009d48:	b2da      	uxtb	r2, r3
 8009d4a:	4b31      	ldr	r3, [pc, #196]	; (8009e10 <xPortStartScheduler+0x130>)
 8009d4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009d4e:	4b31      	ldr	r3, [pc, #196]	; (8009e14 <xPortStartScheduler+0x134>)
 8009d50:	2207      	movs	r2, #7
 8009d52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d54:	e009      	b.n	8009d6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009d56:	4b2f      	ldr	r3, [pc, #188]	; (8009e14 <xPortStartScheduler+0x134>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	3b01      	subs	r3, #1
 8009d5c:	4a2d      	ldr	r2, [pc, #180]	; (8009e14 <xPortStartScheduler+0x134>)
 8009d5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009d60:	78fb      	ldrb	r3, [r7, #3]
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	005b      	lsls	r3, r3, #1
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d6a:	78fb      	ldrb	r3, [r7, #3]
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d72:	2b80      	cmp	r3, #128	; 0x80
 8009d74:	d0ef      	beq.n	8009d56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009d76:	4b27      	ldr	r3, [pc, #156]	; (8009e14 <xPortStartScheduler+0x134>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f1c3 0307 	rsb	r3, r3, #7
 8009d7e:	2b04      	cmp	r3, #4
 8009d80:	d00a      	beq.n	8009d98 <xPortStartScheduler+0xb8>
	__asm volatile
 8009d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d86:	f383 8811 	msr	BASEPRI, r3
 8009d8a:	f3bf 8f6f 	isb	sy
 8009d8e:	f3bf 8f4f 	dsb	sy
 8009d92:	60bb      	str	r3, [r7, #8]
}
 8009d94:	bf00      	nop
 8009d96:	e7fe      	b.n	8009d96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009d98:	4b1e      	ldr	r3, [pc, #120]	; (8009e14 <xPortStartScheduler+0x134>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	021b      	lsls	r3, r3, #8
 8009d9e:	4a1d      	ldr	r2, [pc, #116]	; (8009e14 <xPortStartScheduler+0x134>)
 8009da0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009da2:	4b1c      	ldr	r3, [pc, #112]	; (8009e14 <xPortStartScheduler+0x134>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009daa:	4a1a      	ldr	r2, [pc, #104]	; (8009e14 <xPortStartScheduler+0x134>)
 8009dac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	b2da      	uxtb	r2, r3
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009db6:	4b18      	ldr	r3, [pc, #96]	; (8009e18 <xPortStartScheduler+0x138>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4a17      	ldr	r2, [pc, #92]	; (8009e18 <xPortStartScheduler+0x138>)
 8009dbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009dc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009dc2:	4b15      	ldr	r3, [pc, #84]	; (8009e18 <xPortStartScheduler+0x138>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4a14      	ldr	r2, [pc, #80]	; (8009e18 <xPortStartScheduler+0x138>)
 8009dc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009dcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009dce:	f000 f8dd 	bl	8009f8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009dd2:	4b12      	ldr	r3, [pc, #72]	; (8009e1c <xPortStartScheduler+0x13c>)
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009dd8:	f000 f8fc 	bl	8009fd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009ddc:	4b10      	ldr	r3, [pc, #64]	; (8009e20 <xPortStartScheduler+0x140>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a0f      	ldr	r2, [pc, #60]	; (8009e20 <xPortStartScheduler+0x140>)
 8009de2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009de6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009de8:	f7ff ff66 	bl	8009cb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009dec:	f7fe ff4c 	bl	8008c88 <vTaskSwitchContext>
	prvTaskExitError();
 8009df0:	f7ff ff20 	bl	8009c34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009df4:	2300      	movs	r3, #0
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3718      	adds	r7, #24
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
 8009dfe:	bf00      	nop
 8009e00:	e000ed00 	.word	0xe000ed00
 8009e04:	410fc271 	.word	0x410fc271
 8009e08:	410fc270 	.word	0x410fc270
 8009e0c:	e000e400 	.word	0xe000e400
 8009e10:	20002128 	.word	0x20002128
 8009e14:	2000212c 	.word	0x2000212c
 8009e18:	e000ed20 	.word	0xe000ed20
 8009e1c:	200002f8 	.word	0x200002f8
 8009e20:	e000ef34 	.word	0xe000ef34

08009e24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009e24:	b480      	push	{r7}
 8009e26:	b083      	sub	sp, #12
 8009e28:	af00      	add	r7, sp, #0
	__asm volatile
 8009e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2e:	f383 8811 	msr	BASEPRI, r3
 8009e32:	f3bf 8f6f 	isb	sy
 8009e36:	f3bf 8f4f 	dsb	sy
 8009e3a:	607b      	str	r3, [r7, #4]
}
 8009e3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009e3e:	4b0f      	ldr	r3, [pc, #60]	; (8009e7c <vPortEnterCritical+0x58>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	3301      	adds	r3, #1
 8009e44:	4a0d      	ldr	r2, [pc, #52]	; (8009e7c <vPortEnterCritical+0x58>)
 8009e46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009e48:	4b0c      	ldr	r3, [pc, #48]	; (8009e7c <vPortEnterCritical+0x58>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d10f      	bne.n	8009e70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009e50:	4b0b      	ldr	r3, [pc, #44]	; (8009e80 <vPortEnterCritical+0x5c>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d00a      	beq.n	8009e70 <vPortEnterCritical+0x4c>
	__asm volatile
 8009e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e5e:	f383 8811 	msr	BASEPRI, r3
 8009e62:	f3bf 8f6f 	isb	sy
 8009e66:	f3bf 8f4f 	dsb	sy
 8009e6a:	603b      	str	r3, [r7, #0]
}
 8009e6c:	bf00      	nop
 8009e6e:	e7fe      	b.n	8009e6e <vPortEnterCritical+0x4a>
	}
}
 8009e70:	bf00      	nop
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr
 8009e7c:	200002f8 	.word	0x200002f8
 8009e80:	e000ed04 	.word	0xe000ed04

08009e84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009e8a:	4b12      	ldr	r3, [pc, #72]	; (8009ed4 <vPortExitCritical+0x50>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d10a      	bne.n	8009ea8 <vPortExitCritical+0x24>
	__asm volatile
 8009e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e96:	f383 8811 	msr	BASEPRI, r3
 8009e9a:	f3bf 8f6f 	isb	sy
 8009e9e:	f3bf 8f4f 	dsb	sy
 8009ea2:	607b      	str	r3, [r7, #4]
}
 8009ea4:	bf00      	nop
 8009ea6:	e7fe      	b.n	8009ea6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009ea8:	4b0a      	ldr	r3, [pc, #40]	; (8009ed4 <vPortExitCritical+0x50>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	3b01      	subs	r3, #1
 8009eae:	4a09      	ldr	r2, [pc, #36]	; (8009ed4 <vPortExitCritical+0x50>)
 8009eb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009eb2:	4b08      	ldr	r3, [pc, #32]	; (8009ed4 <vPortExitCritical+0x50>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d105      	bne.n	8009ec6 <vPortExitCritical+0x42>
 8009eba:	2300      	movs	r3, #0
 8009ebc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	f383 8811 	msr	BASEPRI, r3
}
 8009ec4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009ec6:	bf00      	nop
 8009ec8:	370c      	adds	r7, #12
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop
 8009ed4:	200002f8 	.word	0x200002f8
	...

08009ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ee0:	f3ef 8009 	mrs	r0, PSP
 8009ee4:	f3bf 8f6f 	isb	sy
 8009ee8:	4b15      	ldr	r3, [pc, #84]	; (8009f40 <pxCurrentTCBConst>)
 8009eea:	681a      	ldr	r2, [r3, #0]
 8009eec:	f01e 0f10 	tst.w	lr, #16
 8009ef0:	bf08      	it	eq
 8009ef2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ef6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009efa:	6010      	str	r0, [r2, #0]
 8009efc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009f00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009f04:	f380 8811 	msr	BASEPRI, r0
 8009f08:	f3bf 8f4f 	dsb	sy
 8009f0c:	f3bf 8f6f 	isb	sy
 8009f10:	f7fe feba 	bl	8008c88 <vTaskSwitchContext>
 8009f14:	f04f 0000 	mov.w	r0, #0
 8009f18:	f380 8811 	msr	BASEPRI, r0
 8009f1c:	bc09      	pop	{r0, r3}
 8009f1e:	6819      	ldr	r1, [r3, #0]
 8009f20:	6808      	ldr	r0, [r1, #0]
 8009f22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f26:	f01e 0f10 	tst.w	lr, #16
 8009f2a:	bf08      	it	eq
 8009f2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009f30:	f380 8809 	msr	PSP, r0
 8009f34:	f3bf 8f6f 	isb	sy
 8009f38:	4770      	bx	lr
 8009f3a:	bf00      	nop
 8009f3c:	f3af 8000 	nop.w

08009f40 <pxCurrentTCBConst>:
 8009f40:	20001afc 	.word	0x20001afc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009f44:	bf00      	nop
 8009f46:	bf00      	nop

08009f48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f52:	f383 8811 	msr	BASEPRI, r3
 8009f56:	f3bf 8f6f 	isb	sy
 8009f5a:	f3bf 8f4f 	dsb	sy
 8009f5e:	607b      	str	r3, [r7, #4]
}
 8009f60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009f62:	f7fe fdd7 	bl	8008b14 <xTaskIncrementTick>
 8009f66:	4603      	mov	r3, r0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d003      	beq.n	8009f74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009f6c:	4b06      	ldr	r3, [pc, #24]	; (8009f88 <xPortSysTickHandler+0x40>)
 8009f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f72:	601a      	str	r2, [r3, #0]
 8009f74:	2300      	movs	r3, #0
 8009f76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	f383 8811 	msr	BASEPRI, r3
}
 8009f7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009f80:	bf00      	nop
 8009f82:	3708      	adds	r7, #8
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	e000ed04 	.word	0xe000ed04

08009f8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009f90:	4b0b      	ldr	r3, [pc, #44]	; (8009fc0 <vPortSetupTimerInterrupt+0x34>)
 8009f92:	2200      	movs	r2, #0
 8009f94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009f96:	4b0b      	ldr	r3, [pc, #44]	; (8009fc4 <vPortSetupTimerInterrupt+0x38>)
 8009f98:	2200      	movs	r2, #0
 8009f9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009f9c:	4b0a      	ldr	r3, [pc, #40]	; (8009fc8 <vPortSetupTimerInterrupt+0x3c>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a0a      	ldr	r2, [pc, #40]	; (8009fcc <vPortSetupTimerInterrupt+0x40>)
 8009fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8009fa6:	099b      	lsrs	r3, r3, #6
 8009fa8:	4a09      	ldr	r2, [pc, #36]	; (8009fd0 <vPortSetupTimerInterrupt+0x44>)
 8009faa:	3b01      	subs	r3, #1
 8009fac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009fae:	4b04      	ldr	r3, [pc, #16]	; (8009fc0 <vPortSetupTimerInterrupt+0x34>)
 8009fb0:	2207      	movs	r2, #7
 8009fb2:	601a      	str	r2, [r3, #0]
}
 8009fb4:	bf00      	nop
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr
 8009fbe:	bf00      	nop
 8009fc0:	e000e010 	.word	0xe000e010
 8009fc4:	e000e018 	.word	0xe000e018
 8009fc8:	200002ec 	.word	0x200002ec
 8009fcc:	10624dd3 	.word	0x10624dd3
 8009fd0:	e000e014 	.word	0xe000e014

08009fd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009fd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009fe4 <vPortEnableVFP+0x10>
 8009fd8:	6801      	ldr	r1, [r0, #0]
 8009fda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009fde:	6001      	str	r1, [r0, #0]
 8009fe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009fe2:	bf00      	nop
 8009fe4:	e000ed88 	.word	0xe000ed88

08009fe8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009fe8:	b480      	push	{r7}
 8009fea:	b085      	sub	sp, #20
 8009fec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009fee:	f3ef 8305 	mrs	r3, IPSR
 8009ff2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2b0f      	cmp	r3, #15
 8009ff8:	d914      	bls.n	800a024 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009ffa:	4a17      	ldr	r2, [pc, #92]	; (800a058 <vPortValidateInterruptPriority+0x70>)
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	4413      	add	r3, r2
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a004:	4b15      	ldr	r3, [pc, #84]	; (800a05c <vPortValidateInterruptPriority+0x74>)
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	7afa      	ldrb	r2, [r7, #11]
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d20a      	bcs.n	800a024 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a012:	f383 8811 	msr	BASEPRI, r3
 800a016:	f3bf 8f6f 	isb	sy
 800a01a:	f3bf 8f4f 	dsb	sy
 800a01e:	607b      	str	r3, [r7, #4]
}
 800a020:	bf00      	nop
 800a022:	e7fe      	b.n	800a022 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a024:	4b0e      	ldr	r3, [pc, #56]	; (800a060 <vPortValidateInterruptPriority+0x78>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a02c:	4b0d      	ldr	r3, [pc, #52]	; (800a064 <vPortValidateInterruptPriority+0x7c>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	429a      	cmp	r2, r3
 800a032:	d90a      	bls.n	800a04a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a038:	f383 8811 	msr	BASEPRI, r3
 800a03c:	f3bf 8f6f 	isb	sy
 800a040:	f3bf 8f4f 	dsb	sy
 800a044:	603b      	str	r3, [r7, #0]
}
 800a046:	bf00      	nop
 800a048:	e7fe      	b.n	800a048 <vPortValidateInterruptPriority+0x60>
	}
 800a04a:	bf00      	nop
 800a04c:	3714      	adds	r7, #20
 800a04e:	46bd      	mov	sp, r7
 800a050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a054:	4770      	bx	lr
 800a056:	bf00      	nop
 800a058:	e000e3f0 	.word	0xe000e3f0
 800a05c:	20002128 	.word	0x20002128
 800a060:	e000ed0c 	.word	0xe000ed0c
 800a064:	2000212c 	.word	0x2000212c

0800a068 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b08a      	sub	sp, #40	; 0x28
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a070:	2300      	movs	r3, #0
 800a072:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a074:	f7fe fc92 	bl	800899c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a078:	4b5b      	ldr	r3, [pc, #364]	; (800a1e8 <pvPortMalloc+0x180>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d101      	bne.n	800a084 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a080:	f000 f920 	bl	800a2c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a084:	4b59      	ldr	r3, [pc, #356]	; (800a1ec <pvPortMalloc+0x184>)
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	4013      	ands	r3, r2
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	f040 8093 	bne.w	800a1b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d01d      	beq.n	800a0d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a098:	2208      	movs	r2, #8
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	4413      	add	r3, r2
 800a09e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f003 0307 	and.w	r3, r3, #7
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d014      	beq.n	800a0d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f023 0307 	bic.w	r3, r3, #7
 800a0b0:	3308      	adds	r3, #8
 800a0b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f003 0307 	and.w	r3, r3, #7
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d00a      	beq.n	800a0d4 <pvPortMalloc+0x6c>
	__asm volatile
 800a0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c2:	f383 8811 	msr	BASEPRI, r3
 800a0c6:	f3bf 8f6f 	isb	sy
 800a0ca:	f3bf 8f4f 	dsb	sy
 800a0ce:	617b      	str	r3, [r7, #20]
}
 800a0d0:	bf00      	nop
 800a0d2:	e7fe      	b.n	800a0d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d06e      	beq.n	800a1b8 <pvPortMalloc+0x150>
 800a0da:	4b45      	ldr	r3, [pc, #276]	; (800a1f0 <pvPortMalloc+0x188>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d869      	bhi.n	800a1b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a0e4:	4b43      	ldr	r3, [pc, #268]	; (800a1f4 <pvPortMalloc+0x18c>)
 800a0e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a0e8:	4b42      	ldr	r3, [pc, #264]	; (800a1f4 <pvPortMalloc+0x18c>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0ee:	e004      	b.n	800a0fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	429a      	cmp	r2, r3
 800a102:	d903      	bls.n	800a10c <pvPortMalloc+0xa4>
 800a104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d1f1      	bne.n	800a0f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a10c:	4b36      	ldr	r3, [pc, #216]	; (800a1e8 <pvPortMalloc+0x180>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a112:	429a      	cmp	r2, r3
 800a114:	d050      	beq.n	800a1b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a116:	6a3b      	ldr	r3, [r7, #32]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	2208      	movs	r2, #8
 800a11c:	4413      	add	r3, r2
 800a11e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	6a3b      	ldr	r3, [r7, #32]
 800a126:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12a:	685a      	ldr	r2, [r3, #4]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	1ad2      	subs	r2, r2, r3
 800a130:	2308      	movs	r3, #8
 800a132:	005b      	lsls	r3, r3, #1
 800a134:	429a      	cmp	r2, r3
 800a136:	d91f      	bls.n	800a178 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4413      	add	r3, r2
 800a13e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a140:	69bb      	ldr	r3, [r7, #24]
 800a142:	f003 0307 	and.w	r3, r3, #7
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00a      	beq.n	800a160 <pvPortMalloc+0xf8>
	__asm volatile
 800a14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a14e:	f383 8811 	msr	BASEPRI, r3
 800a152:	f3bf 8f6f 	isb	sy
 800a156:	f3bf 8f4f 	dsb	sy
 800a15a:	613b      	str	r3, [r7, #16]
}
 800a15c:	bf00      	nop
 800a15e:	e7fe      	b.n	800a15e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a162:	685a      	ldr	r2, [r3, #4]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	1ad2      	subs	r2, r2, r3
 800a168:	69bb      	ldr	r3, [r7, #24]
 800a16a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16e:	687a      	ldr	r2, [r7, #4]
 800a170:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a172:	69b8      	ldr	r0, [r7, #24]
 800a174:	f000 f908 	bl	800a388 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a178:	4b1d      	ldr	r3, [pc, #116]	; (800a1f0 <pvPortMalloc+0x188>)
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	1ad3      	subs	r3, r2, r3
 800a182:	4a1b      	ldr	r2, [pc, #108]	; (800a1f0 <pvPortMalloc+0x188>)
 800a184:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a186:	4b1a      	ldr	r3, [pc, #104]	; (800a1f0 <pvPortMalloc+0x188>)
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	4b1b      	ldr	r3, [pc, #108]	; (800a1f8 <pvPortMalloc+0x190>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	429a      	cmp	r2, r3
 800a190:	d203      	bcs.n	800a19a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a192:	4b17      	ldr	r3, [pc, #92]	; (800a1f0 <pvPortMalloc+0x188>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4a18      	ldr	r2, [pc, #96]	; (800a1f8 <pvPortMalloc+0x190>)
 800a198:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19c:	685a      	ldr	r2, [r3, #4]
 800a19e:	4b13      	ldr	r3, [pc, #76]	; (800a1ec <pvPortMalloc+0x184>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	431a      	orrs	r2, r3
 800a1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a1ae:	4b13      	ldr	r3, [pc, #76]	; (800a1fc <pvPortMalloc+0x194>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	4a11      	ldr	r2, [pc, #68]	; (800a1fc <pvPortMalloc+0x194>)
 800a1b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a1b8:	f7fe fbfe 	bl	80089b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1bc:	69fb      	ldr	r3, [r7, #28]
 800a1be:	f003 0307 	and.w	r3, r3, #7
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d00a      	beq.n	800a1dc <pvPortMalloc+0x174>
	__asm volatile
 800a1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ca:	f383 8811 	msr	BASEPRI, r3
 800a1ce:	f3bf 8f6f 	isb	sy
 800a1d2:	f3bf 8f4f 	dsb	sy
 800a1d6:	60fb      	str	r3, [r7, #12]
}
 800a1d8:	bf00      	nop
 800a1da:	e7fe      	b.n	800a1da <pvPortMalloc+0x172>
	return pvReturn;
 800a1dc:	69fb      	ldr	r3, [r7, #28]
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3728      	adds	r7, #40	; 0x28
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
 800a1e6:	bf00      	nop
 800a1e8:	20005d38 	.word	0x20005d38
 800a1ec:	20005d4c 	.word	0x20005d4c
 800a1f0:	20005d3c 	.word	0x20005d3c
 800a1f4:	20005d30 	.word	0x20005d30
 800a1f8:	20005d40 	.word	0x20005d40
 800a1fc:	20005d44 	.word	0x20005d44

0800a200 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b086      	sub	sp, #24
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d04d      	beq.n	800a2ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a212:	2308      	movs	r3, #8
 800a214:	425b      	negs	r3, r3
 800a216:	697a      	ldr	r2, [r7, #20]
 800a218:	4413      	add	r3, r2
 800a21a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	685a      	ldr	r2, [r3, #4]
 800a224:	4b24      	ldr	r3, [pc, #144]	; (800a2b8 <vPortFree+0xb8>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4013      	ands	r3, r2
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d10a      	bne.n	800a244 <vPortFree+0x44>
	__asm volatile
 800a22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a232:	f383 8811 	msr	BASEPRI, r3
 800a236:	f3bf 8f6f 	isb	sy
 800a23a:	f3bf 8f4f 	dsb	sy
 800a23e:	60fb      	str	r3, [r7, #12]
}
 800a240:	bf00      	nop
 800a242:	e7fe      	b.n	800a242 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d00a      	beq.n	800a262 <vPortFree+0x62>
	__asm volatile
 800a24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a250:	f383 8811 	msr	BASEPRI, r3
 800a254:	f3bf 8f6f 	isb	sy
 800a258:	f3bf 8f4f 	dsb	sy
 800a25c:	60bb      	str	r3, [r7, #8]
}
 800a25e:	bf00      	nop
 800a260:	e7fe      	b.n	800a260 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	685a      	ldr	r2, [r3, #4]
 800a266:	4b14      	ldr	r3, [pc, #80]	; (800a2b8 <vPortFree+0xb8>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4013      	ands	r3, r2
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d01e      	beq.n	800a2ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d11a      	bne.n	800a2ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	685a      	ldr	r2, [r3, #4]
 800a27c:	4b0e      	ldr	r3, [pc, #56]	; (800a2b8 <vPortFree+0xb8>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	43db      	mvns	r3, r3
 800a282:	401a      	ands	r2, r3
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a288:	f7fe fb88 	bl	800899c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	685a      	ldr	r2, [r3, #4]
 800a290:	4b0a      	ldr	r3, [pc, #40]	; (800a2bc <vPortFree+0xbc>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4413      	add	r3, r2
 800a296:	4a09      	ldr	r2, [pc, #36]	; (800a2bc <vPortFree+0xbc>)
 800a298:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a29a:	6938      	ldr	r0, [r7, #16]
 800a29c:	f000 f874 	bl	800a388 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a2a0:	4b07      	ldr	r3, [pc, #28]	; (800a2c0 <vPortFree+0xc0>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	4a06      	ldr	r2, [pc, #24]	; (800a2c0 <vPortFree+0xc0>)
 800a2a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a2aa:	f7fe fb85 	bl	80089b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a2ae:	bf00      	nop
 800a2b0:	3718      	adds	r7, #24
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	20005d4c 	.word	0x20005d4c
 800a2bc:	20005d3c 	.word	0x20005d3c
 800a2c0:	20005d48 	.word	0x20005d48

0800a2c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b085      	sub	sp, #20
 800a2c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a2ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a2ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a2d0:	4b27      	ldr	r3, [pc, #156]	; (800a370 <prvHeapInit+0xac>)
 800a2d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f003 0307 	and.w	r3, r3, #7
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d00c      	beq.n	800a2f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	3307      	adds	r3, #7
 800a2e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f023 0307 	bic.w	r3, r3, #7
 800a2ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a2ec:	68ba      	ldr	r2, [r7, #8]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	1ad3      	subs	r3, r2, r3
 800a2f2:	4a1f      	ldr	r2, [pc, #124]	; (800a370 <prvHeapInit+0xac>)
 800a2f4:	4413      	add	r3, r2
 800a2f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a2fc:	4a1d      	ldr	r2, [pc, #116]	; (800a374 <prvHeapInit+0xb0>)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a302:	4b1c      	ldr	r3, [pc, #112]	; (800a374 <prvHeapInit+0xb0>)
 800a304:	2200      	movs	r2, #0
 800a306:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	68ba      	ldr	r2, [r7, #8]
 800a30c:	4413      	add	r3, r2
 800a30e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a310:	2208      	movs	r2, #8
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	1a9b      	subs	r3, r3, r2
 800a316:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f023 0307 	bic.w	r3, r3, #7
 800a31e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	4a15      	ldr	r2, [pc, #84]	; (800a378 <prvHeapInit+0xb4>)
 800a324:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a326:	4b14      	ldr	r3, [pc, #80]	; (800a378 <prvHeapInit+0xb4>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	2200      	movs	r2, #0
 800a32c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a32e:	4b12      	ldr	r3, [pc, #72]	; (800a378 <prvHeapInit+0xb4>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	2200      	movs	r2, #0
 800a334:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	68fa      	ldr	r2, [r7, #12]
 800a33e:	1ad2      	subs	r2, r2, r3
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a344:	4b0c      	ldr	r3, [pc, #48]	; (800a378 <prvHeapInit+0xb4>)
 800a346:	681a      	ldr	r2, [r3, #0]
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	4a0a      	ldr	r2, [pc, #40]	; (800a37c <prvHeapInit+0xb8>)
 800a352:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	4a09      	ldr	r2, [pc, #36]	; (800a380 <prvHeapInit+0xbc>)
 800a35a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a35c:	4b09      	ldr	r3, [pc, #36]	; (800a384 <prvHeapInit+0xc0>)
 800a35e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a362:	601a      	str	r2, [r3, #0]
}
 800a364:	bf00      	nop
 800a366:	3714      	adds	r7, #20
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr
 800a370:	20002130 	.word	0x20002130
 800a374:	20005d30 	.word	0x20005d30
 800a378:	20005d38 	.word	0x20005d38
 800a37c:	20005d40 	.word	0x20005d40
 800a380:	20005d3c 	.word	0x20005d3c
 800a384:	20005d4c 	.word	0x20005d4c

0800a388 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a388:	b480      	push	{r7}
 800a38a:	b085      	sub	sp, #20
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a390:	4b28      	ldr	r3, [pc, #160]	; (800a434 <prvInsertBlockIntoFreeList+0xac>)
 800a392:	60fb      	str	r3, [r7, #12]
 800a394:	e002      	b.n	800a39c <prvInsertBlockIntoFreeList+0x14>
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	60fb      	str	r3, [r7, #12]
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d8f7      	bhi.n	800a396 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	68ba      	ldr	r2, [r7, #8]
 800a3b0:	4413      	add	r3, r2
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d108      	bne.n	800a3ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	685a      	ldr	r2, [r3, #4]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	441a      	add	r2, r3
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	685b      	ldr	r3, [r3, #4]
 800a3d2:	68ba      	ldr	r2, [r7, #8]
 800a3d4:	441a      	add	r2, r3
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d118      	bne.n	800a410 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	4b15      	ldr	r3, [pc, #84]	; (800a438 <prvInsertBlockIntoFreeList+0xb0>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d00d      	beq.n	800a406 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	685a      	ldr	r2, [r3, #4]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	441a      	add	r2, r3
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	681a      	ldr	r2, [r3, #0]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	601a      	str	r2, [r3, #0]
 800a404:	e008      	b.n	800a418 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a406:	4b0c      	ldr	r3, [pc, #48]	; (800a438 <prvInsertBlockIntoFreeList+0xb0>)
 800a408:	681a      	ldr	r2, [r3, #0]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	601a      	str	r2, [r3, #0]
 800a40e:	e003      	b.n	800a418 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a418:	68fa      	ldr	r2, [r7, #12]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	429a      	cmp	r2, r3
 800a41e:	d002      	beq.n	800a426 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a426:	bf00      	nop
 800a428:	3714      	adds	r7, #20
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr
 800a432:	bf00      	nop
 800a434:	20005d30 	.word	0x20005d30
 800a438:	20005d38 	.word	0x20005d38

0800a43c <arm_max_q15>:
 800a43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a440:	f101 3cff 	add.w	ip, r1, #4294967295
 800a444:	ea5f 0a9c 	movs.w	sl, ip, lsr #2
 800a448:	f100 0902 	add.w	r9, r0, #2
 800a44c:	f9b0 4000 	ldrsh.w	r4, [r0]
 800a450:	d04a      	beq.n	800a4e8 <arm_max_q15+0xac>
 800a452:	300a      	adds	r0, #10
 800a454:	46d0      	mov	r8, sl
 800a456:	f04f 0e04 	mov.w	lr, #4
 800a45a:	2700      	movs	r7, #0
 800a45c:	f930 5c08 	ldrsh.w	r5, [r0, #-8]
 800a460:	f930 bc06 	ldrsh.w	fp, [r0, #-6]
 800a464:	f1ae 0603 	sub.w	r6, lr, #3
 800a468:	42a5      	cmp	r5, r4
 800a46a:	bfc8      	it	gt
 800a46c:	4637      	movgt	r7, r6
 800a46e:	42ac      	cmp	r4, r5
 800a470:	bfb8      	it	lt
 800a472:	462c      	movlt	r4, r5
 800a474:	f1ae 0502 	sub.w	r5, lr, #2
 800a478:	455c      	cmp	r4, fp
 800a47a:	bfb8      	it	lt
 800a47c:	462f      	movlt	r7, r5
 800a47e:	455c      	cmp	r4, fp
 800a480:	bfb8      	it	lt
 800a482:	465c      	movlt	r4, fp
 800a484:	f930 6c04 	ldrsh.w	r6, [r0, #-4]
 800a488:	4625      	mov	r5, r4
 800a48a:	f10e 3bff 	add.w	fp, lr, #4294967295
 800a48e:	f930 4c02 	ldrsh.w	r4, [r0, #-2]
 800a492:	42b5      	cmp	r5, r6
 800a494:	bfb8      	it	lt
 800a496:	465f      	movlt	r7, fp
 800a498:	42b5      	cmp	r5, r6
 800a49a:	bfb8      	it	lt
 800a49c:	4635      	movlt	r5, r6
 800a49e:	42a5      	cmp	r5, r4
 800a4a0:	bfb8      	it	lt
 800a4a2:	4677      	movlt	r7, lr
 800a4a4:	42ac      	cmp	r4, r5
 800a4a6:	bfb8      	it	lt
 800a4a8:	462c      	movlt	r4, r5
 800a4aa:	f1b8 0801 	subs.w	r8, r8, #1
 800a4ae:	f100 0008 	add.w	r0, r0, #8
 800a4b2:	f10e 0e04 	add.w	lr, lr, #4
 800a4b6:	d1d1      	bne.n	800a45c <arm_max_q15+0x20>
 800a4b8:	eb09 09ca 	add.w	r9, r9, sl, lsl #3
 800a4bc:	f01c 0c03 	ands.w	ip, ip, #3
 800a4c0:	d014      	beq.n	800a4ec <arm_max_q15+0xb0>
 800a4c2:	ebcc 0c01 	rsb	ip, ip, r1
 800a4c6:	f939 0b02 	ldrsh.w	r0, [r9], #2
 800a4ca:	42a0      	cmp	r0, r4
 800a4cc:	bfc8      	it	gt
 800a4ce:	4667      	movgt	r7, ip
 800a4d0:	42a0      	cmp	r0, r4
 800a4d2:	f10c 0c01 	add.w	ip, ip, #1
 800a4d6:	bfb8      	it	lt
 800a4d8:	4620      	movlt	r0, r4
 800a4da:	4561      	cmp	r1, ip
 800a4dc:	4604      	mov	r4, r0
 800a4de:	d1f2      	bne.n	800a4c6 <arm_max_q15+0x8a>
 800a4e0:	8010      	strh	r0, [r2, #0]
 800a4e2:	601f      	str	r7, [r3, #0]
 800a4e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4e8:	4657      	mov	r7, sl
 800a4ea:	e7e7      	b.n	800a4bc <arm_max_q15+0x80>
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	e7f7      	b.n	800a4e0 <arm_max_q15+0xa4>

0800a4f0 <arm_split_rfft_q15>:
 800a4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f4:	b083      	sub	sp, #12
 800a4f6:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
 800a4fa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a4fc:	9001      	str	r0, [sp, #4]
 800a4fe:	3c01      	subs	r4, #1
 800a500:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 800a504:	00a0      	lsls	r0, r4, #2
 800a506:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800a50a:	3901      	subs	r1, #1
 800a50c:	9000      	str	r0, [sp, #0]
 800a50e:	4452      	add	r2, sl
 800a510:	4453      	add	r3, sl
 800a512:	d02f      	beq.n	800a574 <arm_split_rfft_q15+0x84>
 800a514:	f100 0904 	add.w	r9, r0, #4
 800a518:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a51a:	9c01      	ldr	r4, [sp, #4]
 800a51c:	f1ae 0e08 	sub.w	lr, lr, #8
 800a520:	4486      	add	lr, r0
 800a522:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a524:	44a1      	add	r9, r4
 800a526:	f100 0808 	add.w	r8, r0, #8
 800a52a:	46a3      	mov	fp, r4
 800a52c:	f04f 0c00 	mov.w	ip, #0
 800a530:	f85b 4f04 	ldr.w	r4, [fp, #4]!
 800a534:	f852 000c 	ldr.w	r0, [r2, ip]
 800a538:	fb44 f500 	smusd	r5, r4, r0
 800a53c:	f859 6d04 	ldr.w	r6, [r9, #-4]!
 800a540:	f853 700c 	ldr.w	r7, [r3, ip]
 800a544:	fb26 5507 	smlad	r5, r6, r7, r5
 800a548:	fb46 f617 	smusdx	r6, r6, r7
 800a54c:	fb24 6010 	smladx	r0, r4, r0, r6
 800a550:	1400      	asrs	r0, r0, #16
 800a552:	142c      	asrs	r4, r5, #16
 800a554:	4246      	negs	r6, r0
 800a556:	3901      	subs	r1, #1
 800a558:	f828 0c02 	strh.w	r0, [r8, #-2]
 800a55c:	f828 4c04 	strh.w	r4, [r8, #-4]
 800a560:	44d4      	add	ip, sl
 800a562:	f8ae 6006 	strh.w	r6, [lr, #6]
 800a566:	f8ae 4004 	strh.w	r4, [lr, #4]
 800a56a:	f108 0804 	add.w	r8, r8, #4
 800a56e:	f1ae 0e04 	sub.w	lr, lr, #4
 800a572:	d1dd      	bne.n	800a530 <arm_split_rfft_q15+0x40>
 800a574:	9801      	ldr	r0, [sp, #4]
 800a576:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a578:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800a57c:	f9b0 3000 	ldrsh.w	r3, [r0]
 800a580:	9900      	ldr	r1, [sp, #0]
 800a582:	1a9b      	subs	r3, r3, r2
 800a584:	4421      	add	r1, r4
 800a586:	2200      	movs	r2, #0
 800a588:	105b      	asrs	r3, r3, #1
 800a58a:	808b      	strh	r3, [r1, #4]
 800a58c:	80ca      	strh	r2, [r1, #6]
 800a58e:	f9b0 1000 	ldrsh.w	r1, [r0]
 800a592:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800a596:	8062      	strh	r2, [r4, #2]
 800a598:	440b      	add	r3, r1
 800a59a:	105b      	asrs	r3, r3, #1
 800a59c:	8023      	strh	r3, [r4, #0]
 800a59e:	b003      	add	sp, #12
 800a5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a5a4 <arm_rfft_q15>:
 800a5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5a8:	4616      	mov	r6, r2
 800a5aa:	7902      	ldrb	r2, [r0, #4]
 800a5ac:	6804      	ldr	r4, [r0, #0]
 800a5ae:	6943      	ldr	r3, [r0, #20]
 800a5b0:	b085      	sub	sp, #20
 800a5b2:	2a01      	cmp	r2, #1
 800a5b4:	4605      	mov	r5, r0
 800a5b6:	9303      	str	r3, [sp, #12]
 800a5b8:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a5bc:	460f      	mov	r7, r1
 800a5be:	d00f      	beq.n	800a5e0 <arm_rfft_q15+0x3c>
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	796b      	ldrb	r3, [r5, #5]
 800a5c4:	f000 fa52 	bl	800aa6c <arm_cfft_q15>
 800a5c8:	692b      	ldr	r3, [r5, #16]
 800a5ca:	68ea      	ldr	r2, [r5, #12]
 800a5cc:	68ad      	ldr	r5, [r5, #8]
 800a5ce:	9501      	str	r5, [sp, #4]
 800a5d0:	9600      	str	r6, [sp, #0]
 800a5d2:	4621      	mov	r1, r4
 800a5d4:	4638      	mov	r0, r7
 800a5d6:	f7ff ff8b 	bl	800a4f0 <arm_split_rfft_q15>
 800a5da:	b005      	add	sp, #20
 800a5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5e0:	f100 0308 	add.w	r3, r0, #8
 800a5e4:	e893 1108 	ldmia.w	r3, {r3, r8, ip}
 800a5e8:	ea4f 0984 	mov.w	r9, r4, lsl #2
 800a5ec:	b30c      	cbz	r4, 800a632 <arm_rfft_q15+0x8e>
 800a5ee:	f109 0904 	add.w	r9, r9, #4
 800a5f2:	4489      	add	r9, r1
 800a5f4:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800a5f8:	46b3      	mov	fp, r6
 800a5fa:	f859 1d04 	ldr.w	r1, [r9, #-4]!
 800a5fe:	f8dc e000 	ldr.w	lr, [ip]
 800a602:	fb41 f00e 	smusd	r0, r1, lr
 800a606:	f857 3b04 	ldr.w	r3, [r7], #4
 800a60a:	f8d8 2000 	ldr.w	r2, [r8]
 800a60e:	fb23 0002 	smlad	r0, r3, r2, r0
 800a612:	fb21 f11e 	smuadx	r1, r1, lr
 800a616:	4249      	negs	r1, r1
 800a618:	fb42 1213 	smlsdx	r2, r2, r3, r1
 800a61c:	0c13      	lsrs	r3, r2, #16
 800a61e:	041b      	lsls	r3, r3, #16
 800a620:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 800a624:	3c01      	subs	r4, #1
 800a626:	f84b 3b04 	str.w	r3, [fp], #4
 800a62a:	44d4      	add	ip, sl
 800a62c:	44d0      	add	r8, sl
 800a62e:	d1e4      	bne.n	800a5fa <arm_rfft_q15+0x56>
 800a630:	792a      	ldrb	r2, [r5, #4]
 800a632:	796b      	ldrb	r3, [r5, #5]
 800a634:	9803      	ldr	r0, [sp, #12]
 800a636:	4631      	mov	r1, r6
 800a638:	f000 fa18 	bl	800aa6c <arm_cfft_q15>
 800a63c:	682b      	ldr	r3, [r5, #0]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d0cb      	beq.n	800a5da <arm_rfft_q15+0x36>
 800a642:	3e02      	subs	r6, #2
 800a644:	2200      	movs	r2, #0
 800a646:	f936 3f02 	ldrsh.w	r3, [r6, #2]!
 800a64a:	005b      	lsls	r3, r3, #1
 800a64c:	8033      	strh	r3, [r6, #0]
 800a64e:	682b      	ldr	r3, [r5, #0]
 800a650:	3201      	adds	r2, #1
 800a652:	4293      	cmp	r3, r2
 800a654:	d8f7      	bhi.n	800a646 <arm_rfft_q15+0xa2>
 800a656:	b005      	add	sp, #20
 800a658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a65c <arm_rfft_init_q15>:
 800a65c:	b289      	uxth	r1, r1
 800a65e:	b430      	push	{r4, r5}
 800a660:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a664:	4d31      	ldr	r5, [pc, #196]	; (800a72c <arm_rfft_init_q15+0xd0>)
 800a666:	4c32      	ldr	r4, [pc, #200]	; (800a730 <arm_rfft_init_q15+0xd4>)
 800a668:	7102      	strb	r2, [r0, #4]
 800a66a:	7143      	strb	r3, [r0, #5]
 800a66c:	6001      	str	r1, [r0, #0]
 800a66e:	60c5      	str	r5, [r0, #12]
 800a670:	6104      	str	r4, [r0, #16]
 800a672:	d049      	beq.n	800a708 <arm_rfft_init_q15+0xac>
 800a674:	d910      	bls.n	800a698 <arm_rfft_init_q15+0x3c>
 800a676:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800a67a:	d04c      	beq.n	800a716 <arm_rfft_init_q15+0xba>
 800a67c:	d933      	bls.n	800a6e6 <arm_rfft_init_q15+0x8a>
 800a67e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800a682:	d01f      	beq.n	800a6c4 <arm_rfft_init_q15+0x68>
 800a684:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800a688:	d14c      	bne.n	800a724 <arm_rfft_init_q15+0xc8>
 800a68a:	2201      	movs	r2, #1
 800a68c:	4b29      	ldr	r3, [pc, #164]	; (800a734 <arm_rfft_init_q15+0xd8>)
 800a68e:	6082      	str	r2, [r0, #8]
 800a690:	6143      	str	r3, [r0, #20]
 800a692:	bc30      	pop	{r4, r5}
 800a694:	2000      	movs	r0, #0
 800a696:	4770      	bx	lr
 800a698:	2940      	cmp	r1, #64	; 0x40
 800a69a:	d02e      	beq.n	800a6fa <arm_rfft_init_q15+0x9e>
 800a69c:	d919      	bls.n	800a6d2 <arm_rfft_init_q15+0x76>
 800a69e:	2980      	cmp	r1, #128	; 0x80
 800a6a0:	d009      	beq.n	800a6b6 <arm_rfft_init_q15+0x5a>
 800a6a2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800a6a6:	d13d      	bne.n	800a724 <arm_rfft_init_q15+0xc8>
 800a6a8:	2220      	movs	r2, #32
 800a6aa:	4b23      	ldr	r3, [pc, #140]	; (800a738 <arm_rfft_init_q15+0xdc>)
 800a6ac:	6082      	str	r2, [r0, #8]
 800a6ae:	6143      	str	r3, [r0, #20]
 800a6b0:	bc30      	pop	{r4, r5}
 800a6b2:	2000      	movs	r0, #0
 800a6b4:	4770      	bx	lr
 800a6b6:	2240      	movs	r2, #64	; 0x40
 800a6b8:	4b20      	ldr	r3, [pc, #128]	; (800a73c <arm_rfft_init_q15+0xe0>)
 800a6ba:	6082      	str	r2, [r0, #8]
 800a6bc:	6143      	str	r3, [r0, #20]
 800a6be:	bc30      	pop	{r4, r5}
 800a6c0:	2000      	movs	r0, #0
 800a6c2:	4770      	bx	lr
 800a6c4:	2202      	movs	r2, #2
 800a6c6:	4b1e      	ldr	r3, [pc, #120]	; (800a740 <arm_rfft_init_q15+0xe4>)
 800a6c8:	6082      	str	r2, [r0, #8]
 800a6ca:	6143      	str	r3, [r0, #20]
 800a6cc:	bc30      	pop	{r4, r5}
 800a6ce:	2000      	movs	r0, #0
 800a6d0:	4770      	bx	lr
 800a6d2:	2920      	cmp	r1, #32
 800a6d4:	d126      	bne.n	800a724 <arm_rfft_init_q15+0xc8>
 800a6d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a6da:	4b1a      	ldr	r3, [pc, #104]	; (800a744 <arm_rfft_init_q15+0xe8>)
 800a6dc:	6082      	str	r2, [r0, #8]
 800a6de:	6143      	str	r3, [r0, #20]
 800a6e0:	bc30      	pop	{r4, r5}
 800a6e2:	2000      	movs	r0, #0
 800a6e4:	4770      	bx	lr
 800a6e6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a6ea:	d11b      	bne.n	800a724 <arm_rfft_init_q15+0xc8>
 800a6ec:	2208      	movs	r2, #8
 800a6ee:	4b16      	ldr	r3, [pc, #88]	; (800a748 <arm_rfft_init_q15+0xec>)
 800a6f0:	6082      	str	r2, [r0, #8]
 800a6f2:	6143      	str	r3, [r0, #20]
 800a6f4:	bc30      	pop	{r4, r5}
 800a6f6:	2000      	movs	r0, #0
 800a6f8:	4770      	bx	lr
 800a6fa:	2280      	movs	r2, #128	; 0x80
 800a6fc:	4b13      	ldr	r3, [pc, #76]	; (800a74c <arm_rfft_init_q15+0xf0>)
 800a6fe:	6082      	str	r2, [r0, #8]
 800a700:	6143      	str	r3, [r0, #20]
 800a702:	bc30      	pop	{r4, r5}
 800a704:	2000      	movs	r0, #0
 800a706:	4770      	bx	lr
 800a708:	2210      	movs	r2, #16
 800a70a:	4b11      	ldr	r3, [pc, #68]	; (800a750 <arm_rfft_init_q15+0xf4>)
 800a70c:	6082      	str	r2, [r0, #8]
 800a70e:	6143      	str	r3, [r0, #20]
 800a710:	bc30      	pop	{r4, r5}
 800a712:	2000      	movs	r0, #0
 800a714:	4770      	bx	lr
 800a716:	2204      	movs	r2, #4
 800a718:	4b0e      	ldr	r3, [pc, #56]	; (800a754 <arm_rfft_init_q15+0xf8>)
 800a71a:	6082      	str	r2, [r0, #8]
 800a71c:	6143      	str	r3, [r0, #20]
 800a71e:	bc30      	pop	{r4, r5}
 800a720:	2000      	movs	r0, #0
 800a722:	4770      	bx	lr
 800a724:	f04f 30ff 	mov.w	r0, #4294967295
 800a728:	bc30      	pop	{r4, r5}
 800a72a:	4770      	bx	lr
 800a72c:	0800b2ec 	.word	0x0800b2ec
 800a730:	0800f2ec 	.word	0x0800f2ec
 800a734:	0801334c 	.word	0x0801334c
 800a738:	080132fc 	.word	0x080132fc
 800a73c:	0801332c 	.word	0x0801332c
 800a740:	0801333c 	.word	0x0801333c
 800a744:	0801335c 	.word	0x0801335c
 800a748:	0801330c 	.word	0x0801330c
 800a74c:	0801336c 	.word	0x0801336c
 800a750:	080132ec 	.word	0x080132ec
 800a754:	0801331c 	.word	0x0801331c

0800a758 <arm_cmplx_mag_q15>:
 800a758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a75c:	b083      	sub	sp, #12
 800a75e:	0893      	lsrs	r3, r2, #2
 800a760:	9200      	str	r2, [sp, #0]
 800a762:	4681      	mov	r9, r0
 800a764:	460e      	mov	r6, r1
 800a766:	9301      	str	r3, [sp, #4]
 800a768:	d033      	beq.n	800a7d2 <arm_cmplx_mag_q15+0x7a>
 800a76a:	f100 0510 	add.w	r5, r0, #16
 800a76e:	469a      	mov	sl, r3
 800a770:	460c      	mov	r4, r1
 800a772:	f855 0c10 	ldr.w	r0, [r5, #-16]
 800a776:	fb20 f000 	smuad	r0, r0, r0
 800a77a:	f855 3c0c 	ldr.w	r3, [r5, #-12]
 800a77e:	fb23 fb03 	smuad	fp, r3, r3
 800a782:	f855 1c08 	ldr.w	r1, [r5, #-8]
 800a786:	fb21 f801 	smuad	r8, r1, r1
 800a78a:	f855 7c04 	ldr.w	r7, [r5, #-4]
 800a78e:	fb27 f707 	smuad	r7, r7, r7
 800a792:	4621      	mov	r1, r4
 800a794:	1440      	asrs	r0, r0, #17
 800a796:	f000 f831 	bl	800a7fc <arm_sqrt_q15>
 800a79a:	1ca1      	adds	r1, r4, #2
 800a79c:	ea4f 406b 	mov.w	r0, fp, asr #17
 800a7a0:	f000 f82c 	bl	800a7fc <arm_sqrt_q15>
 800a7a4:	f104 0b06 	add.w	fp, r4, #6
 800a7a8:	1d21      	adds	r1, r4, #4
 800a7aa:	ea4f 4068 	mov.w	r0, r8, asr #17
 800a7ae:	f000 f825 	bl	800a7fc <arm_sqrt_q15>
 800a7b2:	1478      	asrs	r0, r7, #17
 800a7b4:	4659      	mov	r1, fp
 800a7b6:	f000 f821 	bl	800a7fc <arm_sqrt_q15>
 800a7ba:	f1ba 0a01 	subs.w	sl, sl, #1
 800a7be:	f105 0510 	add.w	r5, r5, #16
 800a7c2:	f104 0408 	add.w	r4, r4, #8
 800a7c6:	d1d4      	bne.n	800a772 <arm_cmplx_mag_q15+0x1a>
 800a7c8:	9a01      	ldr	r2, [sp, #4]
 800a7ca:	eb09 1902 	add.w	r9, r9, r2, lsl #4
 800a7ce:	eb06 06c2 	add.w	r6, r6, r2, lsl #3
 800a7d2:	9b00      	ldr	r3, [sp, #0]
 800a7d4:	f013 0a03 	ands.w	sl, r3, #3
 800a7d8:	d00c      	beq.n	800a7f4 <arm_cmplx_mag_q15+0x9c>
 800a7da:	f859 0b04 	ldr.w	r0, [r9], #4
 800a7de:	fb20 f000 	smuad	r0, r0, r0
 800a7e2:	4631      	mov	r1, r6
 800a7e4:	1440      	asrs	r0, r0, #17
 800a7e6:	f000 f809 	bl	800a7fc <arm_sqrt_q15>
 800a7ea:	f1ba 0a01 	subs.w	sl, sl, #1
 800a7ee:	f106 0602 	add.w	r6, r6, #2
 800a7f2:	d1f2      	bne.n	800a7da <arm_cmplx_mag_q15+0x82>
 800a7f4:	b003      	add	sp, #12
 800a7f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7fa:	bf00      	nop

0800a7fc <arm_sqrt_q15>:
 800a7fc:	2800      	cmp	r0, #0
 800a7fe:	dd65      	ble.n	800a8cc <arm_sqrt_q15+0xd0>
 800a800:	b470      	push	{r4, r5, r6}
 800a802:	fab0 f480 	clz	r4, r0
 800a806:	3c11      	subs	r4, #17
 800a808:	b2a4      	uxth	r4, r4
 800a80a:	f014 0501 	ands.w	r5, r4, #1
 800a80e:	bf1a      	itte	ne
 800a810:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a814:	4098      	lslne	r0, r3
 800a816:	40a0      	lsleq	r0, r4
 800a818:	b200      	sxth	r0, r0
 800a81a:	ee07 0a90 	vmov	s15, r0
 800a81e:	eefa 7ae8 	vcvt.f32.s32	s15, s15, #15
 800a822:	4b2d      	ldr	r3, [pc, #180]	; (800a8d8 <arm_sqrt_q15+0xdc>)
 800a824:	ee17 2a90 	vmov	r2, s15
 800a828:	1052      	asrs	r2, r2, #1
 800a82a:	1a9b      	subs	r3, r3, r2
 800a82c:	ee07 3a90 	vmov	s15, r3
 800a830:	eefe 7ac9 	vcvt.s32.f32	s15, s15, #14
 800a834:	b083      	sub	sp, #12
 800a836:	edcd 7a01 	vstr	s15, [sp, #4]
 800a83a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800a83e:	fb03 f203 	mul.w	r2, r3, r3
 800a842:	1046      	asrs	r6, r0, #1
 800a844:	f342 32cf 	sbfx	r2, r2, #15, #16
 800a848:	fb02 f206 	mul.w	r2, r2, r6
 800a84c:	13d2      	asrs	r2, r2, #15
 800a84e:	f5c2 5240 	rsb	r2, r2, #12288	; 0x3000
 800a852:	fb03 f202 	mul.w	r2, r3, r2
 800a856:	f342 324f 	sbfx	r2, r2, #13, #16
 800a85a:	f022 0203 	bic.w	r2, r2, #3
 800a85e:	fb02 f302 	mul.w	r3, r2, r2
 800a862:	f343 33cf 	sbfx	r3, r3, #15, #16
 800a866:	fb06 f303 	mul.w	r3, r6, r3
 800a86a:	13db      	asrs	r3, r3, #15
 800a86c:	f5c3 5340 	rsb	r3, r3, #12288	; 0x3000
 800a870:	fb02 f303 	mul.w	r3, r2, r3
 800a874:	f343 334f 	sbfx	r3, r3, #13, #16
 800a878:	f023 0303 	bic.w	r3, r3, #3
 800a87c:	fb03 f203 	mul.w	r2, r3, r3
 800a880:	f342 32cf 	sbfx	r2, r2, #15, #16
 800a884:	fb06 f602 	mul.w	r6, r6, r2
 800a888:	13f6      	asrs	r6, r6, #15
 800a88a:	f5c6 5640 	rsb	r6, r6, #12288	; 0x3000
 800a88e:	fb03 f306 	mul.w	r3, r3, r6
 800a892:	f343 334f 	sbfx	r3, r3, #13, #16
 800a896:	f023 0303 	bic.w	r3, r3, #3
 800a89a:	fb00 f003 	mul.w	r0, r0, r3
 800a89e:	f340 308f 	sbfx	r0, r0, #14, #16
 800a8a2:	f020 0001 	bic.w	r0, r0, #1
 800a8a6:	b15d      	cbz	r5, 800a8c0 <arm_sqrt_q15+0xc4>
 800a8a8:	3c01      	subs	r4, #1
 800a8aa:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800a8ae:	1063      	asrs	r3, r4, #1
 800a8b0:	fa40 f303 	asr.w	r3, r0, r3
 800a8b4:	b21b      	sxth	r3, r3
 800a8b6:	2000      	movs	r0, #0
 800a8b8:	800b      	strh	r3, [r1, #0]
 800a8ba:	b003      	add	sp, #12
 800a8bc:	bc70      	pop	{r4, r5, r6}
 800a8be:	4770      	bx	lr
 800a8c0:	f344 034e 	sbfx	r3, r4, #1, #15
 800a8c4:	fa40 f303 	asr.w	r3, r0, r3
 800a8c8:	b21b      	sxth	r3, r3
 800a8ca:	e7f4      	b.n	800a8b6 <arm_sqrt_q15+0xba>
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	800b      	strh	r3, [r1, #0]
 800a8d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d4:	4770      	bx	lr
 800a8d6:	bf00      	nop
 800a8d8:	5f3759df 	.word	0x5f3759df

0800a8dc <arm_cfft_radix4by2_q15>:
 800a8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e0:	084d      	lsrs	r5, r1, #1
 800a8e2:	b081      	sub	sp, #4
 800a8e4:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 800a8e8:	4616      	mov	r6, r2
 800a8ea:	d04d      	beq.n	800a988 <arm_cfft_radix4by2_q15+0xac>
 800a8ec:	4604      	mov	r4, r0
 800a8ee:	4686      	mov	lr, r0
 800a8f0:	46bc      	mov	ip, r7
 800a8f2:	4691      	mov	r9, r2
 800a8f4:	4628      	mov	r0, r5
 800a8f6:	f04f 0800 	mov.w	r8, #0
 800a8fa:	f859 2b04 	ldr.w	r2, [r9], #4
 800a8fe:	f8de 3000 	ldr.w	r3, [lr]
 800a902:	fa93 fa28 	shadd16	sl, r3, r8
 800a906:	f8dc 1000 	ldr.w	r1, [ip]
 800a90a:	fa91 f128 	shadd16	r1, r1, r8
 800a90e:	fada fb11 	qsub16	fp, sl, r1
 800a912:	fa9a f121 	shadd16	r1, sl, r1
 800a916:	f84e 1b04 	str.w	r1, [lr], #4
 800a91a:	fb22 f10b 	smuad	r1, r2, fp
 800a91e:	fb42 f21b 	smusdx	r2, r2, fp
 800a922:	0c13      	lsrs	r3, r2, #16
 800a924:	041b      	lsls	r3, r3, #16
 800a926:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 800a92a:	3801      	subs	r0, #1
 800a92c:	f84c 3b04 	str.w	r3, [ip], #4
 800a930:	d1e3      	bne.n	800a8fa <arm_cfft_radix4by2_q15+0x1e>
 800a932:	4629      	mov	r1, r5
 800a934:	2302      	movs	r3, #2
 800a936:	4632      	mov	r2, r6
 800a938:	4620      	mov	r0, r4
 800a93a:	f000 f8f5 	bl	800ab28 <arm_radix4_butterfly_q15>
 800a93e:	2302      	movs	r3, #2
 800a940:	4629      	mov	r1, r5
 800a942:	4632      	mov	r2, r6
 800a944:	4638      	mov	r0, r7
 800a946:	f000 f8ef 	bl	800ab28 <arm_radix4_butterfly_q15>
 800a94a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800a94e:	1ca3      	adds	r3, r4, #2
 800a950:	f933 7c02 	ldrsh.w	r7, [r3, #-2]
 800a954:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
 800a958:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800a95c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800a960:	007f      	lsls	r7, r7, #1
 800a962:	0076      	lsls	r6, r6, #1
 800a964:	0040      	lsls	r0, r0, #1
 800a966:	0052      	lsls	r2, r2, #1
 800a968:	f823 7c02 	strh.w	r7, [r3, #-2]
 800a96c:	3408      	adds	r4, #8
 800a96e:	f824 6c06 	strh.w	r6, [r4, #-6]
 800a972:	f824 0c04 	strh.w	r0, [r4, #-4]
 800a976:	f824 2c02 	strh.w	r2, [r4, #-2]
 800a97a:	42a5      	cmp	r5, r4
 800a97c:	f103 0308 	add.w	r3, r3, #8
 800a980:	d1e6      	bne.n	800a950 <arm_cfft_radix4by2_q15+0x74>
 800a982:	b001      	add	sp, #4
 800a984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a988:	4629      	mov	r1, r5
 800a98a:	2302      	movs	r3, #2
 800a98c:	f000 f8cc 	bl	800ab28 <arm_radix4_butterfly_q15>
 800a990:	4632      	mov	r2, r6
 800a992:	4629      	mov	r1, r5
 800a994:	4638      	mov	r0, r7
 800a996:	2302      	movs	r3, #2
 800a998:	b001      	add	sp, #4
 800a99a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a99e:	f000 b8c3 	b.w	800ab28 <arm_radix4_butterfly_q15>
 800a9a2:	bf00      	nop

0800a9a4 <arm_cfft_radix4by2_inverse_q15>:
 800a9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9a8:	084d      	lsrs	r5, r1, #1
 800a9aa:	b081      	sub	sp, #4
 800a9ac:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 800a9b0:	4616      	mov	r6, r2
 800a9b2:	d04d      	beq.n	800aa50 <arm_cfft_radix4by2_inverse_q15+0xac>
 800a9b4:	4604      	mov	r4, r0
 800a9b6:	4686      	mov	lr, r0
 800a9b8:	46bc      	mov	ip, r7
 800a9ba:	4691      	mov	r9, r2
 800a9bc:	4628      	mov	r0, r5
 800a9be:	f04f 0800 	mov.w	r8, #0
 800a9c2:	f859 2b04 	ldr.w	r2, [r9], #4
 800a9c6:	f8de 3000 	ldr.w	r3, [lr]
 800a9ca:	fa93 fa28 	shadd16	sl, r3, r8
 800a9ce:	f8dc 1000 	ldr.w	r1, [ip]
 800a9d2:	fa91 f128 	shadd16	r1, r1, r8
 800a9d6:	fada fb11 	qsub16	fp, sl, r1
 800a9da:	fa9a f121 	shadd16	r1, sl, r1
 800a9de:	f84e 1b04 	str.w	r1, [lr], #4
 800a9e2:	fb42 f10b 	smusd	r1, r2, fp
 800a9e6:	fb22 f21b 	smuadx	r2, r2, fp
 800a9ea:	0c13      	lsrs	r3, r2, #16
 800a9ec:	041b      	lsls	r3, r3, #16
 800a9ee:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 800a9f2:	3801      	subs	r0, #1
 800a9f4:	f84c 3b04 	str.w	r3, [ip], #4
 800a9f8:	d1e3      	bne.n	800a9c2 <arm_cfft_radix4by2_inverse_q15+0x1e>
 800a9fa:	4629      	mov	r1, r5
 800a9fc:	2302      	movs	r3, #2
 800a9fe:	4632      	mov	r2, r6
 800aa00:	4620      	mov	r0, r4
 800aa02:	f000 f9bf 	bl	800ad84 <arm_radix4_butterfly_inverse_q15>
 800aa06:	2302      	movs	r3, #2
 800aa08:	4629      	mov	r1, r5
 800aa0a:	4632      	mov	r2, r6
 800aa0c:	4638      	mov	r0, r7
 800aa0e:	f000 f9b9 	bl	800ad84 <arm_radix4_butterfly_inverse_q15>
 800aa12:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800aa16:	1ca3      	adds	r3, r4, #2
 800aa18:	f933 7c02 	ldrsh.w	r7, [r3, #-2]
 800aa1c:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
 800aa20:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800aa24:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800aa28:	007f      	lsls	r7, r7, #1
 800aa2a:	0076      	lsls	r6, r6, #1
 800aa2c:	0040      	lsls	r0, r0, #1
 800aa2e:	0052      	lsls	r2, r2, #1
 800aa30:	f823 7c02 	strh.w	r7, [r3, #-2]
 800aa34:	3408      	adds	r4, #8
 800aa36:	f824 6c06 	strh.w	r6, [r4, #-6]
 800aa3a:	f824 0c04 	strh.w	r0, [r4, #-4]
 800aa3e:	f824 2c02 	strh.w	r2, [r4, #-2]
 800aa42:	42a5      	cmp	r5, r4
 800aa44:	f103 0308 	add.w	r3, r3, #8
 800aa48:	d1e6      	bne.n	800aa18 <arm_cfft_radix4by2_inverse_q15+0x74>
 800aa4a:	b001      	add	sp, #4
 800aa4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa50:	4629      	mov	r1, r5
 800aa52:	2302      	movs	r3, #2
 800aa54:	f000 f996 	bl	800ad84 <arm_radix4_butterfly_inverse_q15>
 800aa58:	4632      	mov	r2, r6
 800aa5a:	4629      	mov	r1, r5
 800aa5c:	4638      	mov	r0, r7
 800aa5e:	2302      	movs	r3, #2
 800aa60:	b001      	add	sp, #4
 800aa62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa66:	f000 b98d 	b.w	800ad84 <arm_radix4_butterfly_inverse_q15>
 800aa6a:	bf00      	nop

0800aa6c <arm_cfft_q15>:
 800aa6c:	b570      	push	{r4, r5, r6, lr}
 800aa6e:	2a01      	cmp	r2, #1
 800aa70:	460d      	mov	r5, r1
 800aa72:	4604      	mov	r4, r0
 800aa74:	461e      	mov	r6, r3
 800aa76:	8801      	ldrh	r1, [r0, #0]
 800aa78:	d024      	beq.n	800aac4 <arm_cfft_q15+0x58>
 800aa7a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800aa7e:	d013      	beq.n	800aaa8 <arm_cfft_q15+0x3c>
 800aa80:	d808      	bhi.n	800aa94 <arm_cfft_q15+0x28>
 800aa82:	2920      	cmp	r1, #32
 800aa84:	d031      	beq.n	800aaea <arm_cfft_q15+0x7e>
 800aa86:	d945      	bls.n	800ab14 <arm_cfft_q15+0xa8>
 800aa88:	2940      	cmp	r1, #64	; 0x40
 800aa8a:	d00d      	beq.n	800aaa8 <arm_cfft_q15+0x3c>
 800aa8c:	2980      	cmp	r1, #128	; 0x80
 800aa8e:	d02c      	beq.n	800aaea <arm_cfft_q15+0x7e>
 800aa90:	b98e      	cbnz	r6, 800aab6 <arm_cfft_q15+0x4a>
 800aa92:	bd70      	pop	{r4, r5, r6, pc}
 800aa94:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800aa98:	d006      	beq.n	800aaa8 <arm_cfft_q15+0x3c>
 800aa9a:	d923      	bls.n	800aae4 <arm_cfft_q15+0x78>
 800aa9c:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800aaa0:	d023      	beq.n	800aaea <arm_cfft_q15+0x7e>
 800aaa2:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800aaa6:	d1f3      	bne.n	800aa90 <arm_cfft_q15+0x24>
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	6862      	ldr	r2, [r4, #4]
 800aaac:	4628      	mov	r0, r5
 800aaae:	f000 f83b 	bl	800ab28 <arm_radix4_butterfly_q15>
 800aab2:	2e00      	cmp	r6, #0
 800aab4:	d0ed      	beq.n	800aa92 <arm_cfft_q15+0x26>
 800aab6:	4628      	mov	r0, r5
 800aab8:	68a2      	ldr	r2, [r4, #8]
 800aaba:	89a1      	ldrh	r1, [r4, #12]
 800aabc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aac0:	f7f5 bbcb 	b.w	800025a <arm_bitreversal_16>
 800aac4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800aac8:	d01e      	beq.n	800ab08 <arm_cfft_q15+0x9c>
 800aaca:	d813      	bhi.n	800aaf4 <arm_cfft_q15+0x88>
 800aacc:	2920      	cmp	r1, #32
 800aace:	d004      	beq.n	800aada <arm_cfft_q15+0x6e>
 800aad0:	d927      	bls.n	800ab22 <arm_cfft_q15+0xb6>
 800aad2:	2940      	cmp	r1, #64	; 0x40
 800aad4:	d018      	beq.n	800ab08 <arm_cfft_q15+0x9c>
 800aad6:	2980      	cmp	r1, #128	; 0x80
 800aad8:	d1da      	bne.n	800aa90 <arm_cfft_q15+0x24>
 800aada:	6862      	ldr	r2, [r4, #4]
 800aadc:	4628      	mov	r0, r5
 800aade:	f7ff ff61 	bl	800a9a4 <arm_cfft_radix4by2_inverse_q15>
 800aae2:	e7d5      	b.n	800aa90 <arm_cfft_q15+0x24>
 800aae4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800aae8:	d1d2      	bne.n	800aa90 <arm_cfft_q15+0x24>
 800aaea:	6862      	ldr	r2, [r4, #4]
 800aaec:	4628      	mov	r0, r5
 800aaee:	f7ff fef5 	bl	800a8dc <arm_cfft_radix4by2_q15>
 800aaf2:	e7cd      	b.n	800aa90 <arm_cfft_q15+0x24>
 800aaf4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800aaf8:	d006      	beq.n	800ab08 <arm_cfft_q15+0x9c>
 800aafa:	d90e      	bls.n	800ab1a <arm_cfft_q15+0xae>
 800aafc:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800ab00:	d0eb      	beq.n	800aada <arm_cfft_q15+0x6e>
 800ab02:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800ab06:	d1c3      	bne.n	800aa90 <arm_cfft_q15+0x24>
 800ab08:	2301      	movs	r3, #1
 800ab0a:	6862      	ldr	r2, [r4, #4]
 800ab0c:	4628      	mov	r0, r5
 800ab0e:	f000 f939 	bl	800ad84 <arm_radix4_butterfly_inverse_q15>
 800ab12:	e7bd      	b.n	800aa90 <arm_cfft_q15+0x24>
 800ab14:	2910      	cmp	r1, #16
 800ab16:	d1bb      	bne.n	800aa90 <arm_cfft_q15+0x24>
 800ab18:	e7c6      	b.n	800aaa8 <arm_cfft_q15+0x3c>
 800ab1a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ab1e:	d0dc      	beq.n	800aada <arm_cfft_q15+0x6e>
 800ab20:	e7b6      	b.n	800aa90 <arm_cfft_q15+0x24>
 800ab22:	2910      	cmp	r1, #16
 800ab24:	d1b4      	bne.n	800aa90 <arm_cfft_q15+0x24>
 800ab26:	e7ef      	b.n	800ab08 <arm_cfft_q15+0x9c>

0800ab28 <arm_radix4_butterfly_q15>:
 800ab28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab2c:	b08f      	sub	sp, #60	; 0x3c
 800ab2e:	469b      	mov	fp, r3
 800ab30:	9101      	str	r1, [sp, #4]
 800ab32:	0889      	lsrs	r1, r1, #2
 800ab34:	460e      	mov	r6, r1
 800ab36:	910d      	str	r1, [sp, #52]	; 0x34
 800ab38:	0089      	lsls	r1, r1, #2
 800ab3a:	4607      	mov	r7, r0
 800ab3c:	900c      	str	r0, [sp, #48]	; 0x30
 800ab3e:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 800ab42:	4408      	add	r0, r1
 800ab44:	2400      	movs	r4, #0
 800ab46:	1845      	adds	r5, r0, r1
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	4696      	mov	lr, r2
 800ab4c:	9209      	str	r2, [sp, #36]	; 0x24
 800ab4e:	46b2      	mov	sl, r6
 800ab50:	4429      	add	r1, r5
 800ab52:	9302      	str	r3, [sp, #8]
 800ab54:	4626      	mov	r6, r4
 800ab56:	4622      	mov	r2, r4
 800ab58:	f8cd b000 	str.w	fp, [sp]
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	fa93 fc22 	shadd16	ip, r3, r2
 800ab62:	fa9c fc22 	shadd16	ip, ip, r2
 800ab66:	682b      	ldr	r3, [r5, #0]
 800ab68:	fa93 f322 	shadd16	r3, r3, r2
 800ab6c:	fa93 f322 	shadd16	r3, r3, r2
 800ab70:	fa9c f813 	qadd16	r8, ip, r3
 800ab74:	fadc fc13 	qsub16	ip, ip, r3
 800ab78:	6803      	ldr	r3, [r0, #0]
 800ab7a:	fa93 f322 	shadd16	r3, r3, r2
 800ab7e:	fa93 f922 	shadd16	r9, r3, r2
 800ab82:	680b      	ldr	r3, [r1, #0]
 800ab84:	fa93 f322 	shadd16	r3, r3, r2
 800ab88:	fa93 f322 	shadd16	r3, r3, r2
 800ab8c:	fa99 f313 	qadd16	r3, r9, r3
 800ab90:	fa98 f923 	shadd16	r9, r8, r3
 800ab94:	f847 9b04 	str.w	r9, [r7], #4
 800ab98:	fad8 f313 	qsub16	r3, r8, r3
 800ab9c:	f85e 9036 	ldr.w	r9, [lr, r6, lsl #3]
 800aba0:	fb29 fb03 	smuad	fp, r9, r3
 800aba4:	fb49 f913 	smusdx	r9, r9, r3
 800aba8:	6803      	ldr	r3, [r0, #0]
 800abaa:	fa93 f322 	shadd16	r3, r3, r2
 800abae:	fa93 f822 	shadd16	r8, r3, r2
 800abb2:	ea4f 4919 	mov.w	r9, r9, lsr #16
 800abb6:	ea4f 4909 	mov.w	r9, r9, lsl #16
 800abba:	ea49 431b 	orr.w	r3, r9, fp, lsr #16
 800abbe:	f840 3b04 	str.w	r3, [r0], #4
 800abc2:	680b      	ldr	r3, [r1, #0]
 800abc4:	fa93 f322 	shadd16	r3, r3, r2
 800abc8:	fa93 f322 	shadd16	r3, r3, r2
 800abcc:	fad8 f313 	qsub16	r3, r8, r3
 800abd0:	faac f913 	qasx	r9, ip, r3
 800abd4:	faec fc13 	qsax	ip, ip, r3
 800abd8:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 800abdc:	fb23 f80c 	smuad	r8, r3, ip
 800abe0:	fb43 f31c 	smusdx	r3, r3, ip
 800abe4:	0c1b      	lsrs	r3, r3, #16
 800abe6:	041b      	lsls	r3, r3, #16
 800abe8:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800abec:	f845 3b04 	str.w	r3, [r5], #4
 800abf0:	f85e 3004 	ldr.w	r3, [lr, r4]
 800abf4:	fb23 fc09 	smuad	ip, r3, r9
 800abf8:	fb43 f319 	smusdx	r3, r3, r9
 800abfc:	0c1b      	lsrs	r3, r3, #16
 800abfe:	041b      	lsls	r3, r3, #16
 800ac00:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 800ac04:	f841 3b04 	str.w	r3, [r1], #4
 800ac08:	9b00      	ldr	r3, [sp, #0]
 800ac0a:	441e      	add	r6, r3
 800ac0c:	9b02      	ldr	r3, [sp, #8]
 800ac0e:	f1ba 0a01 	subs.w	sl, sl, #1
 800ac12:	441c      	add	r4, r3
 800ac14:	d1a2      	bne.n	800ab5c <arm_radix4_butterfly_q15+0x34>
 800ac16:	f8dd b000 	ldr.w	fp, [sp]
 800ac1a:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800ac1e:	9306      	str	r3, [sp, #24]
 800ac20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac22:	2b04      	cmp	r3, #4
 800ac24:	f240 8081 	bls.w	800ad2a <arm_radix4_butterfly_q15+0x202>
 800ac28:	f8cd a008 	str.w	sl, [sp, #8]
 800ac2c:	930a      	str	r3, [sp, #40]	; 0x28
 800ac2e:	469a      	mov	sl, r3
 800ac30:	ea4f 039a 	mov.w	r3, sl, lsr #2
 800ac34:	2200      	movs	r2, #0
 800ac36:	4611      	mov	r1, r2
 800ac38:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac3a:	9204      	str	r2, [sp, #16]
 800ac3c:	1e5a      	subs	r2, r3, #1
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	9308      	str	r3, [sp, #32]
 800ac42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac44:	9207      	str	r2, [sp, #28]
 800ac46:	9105      	str	r1, [sp, #20]
 800ac48:	ea4f 078a 	mov.w	r7, sl, lsl #2
 800ac4c:	9303      	str	r3, [sp, #12]
 800ac4e:	9908      	ldr	r1, [sp, #32]
 800ac50:	9a03      	ldr	r2, [sp, #12]
 800ac52:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ac54:	1850      	adds	r0, r2, r1
 800ac56:	9a05      	ldr	r2, [sp, #20]
 800ac58:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800ac5c:	f856 c022 	ldr.w	ip, [r6, r2, lsl #2]
 800ac60:	f856 9023 	ldr.w	r9, [r6, r3, lsl #2]
 800ac64:	9b06      	ldr	r3, [sp, #24]
 800ac66:	f856 8032 	ldr.w	r8, [r6, r2, lsl #3]
 800ac6a:	18d3      	adds	r3, r2, r3
 800ac6c:	9305      	str	r3, [sp, #20]
 800ac6e:	9a04      	ldr	r2, [sp, #16]
 800ac70:	9b01      	ldr	r3, [sp, #4]
 800ac72:	180d      	adds	r5, r1, r0
 800ac74:	4293      	cmp	r3, r2
 800ac76:	46b6      	mov	lr, r6
 800ac78:	eb01 0405 	add.w	r4, r1, r5
 800ac7c:	9e03      	ldr	r6, [sp, #12]
 800ac7e:	d941      	bls.n	800ad04 <arm_radix4_butterfly_q15+0x1dc>
 800ac80:	eb0a 0e02 	add.w	lr, sl, r2
 800ac84:	6833      	ldr	r3, [r6, #0]
 800ac86:	682a      	ldr	r2, [r5, #0]
 800ac88:	fa93 fb12 	qadd16	fp, r3, r2
 800ac8c:	fad3 f312 	qsub16	r3, r3, r2
 800ac90:	9300      	str	r3, [sp, #0]
 800ac92:	6802      	ldr	r2, [r0, #0]
 800ac94:	6821      	ldr	r1, [r4, #0]
 800ac96:	fa92 f211 	qadd16	r2, r2, r1
 800ac9a:	fa9b f322 	shadd16	r3, fp, r2
 800ac9e:	9902      	ldr	r1, [sp, #8]
 800aca0:	fa93 f121 	shadd16	r1, r3, r1
 800aca4:	6031      	str	r1, [r6, #0]
 800aca6:	443e      	add	r6, r7
 800aca8:	fadb f222 	shsub16	r2, fp, r2
 800acac:	fb28 f102 	smuad	r1, r8, r2
 800acb0:	fb48 f212 	smusdx	r2, r8, r2
 800acb4:	0c12      	lsrs	r2, r2, #16
 800acb6:	0412      	lsls	r2, r2, #16
 800acb8:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 800acbc:	6801      	ldr	r1, [r0, #0]
 800acbe:	6002      	str	r2, [r0, #0]
 800acc0:	6822      	ldr	r2, [r4, #0]
 800acc2:	4438      	add	r0, r7
 800acc4:	fad1 f212 	qsub16	r2, r1, r2
 800acc8:	9b00      	ldr	r3, [sp, #0]
 800acca:	faa3 f122 	shasx	r1, r3, r2
 800acce:	fae3 f322 	shsax	r3, r3, r2
 800acd2:	fb2c fb03 	smuad	fp, ip, r3
 800acd6:	fb4c f313 	smusdx	r3, ip, r3
 800acda:	0c1b      	lsrs	r3, r3, #16
 800acdc:	041b      	lsls	r3, r3, #16
 800acde:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 800ace2:	602b      	str	r3, [r5, #0]
 800ace4:	443d      	add	r5, r7
 800ace6:	fb29 f301 	smuad	r3, r9, r1
 800acea:	fb49 f111 	smusdx	r1, r9, r1
 800acee:	0c09      	lsrs	r1, r1, #16
 800acf0:	0409      	lsls	r1, r1, #16
 800acf2:	9a01      	ldr	r2, [sp, #4]
 800acf4:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 800acf8:	4673      	mov	r3, lr
 800acfa:	429a      	cmp	r2, r3
 800acfc:	6021      	str	r1, [r4, #0]
 800acfe:	44d6      	add	lr, sl
 800ad00:	443c      	add	r4, r7
 800ad02:	d8bf      	bhi.n	800ac84 <arm_radix4_butterfly_q15+0x15c>
 800ad04:	9a03      	ldr	r2, [sp, #12]
 800ad06:	9b04      	ldr	r3, [sp, #16]
 800ad08:	3204      	adds	r2, #4
 800ad0a:	9203      	str	r2, [sp, #12]
 800ad0c:	9a07      	ldr	r2, [sp, #28]
 800ad0e:	3301      	adds	r3, #1
 800ad10:	4293      	cmp	r3, r2
 800ad12:	9304      	str	r3, [sp, #16]
 800ad14:	d99b      	bls.n	800ac4e <arm_radix4_butterfly_q15+0x126>
 800ad16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad18:	9a06      	ldr	r2, [sp, #24]
 800ad1a:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800ad1e:	089b      	lsrs	r3, r3, #2
 800ad20:	0092      	lsls	r2, r2, #2
 800ad22:	2b04      	cmp	r3, #4
 800ad24:	930a      	str	r3, [sp, #40]	; 0x28
 800ad26:	9206      	str	r2, [sp, #24]
 800ad28:	d882      	bhi.n	800ac30 <arm_radix4_butterfly_q15+0x108>
 800ad2a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ad2c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800ad2e:	3410      	adds	r4, #16
 800ad30:	f854 3c10 	ldr.w	r3, [r4, #-16]
 800ad34:	f854 7c08 	ldr.w	r7, [r4, #-8]
 800ad38:	fa93 f117 	qadd16	r1, r3, r7
 800ad3c:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 800ad40:	f854 0c04 	ldr.w	r0, [r4, #-4]
 800ad44:	fa92 f510 	qadd16	r5, r2, r0
 800ad48:	fa91 f525 	shadd16	r5, r1, r5
 800ad4c:	f844 5c10 	str.w	r5, [r4, #-16]
 800ad50:	fa92 f510 	qadd16	r5, r2, r0
 800ad54:	fad1 f125 	shsub16	r1, r1, r5
 800ad58:	f844 1c0c 	str.w	r1, [r4, #-12]
 800ad5c:	fad3 f317 	qsub16	r3, r3, r7
 800ad60:	fad2 f210 	qsub16	r2, r2, r0
 800ad64:	fae3 f122 	shsax	r1, r3, r2
 800ad68:	f844 1c08 	str.w	r1, [r4, #-8]
 800ad6c:	faa3 f322 	shasx	r3, r3, r2
 800ad70:	3e01      	subs	r6, #1
 800ad72:	f844 3c04 	str.w	r3, [r4, #-4]
 800ad76:	f104 0410 	add.w	r4, r4, #16
 800ad7a:	d1d9      	bne.n	800ad30 <arm_radix4_butterfly_q15+0x208>
 800ad7c:	b00f      	add	sp, #60	; 0x3c
 800ad7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad82:	bf00      	nop

0800ad84 <arm_radix4_butterfly_inverse_q15>:
 800ad84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad88:	b08f      	sub	sp, #60	; 0x3c
 800ad8a:	469b      	mov	fp, r3
 800ad8c:	9101      	str	r1, [sp, #4]
 800ad8e:	0889      	lsrs	r1, r1, #2
 800ad90:	460e      	mov	r6, r1
 800ad92:	910d      	str	r1, [sp, #52]	; 0x34
 800ad94:	0089      	lsls	r1, r1, #2
 800ad96:	4607      	mov	r7, r0
 800ad98:	900c      	str	r0, [sp, #48]	; 0x30
 800ad9a:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 800ad9e:	4408      	add	r0, r1
 800ada0:	2400      	movs	r4, #0
 800ada2:	1845      	adds	r5, r0, r1
 800ada4:	009b      	lsls	r3, r3, #2
 800ada6:	4696      	mov	lr, r2
 800ada8:	9209      	str	r2, [sp, #36]	; 0x24
 800adaa:	46b2      	mov	sl, r6
 800adac:	4429      	add	r1, r5
 800adae:	9302      	str	r3, [sp, #8]
 800adb0:	4626      	mov	r6, r4
 800adb2:	4622      	mov	r2, r4
 800adb4:	f8cd b000 	str.w	fp, [sp]
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	fa93 fc22 	shadd16	ip, r3, r2
 800adbe:	fa9c fc22 	shadd16	ip, ip, r2
 800adc2:	682b      	ldr	r3, [r5, #0]
 800adc4:	fa93 f322 	shadd16	r3, r3, r2
 800adc8:	fa93 f322 	shadd16	r3, r3, r2
 800adcc:	fa9c f813 	qadd16	r8, ip, r3
 800add0:	fadc fc13 	qsub16	ip, ip, r3
 800add4:	6803      	ldr	r3, [r0, #0]
 800add6:	fa93 f322 	shadd16	r3, r3, r2
 800adda:	fa93 f922 	shadd16	r9, r3, r2
 800adde:	680b      	ldr	r3, [r1, #0]
 800ade0:	fa93 f322 	shadd16	r3, r3, r2
 800ade4:	fa93 f322 	shadd16	r3, r3, r2
 800ade8:	fa99 f313 	qadd16	r3, r9, r3
 800adec:	fa98 f923 	shadd16	r9, r8, r3
 800adf0:	f847 9b04 	str.w	r9, [r7], #4
 800adf4:	fad8 f313 	qsub16	r3, r8, r3
 800adf8:	f85e 9036 	ldr.w	r9, [lr, r6, lsl #3]
 800adfc:	fb49 fb03 	smusd	fp, r9, r3
 800ae00:	fb29 f913 	smuadx	r9, r9, r3
 800ae04:	6803      	ldr	r3, [r0, #0]
 800ae06:	fa93 f322 	shadd16	r3, r3, r2
 800ae0a:	fa93 f822 	shadd16	r8, r3, r2
 800ae0e:	ea4f 4919 	mov.w	r9, r9, lsr #16
 800ae12:	ea4f 4909 	mov.w	r9, r9, lsl #16
 800ae16:	ea49 431b 	orr.w	r3, r9, fp, lsr #16
 800ae1a:	f840 3b04 	str.w	r3, [r0], #4
 800ae1e:	680b      	ldr	r3, [r1, #0]
 800ae20:	fa93 f322 	shadd16	r3, r3, r2
 800ae24:	fa93 f322 	shadd16	r3, r3, r2
 800ae28:	fad8 f313 	qsub16	r3, r8, r3
 800ae2c:	faec f913 	qsax	r9, ip, r3
 800ae30:	faac fc13 	qasx	ip, ip, r3
 800ae34:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 800ae38:	fb43 f80c 	smusd	r8, r3, ip
 800ae3c:	fb23 f31c 	smuadx	r3, r3, ip
 800ae40:	0c1b      	lsrs	r3, r3, #16
 800ae42:	041b      	lsls	r3, r3, #16
 800ae44:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800ae48:	f845 3b04 	str.w	r3, [r5], #4
 800ae4c:	f85e 3004 	ldr.w	r3, [lr, r4]
 800ae50:	fb43 fc09 	smusd	ip, r3, r9
 800ae54:	fb23 f319 	smuadx	r3, r3, r9
 800ae58:	0c1b      	lsrs	r3, r3, #16
 800ae5a:	041b      	lsls	r3, r3, #16
 800ae5c:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 800ae60:	f841 3b04 	str.w	r3, [r1], #4
 800ae64:	9b00      	ldr	r3, [sp, #0]
 800ae66:	441e      	add	r6, r3
 800ae68:	9b02      	ldr	r3, [sp, #8]
 800ae6a:	f1ba 0a01 	subs.w	sl, sl, #1
 800ae6e:	441c      	add	r4, r3
 800ae70:	d1a2      	bne.n	800adb8 <arm_radix4_butterfly_inverse_q15+0x34>
 800ae72:	f8dd b000 	ldr.w	fp, [sp]
 800ae76:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800ae7a:	9306      	str	r3, [sp, #24]
 800ae7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae7e:	2b04      	cmp	r3, #4
 800ae80:	f240 8081 	bls.w	800af86 <arm_radix4_butterfly_inverse_q15+0x202>
 800ae84:	f8cd a008 	str.w	sl, [sp, #8]
 800ae88:	930a      	str	r3, [sp, #40]	; 0x28
 800ae8a:	469a      	mov	sl, r3
 800ae8c:	ea4f 039a 	mov.w	r3, sl, lsr #2
 800ae90:	2200      	movs	r2, #0
 800ae92:	4611      	mov	r1, r2
 800ae94:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae96:	9204      	str	r2, [sp, #16]
 800ae98:	1e5a      	subs	r2, r3, #1
 800ae9a:	009b      	lsls	r3, r3, #2
 800ae9c:	9308      	str	r3, [sp, #32]
 800ae9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aea0:	9207      	str	r2, [sp, #28]
 800aea2:	9105      	str	r1, [sp, #20]
 800aea4:	ea4f 078a 	mov.w	r7, sl, lsl #2
 800aea8:	9303      	str	r3, [sp, #12]
 800aeaa:	9908      	ldr	r1, [sp, #32]
 800aeac:	9a03      	ldr	r2, [sp, #12]
 800aeae:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800aeb0:	1850      	adds	r0, r2, r1
 800aeb2:	9a05      	ldr	r2, [sp, #20]
 800aeb4:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800aeb8:	f856 c022 	ldr.w	ip, [r6, r2, lsl #2]
 800aebc:	f856 9023 	ldr.w	r9, [r6, r3, lsl #2]
 800aec0:	9b06      	ldr	r3, [sp, #24]
 800aec2:	f856 8032 	ldr.w	r8, [r6, r2, lsl #3]
 800aec6:	18d3      	adds	r3, r2, r3
 800aec8:	9305      	str	r3, [sp, #20]
 800aeca:	9a04      	ldr	r2, [sp, #16]
 800aecc:	9b01      	ldr	r3, [sp, #4]
 800aece:	180d      	adds	r5, r1, r0
 800aed0:	4293      	cmp	r3, r2
 800aed2:	46b6      	mov	lr, r6
 800aed4:	eb01 0405 	add.w	r4, r1, r5
 800aed8:	9e03      	ldr	r6, [sp, #12]
 800aeda:	d941      	bls.n	800af60 <arm_radix4_butterfly_inverse_q15+0x1dc>
 800aedc:	eb0a 0e02 	add.w	lr, sl, r2
 800aee0:	6833      	ldr	r3, [r6, #0]
 800aee2:	682a      	ldr	r2, [r5, #0]
 800aee4:	fa93 fb12 	qadd16	fp, r3, r2
 800aee8:	fad3 f312 	qsub16	r3, r3, r2
 800aeec:	9300      	str	r3, [sp, #0]
 800aeee:	6802      	ldr	r2, [r0, #0]
 800aef0:	6821      	ldr	r1, [r4, #0]
 800aef2:	fa92 f211 	qadd16	r2, r2, r1
 800aef6:	fa9b f322 	shadd16	r3, fp, r2
 800aefa:	9902      	ldr	r1, [sp, #8]
 800aefc:	fa93 f121 	shadd16	r1, r3, r1
 800af00:	6031      	str	r1, [r6, #0]
 800af02:	443e      	add	r6, r7
 800af04:	fadb f222 	shsub16	r2, fp, r2
 800af08:	fb48 f102 	smusd	r1, r8, r2
 800af0c:	fb28 f212 	smuadx	r2, r8, r2
 800af10:	0c12      	lsrs	r2, r2, #16
 800af12:	0412      	lsls	r2, r2, #16
 800af14:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 800af18:	6801      	ldr	r1, [r0, #0]
 800af1a:	6002      	str	r2, [r0, #0]
 800af1c:	6822      	ldr	r2, [r4, #0]
 800af1e:	4438      	add	r0, r7
 800af20:	fad1 f212 	qsub16	r2, r1, r2
 800af24:	9b00      	ldr	r3, [sp, #0]
 800af26:	fae3 f122 	shsax	r1, r3, r2
 800af2a:	faa3 f322 	shasx	r3, r3, r2
 800af2e:	fb4c fb03 	smusd	fp, ip, r3
 800af32:	fb2c f313 	smuadx	r3, ip, r3
 800af36:	0c1b      	lsrs	r3, r3, #16
 800af38:	041b      	lsls	r3, r3, #16
 800af3a:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 800af3e:	602b      	str	r3, [r5, #0]
 800af40:	443d      	add	r5, r7
 800af42:	fb49 f301 	smusd	r3, r9, r1
 800af46:	fb29 f111 	smuadx	r1, r9, r1
 800af4a:	0c09      	lsrs	r1, r1, #16
 800af4c:	0409      	lsls	r1, r1, #16
 800af4e:	9a01      	ldr	r2, [sp, #4]
 800af50:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 800af54:	4673      	mov	r3, lr
 800af56:	429a      	cmp	r2, r3
 800af58:	6021      	str	r1, [r4, #0]
 800af5a:	44d6      	add	lr, sl
 800af5c:	443c      	add	r4, r7
 800af5e:	d8bf      	bhi.n	800aee0 <arm_radix4_butterfly_inverse_q15+0x15c>
 800af60:	9a03      	ldr	r2, [sp, #12]
 800af62:	9b04      	ldr	r3, [sp, #16]
 800af64:	3204      	adds	r2, #4
 800af66:	9203      	str	r2, [sp, #12]
 800af68:	9a07      	ldr	r2, [sp, #28]
 800af6a:	3301      	adds	r3, #1
 800af6c:	4293      	cmp	r3, r2
 800af6e:	9304      	str	r3, [sp, #16]
 800af70:	d99b      	bls.n	800aeaa <arm_radix4_butterfly_inverse_q15+0x126>
 800af72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af74:	9a06      	ldr	r2, [sp, #24]
 800af76:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800af7a:	089b      	lsrs	r3, r3, #2
 800af7c:	0092      	lsls	r2, r2, #2
 800af7e:	2b04      	cmp	r3, #4
 800af80:	930a      	str	r3, [sp, #40]	; 0x28
 800af82:	9206      	str	r2, [sp, #24]
 800af84:	d882      	bhi.n	800ae8c <arm_radix4_butterfly_inverse_q15+0x108>
 800af86:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800af88:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800af8a:	3410      	adds	r4, #16
 800af8c:	f854 3c10 	ldr.w	r3, [r4, #-16]
 800af90:	f854 7c08 	ldr.w	r7, [r4, #-8]
 800af94:	fa93 f117 	qadd16	r1, r3, r7
 800af98:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 800af9c:	f854 0c04 	ldr.w	r0, [r4, #-4]
 800afa0:	fa92 f510 	qadd16	r5, r2, r0
 800afa4:	fa91 f525 	shadd16	r5, r1, r5
 800afa8:	f844 5c10 	str.w	r5, [r4, #-16]
 800afac:	fa92 f510 	qadd16	r5, r2, r0
 800afb0:	fad1 f125 	shsub16	r1, r1, r5
 800afb4:	f844 1c0c 	str.w	r1, [r4, #-12]
 800afb8:	fad3 f317 	qsub16	r3, r3, r7
 800afbc:	fad2 f210 	qsub16	r2, r2, r0
 800afc0:	faa3 f122 	shasx	r1, r3, r2
 800afc4:	f844 1c08 	str.w	r1, [r4, #-8]
 800afc8:	fae3 f322 	shsax	r3, r3, r2
 800afcc:	3e01      	subs	r6, #1
 800afce:	f844 3c04 	str.w	r3, [r4, #-4]
 800afd2:	f104 0410 	add.w	r4, r4, #16
 800afd6:	d1d9      	bne.n	800af8c <arm_radix4_butterfly_inverse_q15+0x208>
 800afd8:	b00f      	add	sp, #60	; 0x3c
 800afda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afde:	bf00      	nop

0800afe0 <__libc_init_array>:
 800afe0:	b570      	push	{r4, r5, r6, lr}
 800afe2:	4d0d      	ldr	r5, [pc, #52]	; (800b018 <__libc_init_array+0x38>)
 800afe4:	4c0d      	ldr	r4, [pc, #52]	; (800b01c <__libc_init_array+0x3c>)
 800afe6:	1b64      	subs	r4, r4, r5
 800afe8:	10a4      	asrs	r4, r4, #2
 800afea:	2600      	movs	r6, #0
 800afec:	42a6      	cmp	r6, r4
 800afee:	d109      	bne.n	800b004 <__libc_init_array+0x24>
 800aff0:	4d0b      	ldr	r5, [pc, #44]	; (800b020 <__libc_init_array+0x40>)
 800aff2:	4c0c      	ldr	r4, [pc, #48]	; (800b024 <__libc_init_array+0x44>)
 800aff4:	f000 f90e 	bl	800b214 <_init>
 800aff8:	1b64      	subs	r4, r4, r5
 800affa:	10a4      	asrs	r4, r4, #2
 800affc:	2600      	movs	r6, #0
 800affe:	42a6      	cmp	r6, r4
 800b000:	d105      	bne.n	800b00e <__libc_init_array+0x2e>
 800b002:	bd70      	pop	{r4, r5, r6, pc}
 800b004:	f855 3b04 	ldr.w	r3, [r5], #4
 800b008:	4798      	blx	r3
 800b00a:	3601      	adds	r6, #1
 800b00c:	e7ee      	b.n	800afec <__libc_init_array+0xc>
 800b00e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b012:	4798      	blx	r3
 800b014:	3601      	adds	r6, #1
 800b016:	e7f2      	b.n	800affe <__libc_init_array+0x1e>
 800b018:	0801d1ac 	.word	0x0801d1ac
 800b01c:	0801d1ac 	.word	0x0801d1ac
 800b020:	0801d1ac 	.word	0x0801d1ac
 800b024:	0801d1b0 	.word	0x0801d1b0

0800b028 <__retarget_lock_acquire_recursive>:
 800b028:	4770      	bx	lr

0800b02a <__retarget_lock_release_recursive>:
 800b02a:	4770      	bx	lr

0800b02c <memcpy>:
 800b02c:	440a      	add	r2, r1
 800b02e:	4291      	cmp	r1, r2
 800b030:	f100 33ff 	add.w	r3, r0, #4294967295
 800b034:	d100      	bne.n	800b038 <memcpy+0xc>
 800b036:	4770      	bx	lr
 800b038:	b510      	push	{r4, lr}
 800b03a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b03e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b042:	4291      	cmp	r1, r2
 800b044:	d1f9      	bne.n	800b03a <memcpy+0xe>
 800b046:	bd10      	pop	{r4, pc}

0800b048 <memset>:
 800b048:	4402      	add	r2, r0
 800b04a:	4603      	mov	r3, r0
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d100      	bne.n	800b052 <memset+0xa>
 800b050:	4770      	bx	lr
 800b052:	f803 1b01 	strb.w	r1, [r3], #1
 800b056:	e7f9      	b.n	800b04c <memset+0x4>

0800b058 <cleanup_glue>:
 800b058:	b538      	push	{r3, r4, r5, lr}
 800b05a:	460c      	mov	r4, r1
 800b05c:	6809      	ldr	r1, [r1, #0]
 800b05e:	4605      	mov	r5, r0
 800b060:	b109      	cbz	r1, 800b066 <cleanup_glue+0xe>
 800b062:	f7ff fff9 	bl	800b058 <cleanup_glue>
 800b066:	4621      	mov	r1, r4
 800b068:	4628      	mov	r0, r5
 800b06a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b06e:	f000 b881 	b.w	800b174 <_free_r>
	...

0800b074 <_reclaim_reent>:
 800b074:	4b2c      	ldr	r3, [pc, #176]	; (800b128 <_reclaim_reent+0xb4>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	4283      	cmp	r3, r0
 800b07a:	b570      	push	{r4, r5, r6, lr}
 800b07c:	4604      	mov	r4, r0
 800b07e:	d051      	beq.n	800b124 <_reclaim_reent+0xb0>
 800b080:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b082:	b143      	cbz	r3, 800b096 <_reclaim_reent+0x22>
 800b084:	68db      	ldr	r3, [r3, #12]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d14a      	bne.n	800b120 <_reclaim_reent+0xac>
 800b08a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b08c:	6819      	ldr	r1, [r3, #0]
 800b08e:	b111      	cbz	r1, 800b096 <_reclaim_reent+0x22>
 800b090:	4620      	mov	r0, r4
 800b092:	f000 f86f 	bl	800b174 <_free_r>
 800b096:	6961      	ldr	r1, [r4, #20]
 800b098:	b111      	cbz	r1, 800b0a0 <_reclaim_reent+0x2c>
 800b09a:	4620      	mov	r0, r4
 800b09c:	f000 f86a 	bl	800b174 <_free_r>
 800b0a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b0a2:	b111      	cbz	r1, 800b0aa <_reclaim_reent+0x36>
 800b0a4:	4620      	mov	r0, r4
 800b0a6:	f000 f865 	bl	800b174 <_free_r>
 800b0aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b0ac:	b111      	cbz	r1, 800b0b4 <_reclaim_reent+0x40>
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	f000 f860 	bl	800b174 <_free_r>
 800b0b4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b0b6:	b111      	cbz	r1, 800b0be <_reclaim_reent+0x4a>
 800b0b8:	4620      	mov	r0, r4
 800b0ba:	f000 f85b 	bl	800b174 <_free_r>
 800b0be:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b0c0:	b111      	cbz	r1, 800b0c8 <_reclaim_reent+0x54>
 800b0c2:	4620      	mov	r0, r4
 800b0c4:	f000 f856 	bl	800b174 <_free_r>
 800b0c8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b0ca:	b111      	cbz	r1, 800b0d2 <_reclaim_reent+0x5e>
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	f000 f851 	bl	800b174 <_free_r>
 800b0d2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b0d4:	b111      	cbz	r1, 800b0dc <_reclaim_reent+0x68>
 800b0d6:	4620      	mov	r0, r4
 800b0d8:	f000 f84c 	bl	800b174 <_free_r>
 800b0dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0de:	b111      	cbz	r1, 800b0e6 <_reclaim_reent+0x72>
 800b0e0:	4620      	mov	r0, r4
 800b0e2:	f000 f847 	bl	800b174 <_free_r>
 800b0e6:	69a3      	ldr	r3, [r4, #24]
 800b0e8:	b1e3      	cbz	r3, 800b124 <_reclaim_reent+0xb0>
 800b0ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b0ec:	4620      	mov	r0, r4
 800b0ee:	4798      	blx	r3
 800b0f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b0f2:	b1b9      	cbz	r1, 800b124 <_reclaim_reent+0xb0>
 800b0f4:	4620      	mov	r0, r4
 800b0f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b0fa:	f7ff bfad 	b.w	800b058 <cleanup_glue>
 800b0fe:	5949      	ldr	r1, [r1, r5]
 800b100:	b941      	cbnz	r1, 800b114 <_reclaim_reent+0xa0>
 800b102:	3504      	adds	r5, #4
 800b104:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b106:	2d80      	cmp	r5, #128	; 0x80
 800b108:	68d9      	ldr	r1, [r3, #12]
 800b10a:	d1f8      	bne.n	800b0fe <_reclaim_reent+0x8a>
 800b10c:	4620      	mov	r0, r4
 800b10e:	f000 f831 	bl	800b174 <_free_r>
 800b112:	e7ba      	b.n	800b08a <_reclaim_reent+0x16>
 800b114:	680e      	ldr	r6, [r1, #0]
 800b116:	4620      	mov	r0, r4
 800b118:	f000 f82c 	bl	800b174 <_free_r>
 800b11c:	4631      	mov	r1, r6
 800b11e:	e7ef      	b.n	800b100 <_reclaim_reent+0x8c>
 800b120:	2500      	movs	r5, #0
 800b122:	e7ef      	b.n	800b104 <_reclaim_reent+0x90>
 800b124:	bd70      	pop	{r4, r5, r6, pc}
 800b126:	bf00      	nop
 800b128:	200002fc 	.word	0x200002fc

0800b12c <strstr>:
 800b12c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b12e:	780c      	ldrb	r4, [r1, #0]
 800b130:	b164      	cbz	r4, 800b14c <strstr+0x20>
 800b132:	4603      	mov	r3, r0
 800b134:	781a      	ldrb	r2, [r3, #0]
 800b136:	4618      	mov	r0, r3
 800b138:	1c5e      	adds	r6, r3, #1
 800b13a:	b90a      	cbnz	r2, 800b140 <strstr+0x14>
 800b13c:	4610      	mov	r0, r2
 800b13e:	e005      	b.n	800b14c <strstr+0x20>
 800b140:	4294      	cmp	r4, r2
 800b142:	d108      	bne.n	800b156 <strstr+0x2a>
 800b144:	460d      	mov	r5, r1
 800b146:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800b14a:	b902      	cbnz	r2, 800b14e <strstr+0x22>
 800b14c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b14e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800b152:	4297      	cmp	r7, r2
 800b154:	d0f7      	beq.n	800b146 <strstr+0x1a>
 800b156:	4633      	mov	r3, r6
 800b158:	e7ec      	b.n	800b134 <strstr+0x8>
	...

0800b15c <__malloc_lock>:
 800b15c:	4801      	ldr	r0, [pc, #4]	; (800b164 <__malloc_lock+0x8>)
 800b15e:	f7ff bf63 	b.w	800b028 <__retarget_lock_acquire_recursive>
 800b162:	bf00      	nop
 800b164:	20006e8c 	.word	0x20006e8c

0800b168 <__malloc_unlock>:
 800b168:	4801      	ldr	r0, [pc, #4]	; (800b170 <__malloc_unlock+0x8>)
 800b16a:	f7ff bf5e 	b.w	800b02a <__retarget_lock_release_recursive>
 800b16e:	bf00      	nop
 800b170:	20006e8c 	.word	0x20006e8c

0800b174 <_free_r>:
 800b174:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b176:	2900      	cmp	r1, #0
 800b178:	d048      	beq.n	800b20c <_free_r+0x98>
 800b17a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b17e:	9001      	str	r0, [sp, #4]
 800b180:	2b00      	cmp	r3, #0
 800b182:	f1a1 0404 	sub.w	r4, r1, #4
 800b186:	bfb8      	it	lt
 800b188:	18e4      	addlt	r4, r4, r3
 800b18a:	f7ff ffe7 	bl	800b15c <__malloc_lock>
 800b18e:	4a20      	ldr	r2, [pc, #128]	; (800b210 <_free_r+0x9c>)
 800b190:	9801      	ldr	r0, [sp, #4]
 800b192:	6813      	ldr	r3, [r2, #0]
 800b194:	4615      	mov	r5, r2
 800b196:	b933      	cbnz	r3, 800b1a6 <_free_r+0x32>
 800b198:	6063      	str	r3, [r4, #4]
 800b19a:	6014      	str	r4, [r2, #0]
 800b19c:	b003      	add	sp, #12
 800b19e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1a2:	f7ff bfe1 	b.w	800b168 <__malloc_unlock>
 800b1a6:	42a3      	cmp	r3, r4
 800b1a8:	d90b      	bls.n	800b1c2 <_free_r+0x4e>
 800b1aa:	6821      	ldr	r1, [r4, #0]
 800b1ac:	1862      	adds	r2, r4, r1
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	bf04      	itt	eq
 800b1b2:	681a      	ldreq	r2, [r3, #0]
 800b1b4:	685b      	ldreq	r3, [r3, #4]
 800b1b6:	6063      	str	r3, [r4, #4]
 800b1b8:	bf04      	itt	eq
 800b1ba:	1852      	addeq	r2, r2, r1
 800b1bc:	6022      	streq	r2, [r4, #0]
 800b1be:	602c      	str	r4, [r5, #0]
 800b1c0:	e7ec      	b.n	800b19c <_free_r+0x28>
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	b10b      	cbz	r3, 800b1cc <_free_r+0x58>
 800b1c8:	42a3      	cmp	r3, r4
 800b1ca:	d9fa      	bls.n	800b1c2 <_free_r+0x4e>
 800b1cc:	6811      	ldr	r1, [r2, #0]
 800b1ce:	1855      	adds	r5, r2, r1
 800b1d0:	42a5      	cmp	r5, r4
 800b1d2:	d10b      	bne.n	800b1ec <_free_r+0x78>
 800b1d4:	6824      	ldr	r4, [r4, #0]
 800b1d6:	4421      	add	r1, r4
 800b1d8:	1854      	adds	r4, r2, r1
 800b1da:	42a3      	cmp	r3, r4
 800b1dc:	6011      	str	r1, [r2, #0]
 800b1de:	d1dd      	bne.n	800b19c <_free_r+0x28>
 800b1e0:	681c      	ldr	r4, [r3, #0]
 800b1e2:	685b      	ldr	r3, [r3, #4]
 800b1e4:	6053      	str	r3, [r2, #4]
 800b1e6:	4421      	add	r1, r4
 800b1e8:	6011      	str	r1, [r2, #0]
 800b1ea:	e7d7      	b.n	800b19c <_free_r+0x28>
 800b1ec:	d902      	bls.n	800b1f4 <_free_r+0x80>
 800b1ee:	230c      	movs	r3, #12
 800b1f0:	6003      	str	r3, [r0, #0]
 800b1f2:	e7d3      	b.n	800b19c <_free_r+0x28>
 800b1f4:	6825      	ldr	r5, [r4, #0]
 800b1f6:	1961      	adds	r1, r4, r5
 800b1f8:	428b      	cmp	r3, r1
 800b1fa:	bf04      	itt	eq
 800b1fc:	6819      	ldreq	r1, [r3, #0]
 800b1fe:	685b      	ldreq	r3, [r3, #4]
 800b200:	6063      	str	r3, [r4, #4]
 800b202:	bf04      	itt	eq
 800b204:	1949      	addeq	r1, r1, r5
 800b206:	6021      	streq	r1, [r4, #0]
 800b208:	6054      	str	r4, [r2, #4]
 800b20a:	e7c7      	b.n	800b19c <_free_r+0x28>
 800b20c:	b003      	add	sp, #12
 800b20e:	bd30      	pop	{r4, r5, pc}
 800b210:	20005d50 	.word	0x20005d50

0800b214 <_init>:
 800b214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b216:	bf00      	nop
 800b218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b21a:	bc08      	pop	{r3}
 800b21c:	469e      	mov	lr, r3
 800b21e:	4770      	bx	lr

0800b220 <_fini>:
 800b220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b222:	bf00      	nop
 800b224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b226:	bc08      	pop	{r3}
 800b228:	469e      	mov	lr, r3
 800b22a:	4770      	bx	lr
